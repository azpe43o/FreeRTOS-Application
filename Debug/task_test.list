
task_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800cee0  0800cee0  0001cee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d504  0800d504  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d504  0800d504  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d504  0800d504  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d504  0800d504  0001d504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d508  0800d508  0001d508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d50c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  200001f0  0800d6fc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cc4  0800d6fc  00021cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b555  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003649  00000000  00000000  0003b775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00040118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f173  00000000  00000000  00041340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185f8  00000000  00000000  000604b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b70c4  00000000  00000000  00078aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fb6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006604  00000000  00000000  0012fbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cec4 	.word	0x0800cec4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800cec4 	.word	0x0800cec4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f000 fe3b 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f8f1 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 f9d3 	bl	80010ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d06:	f000 f9a1 	bl	800104c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d0a:	f000 f943 	bl	8000f94 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(MenuTask, "Menu_Task", configMINIMAL_STACK_SIZE, NULL, 3,  &MenuTaskHandle);
 8000d0e:	4b61      	ldr	r3, [pc, #388]	; (8000e94 <main+0x1a0>)
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	2303      	movs	r3, #3
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	22c8      	movs	r2, #200	; 0xc8
 8000d1a:	495f      	ldr	r1, [pc, #380]	; (8000e98 <main+0x1a4>)
 8000d1c:	485f      	ldr	r0, [pc, #380]	; (8000e9c <main+0x1a8>)
 8000d1e:	f005 fd88 	bl	8006832 <xTaskCreate>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4a5e      	ldr	r2, [pc, #376]	; (8000ea0 <main+0x1ac>)
 8000d26:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000d28:	4b5d      	ldr	r3, [pc, #372]	; (8000ea0 <main+0x1ac>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d00a      	beq.n	8000d46 <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d34:	f383 8811 	msr	BASEPRI, r3
 8000d38:	f3bf 8f6f 	isb	sy
 8000d3c:	f3bf 8f4f 	dsb	sy
 8000d40:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d42:	bf00      	nop
 8000d44:	e7fe      	b.n	8000d44 <main+0x50>

   status = xTaskCreate(CmdHandlerTask, "Cmd_Task", configMINIMAL_STACK_SIZE, NULL, 3, &CmdTaskHandle);
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <main+0x1b0>)
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22c8      	movs	r2, #200	; 0xc8
 8000d52:	4955      	ldr	r1, [pc, #340]	; (8000ea8 <main+0x1b4>)
 8000d54:	4855      	ldr	r0, [pc, #340]	; (8000eac <main+0x1b8>)
 8000d56:	f005 fd6c 	bl	8006832 <xTaskCreate>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a50      	ldr	r2, [pc, #320]	; (8000ea0 <main+0x1ac>)
 8000d5e:	6013      	str	r3, [r2, #0]
      configASSERT(status == pdPASS);
 8000d60:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <main+0x1ac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d00a      	beq.n	8000d7e <main+0x8a>
        __asm volatile
 8000d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6c:	f383 8811 	msr	BASEPRI, r3
 8000d70:	f3bf 8f6f 	isb	sy
 8000d74:	f3bf 8f4f 	dsb	sy
 8000d78:	61bb      	str	r3, [r7, #24]
    }
 8000d7a:	bf00      	nop
 8000d7c:	e7fe      	b.n	8000d7c <main+0x88>

   status = xTaskCreate(PrintTask, "Print_Task", configMINIMAL_STACK_SIZE, NULL,3, &PrintTaskHandle);
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <main+0x1bc>)
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	2303      	movs	r3, #3
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	22c8      	movs	r2, #200	; 0xc8
 8000d8a:	494a      	ldr	r1, [pc, #296]	; (8000eb4 <main+0x1c0>)
 8000d8c:	484a      	ldr	r0, [pc, #296]	; (8000eb8 <main+0x1c4>)
 8000d8e:	f005 fd50 	bl	8006832 <xTaskCreate>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a42      	ldr	r2, [pc, #264]	; (8000ea0 <main+0x1ac>)
 8000d96:	6013      	str	r3, [r2, #0]
      configASSERT(status == pdPASS);
 8000d98:	4b41      	ldr	r3, [pc, #260]	; (8000ea0 <main+0x1ac>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d00a      	beq.n	8000db6 <main+0xc2>
        __asm volatile
 8000da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da4:	f383 8811 	msr	BASEPRI, r3
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	f3bf 8f4f 	dsb	sy
 8000db0:	617b      	str	r3, [r7, #20]
    }
 8000db2:	bf00      	nop
 8000db4:	e7fe      	b.n	8000db4 <main+0xc0>

   status = xTaskCreate( LEDTask, "LED_Task", configMINIMAL_STACK_SIZE, NULL,3, &LEDTaskHandle);
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <main+0x1c8>)
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	2303      	movs	r3, #3
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	22c8      	movs	r2, #200	; 0xc8
 8000dc2:	493f      	ldr	r1, [pc, #252]	; (8000ec0 <main+0x1cc>)
 8000dc4:	483f      	ldr	r0, [pc, #252]	; (8000ec4 <main+0x1d0>)
 8000dc6:	f005 fd34 	bl	8006832 <xTaskCreate>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a34      	ldr	r2, [pc, #208]	; (8000ea0 <main+0x1ac>)
 8000dce:	6013      	str	r3, [r2, #0]
      configASSERT(status == pdPASS);
 8000dd0:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <main+0x1ac>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d00a      	beq.n	8000dee <main+0xfa>
        __asm volatile
 8000dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ddc:	f383 8811 	msr	BASEPRI, r3
 8000de0:	f3bf 8f6f 	isb	sy
 8000de4:	f3bf 8f4f 	dsb	sy
 8000de8:	613b      	str	r3, [r7, #16]
    }
 8000dea:	bf00      	nop
 8000dec:	e7fe      	b.n	8000dec <main+0xf8>

   status = xTaskCreate(ADCTask, "ADC_Task", configMINIMAL_STACK_SIZE, NULL,3, &ADCTaskHandle);
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <main+0x1d4>)
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	2303      	movs	r3, #3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	22c8      	movs	r2, #200	; 0xc8
 8000dfa:	4934      	ldr	r1, [pc, #208]	; (8000ecc <main+0x1d8>)
 8000dfc:	4834      	ldr	r0, [pc, #208]	; (8000ed0 <main+0x1dc>)
 8000dfe:	f005 fd18 	bl	8006832 <xTaskCreate>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a26      	ldr	r2, [pc, #152]	; (8000ea0 <main+0x1ac>)
 8000e06:	6013      	str	r3, [r2, #0]
      configASSERT(status == pdPASS);
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <main+0x1ac>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d00a      	beq.n	8000e26 <main+0x132>
        __asm volatile
 8000e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e14:	f383 8811 	msr	BASEPRI, r3
 8000e18:	f3bf 8f6f 	isb	sy
 8000e1c:	f3bf 8f4f 	dsb	sy
 8000e20:	60fb      	str	r3, [r7, #12]
    }
 8000e22:	bf00      	nop
 8000e24:	e7fe      	b.n	8000e24 <main+0x130>

   DataQueue = xQueueCreate(10, sizeof(char));
 8000e26:	2200      	movs	r2, #0
 8000e28:	2101      	movs	r1, #1
 8000e2a:	200a      	movs	r0, #10
 8000e2c:	f005 f814 	bl	8005e58 <xQueueGenericCreate>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <main+0x1e0>)
 8000e34:	6013      	str	r3, [r2, #0]
      configASSERT( DataQueue != NULL);
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <main+0x1e0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10a      	bne.n	8000e54 <main+0x160>
        __asm volatile
 8000e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e42:	f383 8811 	msr	BASEPRI, r3
 8000e46:	f3bf 8f6f 	isb	sy
 8000e4a:	f3bf 8f4f 	dsb	sy
 8000e4e:	60bb      	str	r3, [r7, #8]
    }
 8000e50:	bf00      	nop
 8000e52:	e7fe      	b.n	8000e52 <main+0x15e>

   PrintQueue = xQueueCreate(5, sizeof(size_t));
 8000e54:	2200      	movs	r2, #0
 8000e56:	2104      	movs	r1, #4
 8000e58:	2005      	movs	r0, #5
 8000e5a:	f004 fffd 	bl	8005e58 <xQueueGenericCreate>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <main+0x1e4>)
 8000e62:	6013      	str	r3, [r2, #0]
      configASSERT(PrintQueue!= NULL);
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <main+0x1e4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10a      	bne.n	8000e82 <main+0x18e>
        __asm volatile
 8000e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e70:	f383 8811 	msr	BASEPRI, r3
 8000e74:	f3bf 8f6f 	isb	sy
 8000e78:	f3bf 8f4f 	dsb	sy
 8000e7c:	607b      	str	r3, [r7, #4]
    }
 8000e7e:	bf00      	nop
 8000e80:	e7fe      	b.n	8000e80 <main+0x18c>



    HAL_UART_Receive_IT(&huart2, (uint8_t*)&DataEntered, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	4915      	ldr	r1, [pc, #84]	; (8000edc <main+0x1e8>)
 8000e86:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <main+0x1ec>)
 8000e88:	f003 fd78 	bl	800497c <HAL_UART_Receive_IT>

   vTaskStartScheduler();
 8000e8c:	f005 fe3c 	bl	8006b08 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <main+0x19c>
 8000e92:	bf00      	nop
 8000e94:	20001bcc 	.word	0x20001bcc
 8000e98:	0800cee0 	.word	0x0800cee0
 8000e9c:	080015d1 	.word	0x080015d1
 8000ea0:	20001c60 	.word	0x20001c60
 8000ea4:	20001bd4 	.word	0x20001bd4
 8000ea8:	0800ceec 	.word	0x0800ceec
 8000eac:	0800169d 	.word	0x0800169d
 8000eb0:	20001bd0 	.word	0x20001bd0
 8000eb4:	0800cef8 	.word	0x0800cef8
 8000eb8:	080017a5 	.word	0x080017a5
 8000ebc:	20001b70 	.word	0x20001b70
 8000ec0:	0800cf04 	.word	0x0800cf04
 8000ec4:	080017e5 	.word	0x080017e5
 8000ec8:	20001bc8 	.word	0x20001bc8
 8000ecc:	0800cf10 	.word	0x0800cf10
 8000ed0:	08001825 	.word	0x08001825
 8000ed4:	20001b74 	.word	0x20001b74
 8000ed8:	20001b6c 	.word	0x20001b6c
 8000edc:	2000020c 	.word	0x2000020c
 8000ee0:	20001bd8 	.word	0x20001bd8

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09c      	sub	sp, #112	; 0x70
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eee:	2228      	movs	r2, #40	; 0x28
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f007 fbb6 	bl	8008664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2234      	movs	r2, #52	; 0x34
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f007 fba8 	bl	8008664 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f20:	2302      	movs	r3, #2
 8000f22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f24:	2300      	movs	r3, #0
 8000f26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f28:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 febe 	bl	8002cb4 <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f3e:	f000 f976 	bl	800122e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fdb0 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f6a:	f000 f960 	bl	800122e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f80a 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f86:	f000 f952 	bl	800122e <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3770      	adds	r7, #112	; 0x70
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_ADC1_Init+0xb4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_ADC1_Init+0xb4>)
 8001000:	2200      	movs	r2, #0
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <MX_ADC1_Init+0xb4>)
 8001006:	f000 fceb 	bl	80019e0 <HAL_ADC_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001010:	f000 f90d 	bl	800122e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001014:	2301      	movs	r3, #1
 8001016:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001018:	2301      	movs	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_ADC1_Init+0xb4>)
 8001032:	f000 ff0b 	bl	8001e4c <HAL_ADC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800103c:	f000 f8f7 	bl	800122e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20001b78 	.word	0x20001b78

0800104c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_USART2_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001090:	f003 fb9c 	bl	80047cc <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f000 f8c8 	bl	800122e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20001bd8 	.word	0x20001bd8
 80010a8:	40004400 	.word	0x40004400

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <MX_GPIO_Init+0xc4>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <MX_GPIO_Init+0xc4>)
 80010c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_GPIO_Init+0xc4>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <MX_GPIO_Init+0xc4>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a24      	ldr	r2, [pc, #144]	; (8001170 <MX_GPIO_Init+0xc4>)
 80010e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <MX_GPIO_Init+0xc4>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_GPIO_Init+0xc4>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <MX_GPIO_Init+0xc4>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_GPIO_Init+0xc4>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_GPIO_Init+0xc4>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <MX_GPIO_Init+0xc4>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_GPIO_Init+0xc4>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001128:	4812      	ldr	r0, [pc, #72]	; (8001174 <MX_GPIO_Init+0xc8>)
 800112a:	f001 fd91 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001134:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <MX_GPIO_Init+0xcc>)
 8001146:	f001 fc11 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800114a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_GPIO_Init+0xc8>)
 8001164:	f001 fc02 	bl	800296c <HAL_GPIO_Init>

}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	48000400 	.word	0x48000400
 8001178:	48000800 	.word	0x48000800

0800117c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]

	if(!xQueueIsQueueFullFromISR( DataQueue )){
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_UART_RxCpltCallback+0x80>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f005 fb2c 	bl	80067e6 <xQueueIsQueueFullFromISR>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d107      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x28>
		xQueueSendFromISR(DataQueue, (void*)&DataEntered, pdFALSE);
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_RxCpltCallback+0x80>)
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	2300      	movs	r3, #0
 800119a:	2200      	movs	r2, #0
 800119c:	4918      	ldr	r1, [pc, #96]	; (8001200 <HAL_UART_RxCpltCallback+0x84>)
 800119e:	f004 ffcb 	bl	8006138 <xQueueGenericSendFromISR>
 80011a2:	e012      	b.n	80011ca <HAL_UART_RxCpltCallback+0x4e>

	}
	else{
		if(DataEntered =='\n'){
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_UART_RxCpltCallback+0x84>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b0a      	cmp	r3, #10
 80011ac:	d10d      	bne.n	80011ca <HAL_UART_RxCpltCallback+0x4e>

			xQueueReceiveFromISR( DataQueue, (void *)&Dummy, NULL);
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_UART_RxCpltCallback+0x80>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	4913      	ldr	r1, [pc, #76]	; (8001204 <HAL_UART_RxCpltCallback+0x88>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 f950 	bl	800645c <xQueueReceiveFromISR>
			xQueueSendFromISR( DataQueue, (void*)&DataEntered, pdFALSE);
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_UART_RxCpltCallback+0x80>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	2200      	movs	r2, #0
 80011c4:	490e      	ldr	r1, [pc, #56]	; (8001200 <HAL_UART_RxCpltCallback+0x84>)
 80011c6:	f004 ffb7 	bl	8006138 <xQueueGenericSendFromISR>
		}
	}
	if(DataEntered =='\n'){
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_UART_RxCpltCallback+0x84>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b0a      	cmp	r3, #10
 80011d2:	d10a      	bne.n	80011ea <HAL_UART_RxCpltCallback+0x6e>
		xTaskNotifyFromISR(CmdTaskHandle, 0, eNoAction, NULL);
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_UART_RxCpltCallback+0x8c>)
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	f006 fc07 	bl	80079f8 <xTaskGenericNotifyFromISR>
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&DataEntered, 1);
 80011ea:	2201      	movs	r2, #1
 80011ec:	4904      	ldr	r1, [pc, #16]	; (8001200 <HAL_UART_RxCpltCallback+0x84>)
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <HAL_UART_RxCpltCallback+0x90>)
 80011f0:	f003 fbc4 	bl	800497c <HAL_UART_Receive_IT>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20001b74 	.word	0x20001b74
 8001200:	2000020c 	.word	0x2000020c
 8001204:	2000020d 	.word	0x2000020d
 8001208:	20001bd4 	.word	0x20001bd4
 800120c:	20001bd8 	.word	0x20001bd8

08001210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001220:	d101      	bne.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001222:	f000 fbbd 	bl	80019a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8001232:	e7fe      	b.n	8001232 <Error_Handler+0x4>

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_MspInit+0x44>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6193      	str	r3, [r2, #24]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_MspInit+0x44>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_MspInit+0x44>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x44>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x44>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126a:	2003      	movs	r0, #3
 800126c:	f001 fad1 	bl	8002812 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129c:	d124      	bne.n	80012e8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_ADC_MspInit+0x74>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <HAL_ADC_MspInit+0x74>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_ADC_MspInit+0x74>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_ADC_MspInit+0x74>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_ADC_MspInit+0x74>)
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_ADC_MspInit+0x74>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ce:	2301      	movs	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d2:	2303      	movs	r3, #3
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f001 fb42 	bl	800296c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_UART_MspInit+0x8c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d130      	bne.n	8001378 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_UART_MspInit+0x90>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_UART_MspInit+0x90>)
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_MspInit+0x90>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_MspInit+0x90>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_UART_MspInit+0x90>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_UART_MspInit+0x90>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001346:	230c      	movs	r3, #12
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001356:	2307      	movs	r3, #7
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f001 fb02 	bl	800296c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2106      	movs	r1, #6
 800136c:	2026      	movs	r0, #38	; 0x26
 800136e:	f001 fa5b 	bl	8002828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001372:	2026      	movs	r0, #38	; 0x26
 8001374:	f001 fa74 	bl	8002860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	; 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40004400 	.word	0x40004400
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	201c      	movs	r0, #28
 800139e:	f001 fa43 	bl	8002828 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a2:	201c      	movs	r0, #28
 80013a4:	f001 fa5c 	bl	8002860 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_InitTick+0xa4>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <HAL_InitTick+0xa4>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	61d3      	str	r3, [r2, #28]
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_InitTick+0xa4>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c0:	f107 0210 	add.w	r2, r7, #16
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fdb0 	bl	8003f30 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013d0:	f002 fd6a 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 80013d4:	4603      	mov	r3, r0
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <HAL_InitTick+0xa8>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	3b01      	subs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0xac>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_InitTick+0xac>)
 80013f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_InitTick+0xac>)
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_InitTick+0xac>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_InitTick+0xac>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800140a:	480a      	ldr	r0, [pc, #40]	; (8001434 <HAL_InitTick+0xac>)
 800140c:	f002 ff54 	bl	80042b8 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <HAL_InitTick+0xac>)
 8001418:	f002 ffb0 	bl	800437c <HAL_TIM_Base_Start_IT>
 800141c:	4603      	mov	r3, r0
 800141e:	e000      	b.n	8001422 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	3730      	adds	r7, #48	; 0x30
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	431bde83 	.word	0x431bde83
 8001434:	20001c64 	.word	0x20001c64

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <TIM2_IRQHandler+0x10>)
 800146a:	f002 ffdb 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
 // xPortSysTickHandler();
  /* USER CODE END TIM2_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20001c64 	.word	0x20001c64

08001478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <USART2_IRQHandler+0x10>)
 800147e:	f003 fac1 	bl	8004a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20001bd8 	.word	0x20001bd8

0800148c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	return 1;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_kill>:

int _kill(int pid, int sig)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014a6:	f007 f8a5 	bl	80085f4 <__errno>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2216      	movs	r2, #22
 80014ae:	601a      	str	r2, [r3, #0]
	return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_exit>:

void _exit (int status)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ffe7 	bl	800149c <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ce:	e7fe      	b.n	80014ce <_exit+0x12>

080014d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014e2:	f3af 8000 	nop.w
 80014e6:	4601      	mov	r1, r0
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60ba      	str	r2, [r7, #8]
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf0      	blt.n	80014e2 <_read+0x12>
	}

return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e009      	b.n	8001530 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	60ba      	str	r2, [r7, #8]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf1      	blt.n	800151c <_write+0x12>
	}
	return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_close>:

int _close(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	return -1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156a:	605a      	str	r2, [r3, #4]
	return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_isatty>:

int _isatty(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	return 1;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
	return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <MenuTask>:
					"Exit -----------------------3\n"
					"Enter your choice here: \n";



void MenuTask(void* param){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]

	command_t* Command;
	uint32_t Command_Address;

	while(1){
		xQueueSend(PrintQueue, &msg, portMAX_DELAY);
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <MenuTask+0xb8>)
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	f04f 32ff 	mov.w	r2, #4294967295
 80015e2:	492a      	ldr	r1, [pc, #168]	; (800168c <MenuTask+0xbc>)
 80015e4:	f004 fcaa 	bl	8005f3c <xQueueGenericSend>
		xTaskNotifyWait(0, 0, &Command_Address, portMAX_DELAY);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	9200      	str	r2, [sp, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2000      	movs	r0, #0
 80015f8:	f006 f850 	bl	800769c <xTaskGenericNotifyWait>

		Command = (command_t*)Command_Address;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	617b      	str	r3, [r7, #20]

		if(Command->length == 1){
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	895b      	ldrh	r3, [r3, #10]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d12a      	bne.n	800165e <MenuTask+0x8e>
			uint8_t option = Command->command[0]- 48;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	3b30      	subs	r3, #48	; 0x30
 800160e:	74fb      	strb	r3, [r7, #19]
			switch(option){
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d02c      	beq.n	8001670 <MenuTask+0xa0>
 8001616:	2b03      	cmp	r3, #3
 8001618:	dc18      	bgt.n	800164c <MenuTask+0x7c>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d002      	beq.n	8001624 <MenuTask+0x54>
 800161e:	2b02      	cmp	r3, #2
 8001620:	d00a      	beq.n	8001638 <MenuTask+0x68>
 8001622:	e013      	b.n	800164c <MenuTask+0x7c>
			case 1:
				xTaskNotify(LEDTaskHandle, 0, eNoAction);
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MenuTask+0xc0>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2300      	movs	r3, #0
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	f006 f8b7 	bl	80077a4 <xTaskGenericNotify>
				break;
 8001636:	e01c      	b.n	8001672 <MenuTask+0xa2>
			case 2:

				xTaskNotify(ADCTaskHandle, 0, eNoAction);
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MenuTask+0xc4>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	f006 f8ad 	bl	80077a4 <xTaskGenericNotify>
				break;
 800164a:	e012      	b.n	8001672 <MenuTask+0xa2>
			case 3:
				break;  //exit
			default:
				xQueueSend(PrintQueue, &InvalidMessage, portMAX_DELAY);
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MenuTask+0xb8>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	2300      	movs	r3, #0
 8001652:	f04f 32ff 	mov.w	r2, #4294967295
 8001656:	4910      	ldr	r1, [pc, #64]	; (8001698 <MenuTask+0xc8>)
 8001658:	f004 fc70 	bl	8005f3c <xQueueGenericSend>
				continue;
 800165c:	e012      	b.n	8001684 <MenuTask+0xb4>
			}
		}
		else{
			xQueueSend(PrintQueue, &InvalidMessage, portMAX_DELAY);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MenuTask+0xb8>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	490b      	ldr	r1, [pc, #44]	; (8001698 <MenuTask+0xc8>)
 800166a:	f004 fc67 	bl	8005f3c <xQueueGenericSend>
			continue;
 800166e:	e009      	b.n	8001684 <MenuTask+0xb4>
				break;  //exit
 8001670:	bf00      	nop
		}

		xTaskNotifyWait(0, 0, NULL,portMAX_DELAY);
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2000      	movs	r0, #0
 8001680:	f006 f80c 	bl	800769c <xTaskGenericNotifyWait>
		xQueueSend(PrintQueue, &msg, portMAX_DELAY);
 8001684:	e7a8      	b.n	80015d8 <MenuTask+0x8>
 8001686:	bf00      	nop
 8001688:	20001b6c 	.word	0x20001b6c
 800168c:	20000008 	.word	0x20000008
 8001690:	20001b70 	.word	0x20001b70
 8001694:	20001bc8 	.word	0x20001bc8
 8001698:	20000004 	.word	0x20000004

0800169c <CmdHandlerTask>:
	}
}


void CmdHandlerTask(void* param){
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	for(int i = 0; i < 10; i++){  // initialize command array
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	e008      	b.n	80016bc <CmdHandlerTask+0x20>
		cmd.command[i] = 0;
 80016aa:	f107 0208 	add.w	r2, r7, #8
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++){  // initialize command array
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b09      	cmp	r3, #9
 80016c0:	ddf3      	ble.n	80016aa <CmdHandlerTask+0xe>
	}
	cmd.length = 0;  // initialize length
 80016c2:	2300      	movs	r3, #0
 80016c4:	827b      	strh	r3, [r7, #18]
	while(1){
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2000      	movs	r0, #0
 80016d4:	f005 ffe2 	bl	800769c <xTaskGenericNotifyWait>
 80016d8:	61b8      	str	r0, [r7, #24]
		if(ret == pdTRUE){
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d1f2      	bne.n	80016c6 <CmdHandlerTask+0x2a>
			int returnValue= extract_cmd(&cmd);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f815 	bl	8001714 <extract_cmd>
 80016ea:	6178      	str	r0, [r7, #20]
			if(returnValue == -1) Error_Handler();
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f2:	d101      	bne.n	80016f8 <CmdHandlerTask+0x5c>
 80016f4:	f7ff fd9b 	bl	800122e <Error_Handler>
			xTaskNotify(MenuTaskHandle, (uint32_t)(&cmd), eSetValueWithOverwrite);
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <CmdHandlerTask+0x74>)
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	f107 0208 	add.w	r2, r7, #8
 8001700:	2300      	movs	r3, #0
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2303      	movs	r3, #3
 8001706:	2100      	movs	r1, #0
 8001708:	f006 f84c 	bl	80077a4 <xTaskGenericNotify>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800170c:	e7db      	b.n	80016c6 <CmdHandlerTask+0x2a>
 800170e:	bf00      	nop
 8001710:	20001bcc 	.word	0x20001bcc

08001714 <extract_cmd>:
		}
	}
}

int extract_cmd(command_t* cmd){
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	uint8_t data;
	uint8_t index = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
	//for(int i = 0; i < 10; i++){
	//	cmd->command[i]= 5;  // any number less than 10 and other than 0, 1, 2
//	}
	status = uxQueueMessagesWaiting(DataQueue);
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <extract_cmd+0x8c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f004 ff30 	bl	800658a <uxQueueMessagesWaiting>
 800172a:	4603      	mov	r3, r0
 800172c:	60fb      	str	r3, [r7, #12]
	if(!status) return -1;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <extract_cmd+0x26>
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	e02d      	b.n	8001796 <extract_cmd+0x82>
	for(int i = 0; i < 10; i++){
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	e019      	b.n	8001774 <extract_cmd+0x60>
		status = xQueueReceive(DataQueue, &data, 0 );
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <extract_cmd+0x8c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f107 010b 	add.w	r1, r7, #11
 8001748:	2200      	movs	r2, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fda6 	bl	800629c <xQueueReceive>
 8001750:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10a      	bne.n	800176e <extract_cmd+0x5a>
			if(data == '\n') break;
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	2b0a      	cmp	r3, #10
 800175c:	d00e      	beq.n	800177c <extract_cmd+0x68>
			cmd->command[i] = data;
 800175e:	7af9      	ldrb	r1, [r7, #11]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4413      	add	r3, r2
 8001766:	460a      	mov	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
			index = i;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 10; i++){
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	3301      	adds	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b09      	cmp	r3, #9
 8001778:	dde2      	ble.n	8001740 <extract_cmd+0x2c>
 800177a:	e000      	b.n	800177e <extract_cmd+0x6a>
			if(data == '\n') break;
 800177c:	bf00      	nop
		}
	}
	cmd->command[index+1]='\0';
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	3301      	adds	r3, #1
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	2100      	movs	r1, #0
 8001786:	54d1      	strb	r1, [r2, r3]
	cmd->length = index + 1;
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	b29b      	uxth	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	815a      	strh	r2, [r3, #10]

	return 0;
 8001794:	2300      	movs	r3, #0

}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20001b74 	.word	0x20001b74

080017a4 <PrintTask>:

void PrintTask(void* param){
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	uint32_t* dataBuffer;
	while(1){
		xQueueReceive(PrintQueue, &dataBuffer, portMAX_DELAY );
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <PrintTask+0x38>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f107 010c 	add.w	r1, r7, #12
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fd6f 	bl	800629c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)dataBuffer, strlen((char*)dataBuffer), HAL_MAX_DELAY );
 80017be:	68fc      	ldr	r4, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fd04 	bl	80001d0 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	4621      	mov	r1, r4
 80017d2:	4803      	ldr	r0, [pc, #12]	; (80017e0 <PrintTask+0x3c>)
 80017d4:	f003 f848 	bl	8004868 <HAL_UART_Transmit>
		xQueueReceive(PrintQueue, &dataBuffer, portMAX_DELAY );
 80017d8:	e7e8      	b.n	80017ac <PrintTask+0x8>
 80017da:	bf00      	nop
 80017dc:	20001b6c 	.word	0x20001b6c
 80017e0:	20001bd8 	.word	0x20001bd8

080017e4 <LEDTask>:

	}
}

void LEDTask(void* param){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	6078      	str	r0, [r7, #4]
	while(1){

		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2300      	movs	r3, #0
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	2000      	movs	r0, #0
 80017fa:	f005 ff4f 	bl	800769c <xTaskGenericNotifyWait>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <LEDTask+0x38>)
 8001804:	f001 fa3c 	bl	8002c80 <HAL_GPIO_TogglePin>
		xTaskNotify(MenuTaskHandle, 0, eNoAction);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <LEDTask+0x3c>)
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2300      	movs	r3, #0
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	f005 ffc5 	bl	80077a4 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800181a:	e7e7      	b.n	80017ec <LEDTask+0x8>
 800181c:	48000400 	.word	0x48000400
 8001820:	20001bcc 	.word	0x20001bcc

08001824 <ADCTask>:
	}
}



void ADCTask(void* param){
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af02      	add	r7, sp, #8
 800182a:	6078      	str	r0, [r7, #4]

	char msg1[50];

	while(1){

		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f005 ff2f 	bl	800769c <xTaskGenericNotifyWait>
		 HAL_ADC_Start(&hadc1);
 800183e:	482f      	ldr	r0, [pc, #188]	; (80018fc <ADCTask+0xd8>)
 8001840:	f000 fa54 	bl	8001cec <HAL_ADC_Start>
		rawValue = HAL_ADC_GetValue(&hadc1);
 8001844:	482d      	ldr	r0, [pc, #180]	; (80018fc <ADCTask+0xd8>)
 8001846:	f000 faf3 	bl	8001e30 <HAL_ADC_GetValue>
 800184a:	4603      	mov	r3, r0
 800184c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		temp = ((float)rawValue) / 4095 * 3300;
 8001850:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800185c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001900 <ADCTask+0xdc>
 8001860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001864:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001904 <ADCTask+0xe0>
 8001868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		temp = ((temp - 760.0) / 2.5) + 25;
 8001870:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001872:	f7fe fe69 	bl	8000548 <__aeabi_f2d>
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <ADCTask+0xe4>)
 800187c:	f7fe fd04 	bl	8000288 <__aeabi_dsub>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <ADCTask+0xe8>)
 800188e:	f7fe ffdd 	bl	800084c <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <ADCTask+0xec>)
 80018a0:	f7fe fcf4 	bl	800028c <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f99c 	bl	8000be8 <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40

		sprintf(msg1, "ADC Value: %f\n", temp);
 80018b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80018b6:	f7fe fe47 	bl	8000548 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	f107 000c 	add.w	r0, r7, #12
 80018c2:	4914      	ldr	r1, [pc, #80]	; (8001914 <ADCTask+0xf0>)
 80018c4:	f007 fd56 	bl	8009374 <siprintf>
		const char* msg = msg1;
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	60bb      	str	r3, [r7, #8]

		xQueueSend(PrintQueue, (uint32_t*)&msg, portMAX_DELAY);
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <ADCTask+0xf4>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	f107 0108 	add.w	r1, r7, #8
 80018d6:	2300      	movs	r3, #0
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	f004 fb2e 	bl	8005f3c <xQueueGenericSend>
		HAL_ADC_Stop(&hadc1);
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <ADCTask+0xd8>)
 80018e2:	f000 fa70 	bl	8001dc6 <HAL_ADC_Stop>
		xTaskNotify(MenuTaskHandle, 0, eNoAction);
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <ADCTask+0xf8>)
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2300      	movs	r3, #0
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	f005 ff56 	bl	80077a4 <xTaskGenericNotify>
	while(1){
 80018f8:	e798      	b.n	800182c <ADCTask+0x8>
 80018fa:	bf00      	nop
 80018fc:	20001b78 	.word	0x20001b78
 8001900:	457ff000 	.word	0x457ff000
 8001904:	454e4000 	.word	0x454e4000
 8001908:	4087c000 	.word	0x4087c000
 800190c:	40040000 	.word	0x40040000
 8001910:	40390000 	.word	0x40390000
 8001914:	0800d000 	.word	0x0800d000
 8001918:	20001b6c 	.word	0x20001b6c
 800191c:	20001bcc 	.word	0x20001bcc

08001920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff fe42 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopForever+0x6>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopForever+0xe>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopForever+0x16>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f006 fe57 	bl	8008600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001952:	f7ff f9cf 	bl	8000cf4 <main>

08001956 <LoopForever>:

LoopForever:
    b LoopForever
 8001956:	e7fe      	b.n	8001956 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001958:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001964:	0800d50c 	.word	0x0800d50c
  ldr r2, =_sbss
 8001968:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800196c:	20001cc4 	.word	0x20001cc4

08001970 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_IRQHandler>
	...

08001974 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x28>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x28>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 ff44 	bl	8002812 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	200f      	movs	r0, #15
 800198c:	f7ff fcfc 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fc50 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000010 	.word	0x20000010
 80019c4:	20001cb0 	.word	0x20001cb0

080019c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20001cb0 	.word	0x20001cb0

080019e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09a      	sub	sp, #104	; 0x68
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e169      	b.n	8001cd4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d176      	bne.n	8001b00 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d152      	bne.n	8001ac0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fc21 	bl	800127c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d13b      	bne.n	8001ac0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fd19 	bl	8002480 <ADC_Disable>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d12f      	bne.n	8001ac0 <HAL_ADC_Init+0xe0>
 8001a60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d12b      	bne.n	8001ac0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a70:	f023 0302 	bic.w	r3, r3, #2
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a8a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	; (8001cdc <HAL_ADC_Init+0x2fc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a8f      	ldr	r2, [pc, #572]	; (8001ce0 <HAL_ADC_Init+0x300>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9a      	lsrs	r2, r3, #18
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab2:	e002      	b.n	8001aba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f9      	bne.n	8001ab4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001adc:	d110      	bne.n	8001b00 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f023 0312 	bic.w	r3, r3, #18
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 80d6 	bne.w	8001cba <HAL_ADC_Init+0x2da>
 8001b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80d1 	bne.w	8001cba <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80c9 	bne.w	8001cba <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b30:	f043 0202 	orr.w	r2, r3, #2
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b38:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_ADC_Init+0x304>)
 8001b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <HAL_ADC_Init+0x180>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_Init+0x180>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_Init+0x182>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11c      	bne.n	8001ba0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d010      	beq.n	8001b8e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_ADC_Init+0x1a8>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_Init+0x1a8>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_ADC_Init+0x1aa>
 8001b88:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7e5b      	ldrb	r3, [r3, #25]
 8001ba4:	035b      	lsls	r3, r3, #13
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001baa:	2a01      	cmp	r2, #1
 8001bac:	d002      	beq.n	8001bb4 <HAL_ADC_Init+0x1d4>
 8001bae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADC_Init+0x1d6>
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d11b      	bne.n	8001c0c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7e5b      	ldrb	r3, [r3, #25]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	3b01      	subs	r3, #1
 8001be2:	045a      	lsls	r2, r3, #17
 8001be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	663b      	str	r3, [r7, #96]	; 0x60
 8001bee:	e00d      	b.n	8001c0c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d007      	beq.n	8001c24 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c20:	4313      	orrs	r3, r2
 8001c22:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d114      	bne.n	8001c5c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c40:	f023 0302 	bic.w	r3, r3, #2
 8001c44:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7e1b      	ldrb	r3, [r3, #24]
 8001c4a:	039a      	lsls	r2, r3, #14
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4313      	orrs	r3, r2
 8001c56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_ADC_Init+0x308>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d10c      	bne.n	8001c92 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f023 010f 	bic.w	r1, r3, #15
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c90:	e007      	b.n	8001ca2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 020f 	bic.w	r2, r2, #15
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f023 0303 	bic.w	r3, r3, #3
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb8:	e00a      	b.n	8001cd0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f023 0312 	bic.w	r3, r3, #18
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001cd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3768      	adds	r7, #104	; 0x68
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	50000300 	.word	0x50000300
 8001ce8:	fff0c007 	.word	0xfff0c007

08001cec <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d158      	bne.n	8001db8 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_Start+0x28>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e054      	b.n	8001dbe <HAL_ADC_Start+0xd2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fb4b 	bl	80023b8 <ADC_Enable>
 8001d22:	4603      	mov	r3, r0
 8001d24:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d140      	bne.n	8001dae <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d76:	d106      	bne.n	8001d86 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f023 0206 	bic.w	r2, r3, #6
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	221c      	movs	r2, #28
 8001d9a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0204 	orr.w	r2, r2, #4
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e006      	b.n	8001dbc <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001db6:	e001      	b.n	8001dbc <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
 8001dba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_Stop+0x1a>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e023      	b.n	8001e28 <HAL_ADC_Stop+0x62>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001de8:	216c      	movs	r1, #108	; 0x6c
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fbae 	bl	800254c <ADC_ConversionStop>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d111      	bne.n	8001e1e <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fb40 	bl	8002480 <ADC_Disable>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b09b      	sub	sp, #108	; 0x6c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x22>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e299      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x556>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 827d 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d81c      	bhi.n	8001ec8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	231f      	movs	r3, #31
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4019      	ands	r1, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec6:	e063      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d81e      	bhi.n	8001f0e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	3b1e      	subs	r3, #30
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	4019      	ands	r1, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	3b1e      	subs	r3, #30
 8001f00:	fa00 f203 	lsl.w	r2, r0, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0c:	e040      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b0e      	cmp	r3, #14
 8001f14:	d81e      	bhi.n	8001f54 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	3b3c      	subs	r3, #60	; 0x3c
 8001f2a:	221f      	movs	r2, #31
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4019      	ands	r1, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	3b3c      	subs	r3, #60	; 0x3c
 8001f46:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
 8001f52:	e01d      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	3b5a      	subs	r3, #90	; 0x5a
 8001f68:	221f      	movs	r2, #31
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	4019      	ands	r1, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	3b5a      	subs	r3, #90	; 0x5a
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 80e5 	bne.w	800216a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d91c      	bls.n	8001fe2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6999      	ldr	r1, [r3, #24]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b1e      	subs	r3, #30
 8001fba:	2207      	movs	r2, #7
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4019      	ands	r1, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6898      	ldr	r0, [r3, #8]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b1e      	subs	r3, #30
 8001fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	619a      	str	r2, [r3, #24]
 8001fe0:	e019      	b.n	8002016 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6959      	ldr	r1, [r3, #20]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4019      	ands	r1, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6898      	ldr	r0, [r3, #8]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	fa00 f203 	lsl.w	r2, r0, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	3b01      	subs	r3, #1
 8002034:	2b03      	cmp	r3, #3
 8002036:	d84f      	bhi.n	80020d8 <HAL_ADC_ConfigChannel+0x28c>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <HAL_ADC_ConfigChannel+0x1f4>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002051 	.word	0x08002051
 8002044:	08002073 	.word	0x08002073
 8002048:	08002095 	.word	0x08002095
 800204c:	080020b7 	.word	0x080020b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002056:	4b99      	ldr	r3, [pc, #612]	; (80022bc <HAL_ADC_ConfigChannel+0x470>)
 8002058:	4013      	ands	r3, r2
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	0691      	lsls	r1, r2, #26
 8002060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002062:	430a      	orrs	r2, r1
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800206e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002070:	e07e      	b.n	8002170 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002078:	4b90      	ldr	r3, [pc, #576]	; (80022bc <HAL_ADC_ConfigChannel+0x470>)
 800207a:	4013      	ands	r3, r2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	0691      	lsls	r1, r2, #26
 8002082:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002084:	430a      	orrs	r2, r1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002090:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002092:	e06d      	b.n	8002170 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_ADC_ConfigChannel+0x470>)
 800209c:	4013      	ands	r3, r2
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	0691      	lsls	r1, r2, #26
 80020a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020a6:	430a      	orrs	r2, r1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020b4:	e05c      	b.n	8002170 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020bc:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <HAL_ADC_ConfigChannel+0x470>)
 80020be:	4013      	ands	r3, r2
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	0691      	lsls	r1, r2, #26
 80020c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020c8:	430a      	orrs	r2, r1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020d6:	e04b      	b.n	8002170 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	069b      	lsls	r3, r3, #26
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	069b      	lsls	r3, r3, #26
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800211e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	069b      	lsls	r3, r3, #26
 8002130:	429a      	cmp	r2, r3
 8002132:	d107      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002142:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	069b      	lsls	r3, r3, #26
 8002154:	429a      	cmp	r2, r3
 8002156:	d10a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002166:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002168:	e001      	b.n	800216e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800216a:	bf00      	nop
 800216c:	e000      	b.n	8002170 <HAL_ADC_ConfigChannel+0x324>
      break;
 800216e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d108      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x344>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x344>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_ADC_ConfigChannel+0x346>
 8002190:	2300      	movs	r3, #0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80ff 	bne.w	8002396 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d00f      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	400a      	ands	r2, r1
 80021ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80021be:	e049      	b.n	8002254 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	409a      	lsls	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b09      	cmp	r3, #9
 80021e0:	d91c      	bls.n	800221c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6999      	ldr	r1, [r3, #24]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	3b1b      	subs	r3, #27
 80021f4:	2207      	movs	r2, #7
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	4019      	ands	r1, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6898      	ldr	r0, [r3, #8]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	3b1b      	subs	r3, #27
 800220e:	fa00 f203 	lsl.w	r2, r0, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	619a      	str	r2, [r3, #24]
 800221a:	e01b      	b.n	8002254 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6959      	ldr	r1, [r3, #20]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	2207      	movs	r2, #7
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	4019      	ands	r1, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6898      	ldr	r0, [r3, #8]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	fa00 f203 	lsl.w	r2, r0, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_ADC_ConfigChannel+0x474>)
 8002256:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b10      	cmp	r3, #16
 800225e:	d105      	bne.n	800226c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002268:	2b00      	cmp	r3, #0
 800226a:	d014      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002270:	2b11      	cmp	r3, #17
 8002272:	d105      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002284:	2b12      	cmp	r3, #18
 8002286:	f040 8086 	bne.w	8002396 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800228a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d17f      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10d      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x478>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d106      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x478>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e005      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x47a>
 80022ba:	bf00      	nop
 80022bc:	83fff000 	.word	0x83fff000
 80022c0:	50000300 	.word	0x50000300
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d150      	bne.n	800236c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d010      	beq.n	80022f2 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x4a0>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x4a0>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_ADC_ConfigChannel+0x4a2>
 80022ec:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d13c      	bne.n	800236c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d11d      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x4ea>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002302:	d118      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800230c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_ADC_ConfigChannel+0x564>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a27      	ldr	r2, [pc, #156]	; (80023b4 <HAL_ADC_ConfigChannel+0x568>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0c9a      	lsrs	r2, r3, #18
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002326:	e002      	b.n	800232e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	3b01      	subs	r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f9      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002334:	e02e      	b.n	8002394 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b11      	cmp	r3, #17
 800233c:	d10b      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x50a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002346:	d106      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002354:	e01e      	b.n	8002394 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b12      	cmp	r3, #18
 800235c:	d11a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800235e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002368:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800236a:	e013      	b.n	8002394 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800237e:	e00a      	b.n	8002396 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002392:	e000      	b.n	8002396 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002394:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800239e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	376c      	adds	r7, #108	; 0x6c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000000 	.word	0x20000000
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <ADC_Enable+0x2c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <ADC_Enable+0x2c>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <ADC_Enable+0x2e>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d143      	bne.n	8002472 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <ADC_Enable+0xc4>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0210 	orr.w	r2, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e02f      	b.n	8002474 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002424:	f7ff fad0 	bl	80019c8 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800242a:	e01b      	b.n	8002464 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800242c:	f7ff facc 	bl	80019c8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d914      	bls.n	8002464 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d00d      	beq.n	8002464 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f043 0210 	orr.w	r2, r3, #16
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e007      	b.n	8002474 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d1dc      	bne.n	800242c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	8000003f 	.word	0x8000003f

08002480 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <ADC_Disable+0x2c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <ADC_Disable+0x2c>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <ADC_Disable+0x2e>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d047      	beq.n	8002542 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 030d 	and.w	r3, r3, #13
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10f      	bne.n	80024e0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0202 	orr.w	r2, r2, #2
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2203      	movs	r2, #3
 80024d6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80024d8:	f7ff fa76 	bl	80019c8 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024de:	e029      	b.n	8002534 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0210 	orr.w	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e023      	b.n	8002544 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024fc:	f7ff fa64 	bl	80019c8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d914      	bls.n	8002534 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10d      	bne.n	8002534 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0210 	orr.w	r2, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e007      	b.n	8002544 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d0dc      	beq.n	80024fc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 809b 	beq.w	80026a8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002580:	d12a      	bne.n	80025d8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002586:	2b01      	cmp	r3, #1
 8002588:	d126      	bne.n	80025d8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800258e:	2b01      	cmp	r3, #1
 8002590:	d122      	bne.n	80025d8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002592:	230c      	movs	r3, #12
 8002594:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002596:	e014      	b.n	80025c2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <ADC_ConversionStop+0x168>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d90d      	bls.n	80025bc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f043 0210 	orr.w	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	f043 0201 	orr.w	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e076      	b.n	80026aa <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	3301      	adds	r3, #1
 80025c0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d1e3      	bne.n	8002598 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b60      	cmp	r3, #96	; 0x60
 80025dc:	d015      	beq.n	800260a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d10e      	bne.n	800260a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d107      	bne.n	800260a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0210 	orr.w	r2, r2, #16
 8002608:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d015      	beq.n	800263c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b08      	cmp	r3, #8
 800261c:	d10e      	bne.n	800263c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b60      	cmp	r3, #96	; 0x60
 8002640:	d005      	beq.n	800264e <ADC_ConversionStop+0x102>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b6c      	cmp	r3, #108	; 0x6c
 8002646:	d105      	bne.n	8002654 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002648:	230c      	movs	r3, #12
 800264a:	617b      	str	r3, [r7, #20]
        break;
 800264c:	e005      	b.n	800265a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800264e:	2308      	movs	r3, #8
 8002650:	617b      	str	r3, [r7, #20]
        break;
 8002652:	e002      	b.n	800265a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002654:	2304      	movs	r3, #4
 8002656:	617b      	str	r3, [r7, #20]
        break;
 8002658:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800265a:	f7ff f9b5 	bl	80019c8 <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002660:	e01b      	b.n	800269a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002662:	f7ff f9b1 	bl	80019c8 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b0b      	cmp	r3, #11
 800266e:	d914      	bls.n	800269a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f043 0210 	orr.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e007      	b.n	80026aa <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1dc      	bne.n	8002662 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	000993ff 	.word	0x000993ff

080026b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60d3      	str	r3, [r2, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <__NVIC_EnableIRQ+0x38>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	; (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	; (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ff4c 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800283a:	f7ff ff61 	bl	8002700 <__NVIC_GetPriorityGrouping>
 800283e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	6978      	ldr	r0, [r7, #20]
 8002846:	f7ff ffb1 	bl	80027ac <NVIC_EncodePriority>
 800284a:	4602      	mov	r2, r0
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff80 	bl	8002758 <__NVIC_SetPriority>
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff54 	bl	800271c <__NVIC_EnableIRQ>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800288a:	2b02      	cmp	r3, #2
 800288c:	d008      	beq.n	80028a0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2204      	movs	r2, #4
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e020      	b.n	80028e2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020e 	bic.w	r2, r2, #14
 80028ae:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002900:	2b02      	cmp	r3, #2
 8002902:	d005      	beq.n	8002910 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2204      	movs	r2, #4
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e027      	b.n	8002960 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 020e 	bic.w	r2, r2, #14
 800291e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f202 	lsl.w	r2, r1, r2
 800293e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
    } 
  }
  return status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	e14e      	b.n	8002c1a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8140 	beq.w	8002c14 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d005      	beq.n	80029ac <HAL_GPIO_Init+0x40>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d130      	bne.n	8002a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e2:	2201      	movs	r2, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 0201 	and.w	r2, r3, #1
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d017      	beq.n	8002a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d123      	bne.n	8002a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	6939      	ldr	r1, [r7, #16]
 8002a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0203 	and.w	r2, r3, #3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 809a 	beq.w	8002c14 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae0:	4b55      	ldr	r3, [pc, #340]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a54      	ldr	r2, [pc, #336]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b52      	ldr	r3, [pc, #328]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002af8:	4a50      	ldr	r2, [pc, #320]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b22:	d013      	beq.n	8002b4c <HAL_GPIO_Init+0x1e0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a46      	ldr	r2, [pc, #280]	; (8002c40 <HAL_GPIO_Init+0x2d4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00d      	beq.n	8002b48 <HAL_GPIO_Init+0x1dc>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a45      	ldr	r2, [pc, #276]	; (8002c44 <HAL_GPIO_Init+0x2d8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <HAL_GPIO_Init+0x1d8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a44      	ldr	r2, [pc, #272]	; (8002c48 <HAL_GPIO_Init+0x2dc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_GPIO_Init+0x1d4>
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e006      	b.n	8002b4e <HAL_GPIO_Init+0x1e2>
 8002b40:	2305      	movs	r3, #5
 8002b42:	e004      	b.n	8002b4e <HAL_GPIO_Init+0x1e2>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e002      	b.n	8002b4e <HAL_GPIO_Init+0x1e2>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_GPIO_Init+0x1e2>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	f002 0203 	and.w	r2, r2, #3
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	4093      	lsls	r3, r2
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b5e:	4937      	ldr	r1, [pc, #220]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b90:	4a2e      	ldr	r2, [pc, #184]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b96:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bba:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bc0:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002be4:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f aea9 	bne.w	800297c <HAL_GPIO_Init+0x10>
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	48000400 	.word	0x48000400
 8002c44:	48000800 	.word	0x48000800
 8002c48:	48000c00 	.word	0x48000c00
 8002c4c:	40010400 	.word	0x40010400

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43d9      	mvns	r1, r3
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	400b      	ands	r3, r1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	619a      	str	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f000 bef4 	b.w	8003ab6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 816a 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cde:	4bb3      	ldr	r3, [pc, #716]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d00c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cea:	4bb0      	ldr	r3, [pc, #704]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d159      	bne.n	8002daa <HAL_RCC_OscConfig+0xf6>
 8002cf6:	4bad      	ldr	r3, [pc, #692]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d02:	d152      	bne.n	8002daa <HAL_RCC_OscConfig+0xf6>
 8002d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_OscConfig+0x82>
 8002d30:	4b9e      	ldr	r3, [pc, #632]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	e015      	b.n	8002d62 <HAL_RCC_OscConfig+0xae>
 8002d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d4e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d52:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d5e:	4b93      	ldr	r3, [pc, #588]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d6e:	fa92 f2a2 	rbit	r2, r2
 8002d72:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d76:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d7a:	fab2 f282 	clz	r2, r2
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f002 021f 	and.w	r2, r2, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 810c 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x2fc>
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8106 	bne.w	8002fb0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f000 be86 	b.w	8003ab6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d106      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x110>
 8002db6:	4b7d      	ldr	r3, [pc, #500]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7c      	ldr	r2, [pc, #496]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e030      	b.n	8002e26 <HAL_RCC_OscConfig+0x172>
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x134>
 8002dce:	4b77      	ldr	r3, [pc, #476]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a76      	ldr	r2, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b74      	ldr	r3, [pc, #464]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a73      	ldr	r2, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01e      	b.n	8002e26 <HAL_RCC_OscConfig+0x172>
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x15a>
 8002df4:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6c      	ldr	r2, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002dfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a69      	ldr	r2, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	e00b      	b.n	8002e26 <HAL_RCC_OscConfig+0x172>
 8002e0e:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a66      	ldr	r2, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b64      	ldr	r3, [pc, #400]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a63      	ldr	r2, [pc, #396]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e24:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e26:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	495d      	ldr	r1, [pc, #372]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d059      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fdc0 	bl	80019c8 <HAL_GetTick>
 8002e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fdbb 	bl	80019c8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d902      	bls.n	8002e64 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	f000 be29 	b.w	8003ab6 <HAL_RCC_OscConfig+0xe02>
 8002e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e78:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d102      	bne.n	8002e96 <HAL_RCC_OscConfig+0x1e2>
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0x20e>
 8002e96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e9a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002eb2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ec6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002eca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ece:	fa92 f2a2 	rbit	r2, r2
 8002ed2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ed6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0ab      	beq.n	8002e4e <HAL_RCC_OscConfig+0x19a>
 8002ef6:	e05c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fd66 	bl	80019c8 <HAL_GetTick>
 8002efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f02:	f7fe fd61 	bl	80019c8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d902      	bls.n	8002f18 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	f000 bdcf 	b.w	8003ab6 <HAL_RCC_OscConfig+0xe02>
 8002f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d102      	bne.n	8002f4a <HAL_RCC_OscConfig+0x296>
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x2c2>
 8002f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f4e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f62:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_RCC_OscConfig+0x2f8>)
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f7a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f7e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f82:	fa92 f2a2 	rbit	r2, r2
 8002f86:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f8a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f8e:	fab2 f282 	clz	r2, r2
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	f042 0220 	orr.w	r2, r2, #32
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f002 021f 	and.w	r2, r2, #31
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ab      	bne.n	8002f02 <HAL_RCC_OscConfig+0x24e>
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2fe>
 8002fac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 816f 	beq.w	80032a0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fc2:	4bd0      	ldr	r3, [pc, #832]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fce:	4bcd      	ldr	r3, [pc, #820]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d16c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x400>
 8002fda:	4bca      	ldr	r3, [pc, #808]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d166      	bne.n	80030b4 <HAL_RCC_OscConfig+0x400>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ff8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d102      	bne.n	8003016 <HAL_RCC_OscConfig+0x362>
 8003010:	4bbc      	ldr	r3, [pc, #752]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e013      	b.n	800303e <HAL_RCC_OscConfig+0x38a>
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003028:	2302      	movs	r3, #2
 800302a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800302e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800303a:	4bb2      	ldr	r3, [pc, #712]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2202      	movs	r2, #2
 8003040:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003044:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003048:	fa92 f2a2 	rbit	r2, r2
 800304c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003050:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f042 0220 	orr.w	r2, r2, #32
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f002 021f 	and.w	r2, r2, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_RCC_OscConfig+0x3cc>
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d002      	beq.n	8003080 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f000 bd1b 	b.w	8003ab6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4ba0      	ldr	r3, [pc, #640]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003088:	1d3b      	adds	r3, r7, #4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	21f8      	movs	r1, #248	; 0xf8
 8003090:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003098:	fa91 f1a1 	rbit	r1, r1
 800309c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030a0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030a4:	fab1 f181 	clz	r1, r1
 80030a8:	b2c9      	uxtb	r1, r1
 80030aa:	408b      	lsls	r3, r1
 80030ac:	4995      	ldr	r1, [pc, #596]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	e0f5      	b.n	80032a0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8085 	beq.w	80031ca <HAL_RCC_OscConfig+0x516>
 80030c0:	2301      	movs	r3, #1
 80030c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80030d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	461a      	mov	r2, r3
 80030e8:	2301      	movs	r3, #1
 80030ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fc6c 	bl	80019c8 <HAL_GetTick>
 80030f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f6:	f7fe fc67 	bl	80019c8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d902      	bls.n	800310c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	f000 bcd5 	b.w	8003ab6 <HAL_RCC_OscConfig+0xe02>
 800310c:	2302      	movs	r3, #2
 800310e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800311e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <HAL_RCC_OscConfig+0x488>
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	e013      	b.n	8003164 <HAL_RCC_OscConfig+0x4b0>
 800313c:	2302      	movs	r3, #2
 800313e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003154:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003160:	4b68      	ldr	r3, [pc, #416]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2202      	movs	r2, #2
 8003166:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800316a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800316e:	fa92 f2a2 	rbit	r2, r2
 8003172:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003176:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f042 0220 	orr.w	r2, r2, #32
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f002 021f 	and.w	r2, r2, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0af      	beq.n	80030f6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003196:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	21f8      	movs	r1, #248	; 0xf8
 80031a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031ae:	fa91 f1a1 	rbit	r1, r1
 80031b2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80031b6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80031ba:	fab1 f181 	clz	r1, r1
 80031be:	b2c9      	uxtb	r1, r1
 80031c0:	408b      	lsls	r3, r1
 80031c2:	4950      	ldr	r1, [pc, #320]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e06a      	b.n	80032a0 <HAL_RCC_OscConfig+0x5ec>
 80031ca:	2301      	movs	r3, #1
 80031cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80031dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	461a      	mov	r2, r3
 80031f2:	2300      	movs	r3, #0
 80031f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fe fbe7 	bl	80019c8 <HAL_GetTick>
 80031fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003200:	f7fe fbe2 	bl	80019c8 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d902      	bls.n	8003216 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	f000 bc50 	b.w	8003ab6 <HAL_RCC_OscConfig+0xe02>
 8003216:	2302      	movs	r3, #2
 8003218:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d102      	bne.n	8003246 <HAL_RCC_OscConfig+0x592>
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	e013      	b.n	800326e <HAL_RCC_OscConfig+0x5ba>
 8003246:	2302      	movs	r3, #2
 8003248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003258:	2302      	movs	r3, #2
 800325a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800325e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x650>)
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2202      	movs	r2, #2
 8003270:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003274:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003280:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003284:	fab2 f282 	clz	r2, r2
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	f042 0220 	orr.w	r2, r2, #32
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	f002 021f 	and.w	r2, r2, #31
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f202 	lsl.w	r2, r1, r2
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1af      	bne.n	8003200 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80da 	beq.w	8003464 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d069      	beq.n	800338e <HAL_RCC_OscConfig+0x6da>
 80032ba:	2301      	movs	r3, #1
 80032bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d0:	fab3 f383 	clz	r3, r3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_OscConfig+0x654>)
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	461a      	mov	r2, r3
 80032e0:	2301      	movs	r3, #1
 80032e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e4:	f7fe fb70 	bl	80019c8 <HAL_GetTick>
 80032e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ec:	e00e      	b.n	800330c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ee:	f7fe fb6b 	bl	80019c8 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d906      	bls.n	800330c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e3d9      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	10908120 	.word	0x10908120
 800330c:	2302      	movs	r3, #2
 800330e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800331e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003322:	2202      	movs	r2, #2
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f2a3 	rbit	r2, r3
 8003330:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800333a:	2202      	movs	r2, #2
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fa93 f2a3 	rbit	r2, r3
 8003348:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800334c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	4ba5      	ldr	r3, [pc, #660]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003352:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003356:	2102      	movs	r1, #2
 8003358:	6019      	str	r1, [r3, #0]
 800335a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fa93 f1a3 	rbit	r1, r3
 8003364:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003368:	6019      	str	r1, [r3, #0]
  return result;
 800336a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0b0      	beq.n	80032ee <HAL_RCC_OscConfig+0x63a>
 800338c:	e06a      	b.n	8003464 <HAL_RCC_OscConfig+0x7b0>
 800338e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	fa93 f2a3 	rbit	r2, r3
 80033a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033a4:	601a      	str	r2, [r3, #0]
  return result;
 80033a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_OscConfig+0x934>)
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	461a      	mov	r2, r3
 80033bc:	2300      	movs	r3, #0
 80033be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fe fb02 	bl	80019c8 <HAL_GetTick>
 80033c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	e009      	b.n	80033de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe fafd 	bl	80019c8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e36b      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
 80033de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033e2:	2202      	movs	r2, #2
 80033e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f2a3 	rbit	r2, r3
 80033f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003412:	2202      	movs	r2, #2
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	fa93 f2a3 	rbit	r2, r3
 8003420:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003424:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003426:	4b6f      	ldr	r3, [pc, #444]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800342a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800342e:	2102      	movs	r1, #2
 8003430:	6019      	str	r1, [r3, #0]
 8003432:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	fa93 f1a3 	rbit	r1, r3
 800343c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003440:	6019      	str	r1, [r3, #0]
  return result;
 8003442:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1b2      	bne.n	80033ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8158 	beq.w	8003724 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003474:	2300      	movs	r3, #0
 8003476:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347a:	4b5a      	ldr	r3, [pc, #360]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d112      	bne.n	80034ac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4a56      	ldr	r2, [pc, #344]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	61d3      	str	r3, [r2, #28]
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <HAL_RCC_OscConfig+0x938>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11a      	bne.n	80034ee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b8:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <HAL_RCC_OscConfig+0x938>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a4b      	ldr	r2, [pc, #300]	; (80035ec <HAL_RCC_OscConfig+0x938>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c4:	f7fe fa80 	bl	80019c8 <HAL_GetTick>
 80034c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	e009      	b.n	80034e2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ce:	f7fe fa7b 	bl	80019c8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e2e9      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b42      	ldr	r3, [pc, #264]	; (80035ec <HAL_RCC_OscConfig+0x938>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0ef      	beq.n	80034ce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x852>
 80034f8:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a39      	ldr	r2, [pc, #228]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6213      	str	r3, [r2, #32]
 8003504:	e02f      	b.n	8003566 <HAL_RCC_OscConfig+0x8b2>
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10c      	bne.n	800352a <HAL_RCC_OscConfig+0x876>
 8003510:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	4a33      	ldr	r2, [pc, #204]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6213      	str	r3, [r2, #32]
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6213      	str	r3, [r2, #32]
 8003528:	e01d      	b.n	8003566 <HAL_RCC_OscConfig+0x8b2>
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d10c      	bne.n	800354e <HAL_RCC_OscConfig+0x89a>
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6213      	str	r3, [r2, #32]
 800354c:	e00b      	b.n	8003566 <HAL_RCC_OscConfig+0x8b2>
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d06b      	beq.n	8003648 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7fe fa2a 	bl	80019c8 <HAL_GetTick>
 8003574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	e00b      	b.n	8003592 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe fa25 	bl	80019c8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e291      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
 8003592:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003596:	2202      	movs	r2, #2
 8003598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	fa93 f2a3 	rbit	r2, r3
 80035a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035ae:	2202      	movs	r2, #2
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	fa93 f2a3 	rbit	r2, r3
 80035bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035c0:	601a      	str	r2, [r3, #0]
  return result;
 80035c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d109      	bne.n	80035f0 <HAL_RCC_OscConfig+0x93c>
 80035dc:	4b01      	ldr	r3, [pc, #4]	; (80035e4 <HAL_RCC_OscConfig+0x930>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	e014      	b.n	800360c <HAL_RCC_OscConfig+0x958>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	10908120 	.word	0x10908120
 80035ec:	40007000 	.word	0x40007000
 80035f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035f4:	2202      	movs	r2, #2
 80035f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	fa93 f2a3 	rbit	r2, r3
 8003602:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	4bbb      	ldr	r3, [pc, #748]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003610:	2102      	movs	r1, #2
 8003612:	6011      	str	r1, [r2, #0]
 8003614:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	fa92 f1a2 	rbit	r1, r2
 800361e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003622:	6011      	str	r1, [r2, #0]
  return result;
 8003624:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	fab2 f282 	clz	r2, r2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f002 021f 	and.w	r2, r2, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f202 	lsl.w	r2, r1, r2
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d099      	beq.n	800357a <HAL_RCC_OscConfig+0x8c6>
 8003646:	e063      	b.n	8003710 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003648:	f7fe f9be 	bl	80019c8 <HAL_GetTick>
 800364c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe f9b9 	bl	80019c8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e225      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
 800366a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800366e:	2202      	movs	r2, #2
 8003670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003686:	2202      	movs	r2, #2
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003698:	601a      	str	r2, [r3, #0]
  return result;
 800369a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800369e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_OscConfig+0xa06>
 80036b4:	4b90      	ldr	r3, [pc, #576]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	e00d      	b.n	80036d6 <HAL_RCC_OscConfig+0xa22>
 80036ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036be:	2202      	movs	r2, #2
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036da:	2102      	movs	r1, #2
 80036dc:	6011      	str	r1, [r2, #0]
 80036de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	fa92 f1a2 	rbit	r1, r2
 80036e8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036ec:	6011      	str	r1, [r2, #0]
  return result;
 80036ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f002 021f 	and.w	r2, r2, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1a0      	bne.n	8003652 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003710:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003718:	4b77      	ldr	r3, [pc, #476]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a76      	ldr	r2, [pc, #472]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003722:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 81c2 	beq.w	8003ab4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003730:	4b71      	ldr	r3, [pc, #452]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	f000 819c 	beq.w	8003a76 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 8114 	bne.w	8003972 <HAL_RCC_OscConfig+0xcbe>
 800374a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800374e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	fa93 f2a3 	rbit	r2, r3
 800375e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003762:	601a      	str	r2, [r3, #0]
  return result;
 8003764:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003768:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003774:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	461a      	mov	r2, r3
 800377c:	2300      	movs	r3, #0
 800377e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe f922 	bl	80019c8 <HAL_GetTick>
 8003784:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003788:	e009      	b.n	800379e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378a:	f7fe f91d 	bl	80019c8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e18b      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
 800379e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	fa93 f2a3 	rbit	r2, r3
 80037b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037b6:	601a      	str	r2, [r3, #0]
  return result;
 80037b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d102      	bne.n	80037d8 <HAL_RCC_OscConfig+0xb24>
 80037d2:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	e01b      	b.n	8003810 <HAL_RCC_OscConfig+0xb5c>
 80037d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003814:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003818:	6011      	str	r1, [r2, #0]
 800381a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	fa92 f1a2 	rbit	r1, r2
 8003824:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003828:	6011      	str	r1, [r2, #0]
  return result;
 800382a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	fab2 f282 	clz	r2, r2
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f042 0220 	orr.w	r2, r2, #32
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	f002 021f 	and.w	r2, r2, #31
 8003840:	2101      	movs	r1, #1
 8003842:	fa01 f202 	lsl.w	r2, r1, r2
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d19e      	bne.n	800378a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	430b      	orrs	r3, r1
 8003862:	4925      	ldr	r1, [pc, #148]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
 8003868:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800386c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	fa93 f2a3 	rbit	r2, r3
 800387c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003880:	601a      	str	r2, [r3, #0]
  return result;
 8003882:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003886:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003892:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	461a      	mov	r2, r3
 800389a:	2301      	movs	r3, #1
 800389c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fe f893 	bl	80019c8 <HAL_GetTick>
 80038a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a6:	e009      	b.n	80038bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe f88e 	bl	80019c8 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0fc      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
 80038bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	fa93 f2a3 	rbit	r2, r3
 80038d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038d4:	601a      	str	r2, [r3, #0]
  return result;
 80038d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCC_OscConfig+0xc48>
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <HAL_RCC_OscConfig+0xc44>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	e01e      	b.n	8003934 <HAL_RCC_OscConfig+0xc80>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003900:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	fa93 f2a3 	rbit	r2, r3
 8003910:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800391a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f2a3 	rbit	r2, r3
 800392a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <HAL_RCC_OscConfig+0xe0c>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003938:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	fa92 f1a2 	rbit	r1, r2
 8003948:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800394c:	6011      	str	r1, [r2, #0]
  return result;
 800394e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	fab2 f282 	clz	r2, r2
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f042 0220 	orr.w	r2, r2, #32
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	f002 021f 	and.w	r2, r2, #31
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f202 	lsl.w	r2, r1, r2
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d09b      	beq.n	80038a8 <HAL_RCC_OscConfig+0xbf4>
 8003970:	e0a0      	b.n	8003ab4 <HAL_RCC_OscConfig+0xe00>
 8003972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003976:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800397a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	fa93 f2a3 	rbit	r2, r3
 8003986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800398a:	601a      	str	r2, [r3, #0]
  return result;
 800398c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003990:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800399c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe f80e 	bl	80019c8 <HAL_GetTick>
 80039ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b0:	e009      	b.n	80039c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b2:	f7fe f809 	bl	80019c8 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e077      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
 80039c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039de:	601a      	str	r2, [r3, #0]
  return result;
 80039e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d102      	bne.n	8003a00 <HAL_RCC_OscConfig+0xd4c>
 80039fa:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_RCC_OscConfig+0xe0c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	e01b      	b.n	8003a38 <HAL_RCC_OscConfig+0xd84>
 8003a00:	f107 0320 	add.w	r3, r7, #32
 8003a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f107 0320 	add.w	r3, r7, #32
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f2a3 	rbit	r2, r3
 8003a14:	f107 031c 	add.w	r3, r7, #28
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f107 0318 	add.w	r3, r7, #24
 8003a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f107 0318 	add.w	r3, r7, #24
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f107 0314 	add.w	r3, r7, #20
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RCC_OscConfig+0xe0c>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f107 0210 	add.w	r2, r7, #16
 8003a3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a40:	6011      	str	r1, [r2, #0]
 8003a42:	f107 0210 	add.w	r2, r7, #16
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	fa92 f1a2 	rbit	r1, r2
 8003a4c:	f107 020c 	add.w	r2, r7, #12
 8003a50:	6011      	str	r1, [r2, #0]
  return result;
 8003a52:	f107 020c 	add.w	r2, r7, #12
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	fab2 f282 	clz	r2, r2
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f042 0220 	orr.w	r2, r2, #32
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f002 021f 	and.w	r2, r2, #31
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d19e      	bne.n	80039b2 <HAL_RCC_OscConfig+0xcfe>
 8003a74:	e01e      	b.n	8003ab4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e018      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <HAL_RCC_OscConfig+0xe0c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d108      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b09e      	sub	sp, #120	; 0x78
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e162      	b.n	8003da2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b90      	ldr	r3, [pc, #576]	; (8003d20 <HAL_RCC_ClockConfig+0x25c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d910      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b8d      	ldr	r3, [pc, #564]	; (8003d20 <HAL_RCC_ClockConfig+0x25c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 0207 	bic.w	r2, r3, #7
 8003af2:	498b      	ldr	r1, [pc, #556]	; (8003d20 <HAL_RCC_ClockConfig+0x25c>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b89      	ldr	r3, [pc, #548]	; (8003d20 <HAL_RCC_ClockConfig+0x25c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e14a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b18:	4b82      	ldr	r3, [pc, #520]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	497f      	ldr	r1, [pc, #508]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80dc 	beq.w	8003cf0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d13c      	bne.n	8003bba <HAL_RCC_ClockConfig+0xf6>
 8003b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d102      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xa6>
 8003b64:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	e00f      	b.n	8003b8a <HAL_RCC_ClockConfig+0xc6>
 8003b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	667b      	str	r3, [r7, #100]	; 0x64
 8003b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b86:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b92:	fa92 f2a2 	rbit	r2, r2
 8003b96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b9a:	fab2 f282 	clz	r2, r2
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	f042 0220 	orr.w	r2, r2, #32
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	f002 021f 	and.w	r2, r2, #31
 8003baa:	2101      	movs	r1, #1
 8003bac:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d17b      	bne.n	8003cae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0f3      	b.n	8003da2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d13c      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x178>
 8003bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d102      	bne.n	8003bec <HAL_RCC_ClockConfig+0x128>
 8003be6:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	e00f      	b.n	8003c0c <HAL_RCC_ClockConfig+0x148>
 8003bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8003c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c08:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c10:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c14:	fa92 f2a2 	rbit	r2, r2
 8003c18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c1c:	fab2 f282 	clz	r2, r2
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	f042 0220 	orr.w	r2, r2, #32
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f002 021f 	and.w	r2, r2, #31
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d13a      	bne.n	8003cae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0b2      	b.n	8003da2 <HAL_RCC_ClockConfig+0x2de>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x1a0>
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	e00d      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1bc>
 8003c64:	2302      	movs	r3, #2
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c70:	2302      	movs	r3, #2
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	2202      	movs	r2, #2
 8003c82:	61ba      	str	r2, [r7, #24]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	fa92 f2a2 	rbit	r2, r2
 8003c8a:	617a      	str	r2, [r7, #20]
  return result;
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	fab2 f282 	clz	r2, r2
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	f042 0220 	orr.w	r2, r2, #32
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	f002 021f 	and.w	r2, r2, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e079      	b.n	8003da2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	491a      	ldr	r1, [pc, #104]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7fd fe82 	bl	80019c8 <HAL_GetTick>
 8003cc4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7fd fe7e 	bl	80019c8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e061      	b.n	8003da2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_RCC_ClockConfig+0x260>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 020c 	and.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1eb      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_ClockConfig+0x25c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d214      	bcs.n	8003d28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_RCC_ClockConfig+0x25c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 0207 	bic.w	r2, r3, #7
 8003d06:	4906      	ldr	r1, [pc, #24]	; (8003d20 <HAL_RCC_ClockConfig+0x25c>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <HAL_RCC_ClockConfig+0x25c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e040      	b.n	8003da2 <HAL_RCC_ClockConfig+0x2de>
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCC_ClockConfig+0x2e8>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	491a      	ldr	r1, [pc, #104]	; (8003dac <HAL_RCC_ClockConfig+0x2e8>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <HAL_RCC_ClockConfig+0x2e8>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4912      	ldr	r1, [pc, #72]	; (8003dac <HAL_RCC_ClockConfig+0x2e8>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d66:	f000 f829 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d6a:	4601      	mov	r1, r0
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <HAL_RCC_ClockConfig+0x2e8>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d74:	22f0      	movs	r2, #240	; 0xf0
 8003d76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	fa92 f2a2 	rbit	r2, r2
 8003d7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	fab2 f282 	clz	r2, r2
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	40d3      	lsrs	r3, r2
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x2ec>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d92:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <HAL_RCC_ClockConfig+0x2f0>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <HAL_RCC_ClockConfig+0x2f4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd faf4 	bl	8001388 <HAL_InitTick>
  
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3778      	adds	r7, #120	; 0x78
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	0800d018 	.word	0x0800d018
 8003db4:	20000000 	.word	0x20000000
 8003db8:	2000000c 	.word	0x2000000c

08003dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b08b      	sub	sp, #44	; 0x2c
 8003dc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d002      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x30>
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x36>
 8003dea:	e03c      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dee:	623b      	str	r3, [r7, #32]
      break;
 8003df0:	e03c      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003df8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003dfc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	fa92 f2a2 	rbit	r2, r2
 8003e04:	607a      	str	r2, [r7, #4]
  return result;
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	fab2 f282 	clz	r2, r2
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	40d3      	lsrs	r3, r2
 8003e10:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e12:	5cd3      	ldrb	r3, [r2, r3]
 8003e14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e16:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	220f      	movs	r2, #15
 8003e20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	fa92 f2a2 	rbit	r2, r2
 8003e28:	60fa      	str	r2, [r7, #12]
  return result;
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	fab2 f282 	clz	r2, r2
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	40d3      	lsrs	r3, r2
 8003e34:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e44:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	e004      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	623b      	str	r3, [r7, #32]
      break;
 8003e64:	e002      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e68:	623b      	str	r3, [r7, #32]
      break;
 8003e6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	372c      	adds	r7, #44	; 0x2c
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	007a1200 	.word	0x007a1200
 8003e84:	0800d030 	.word	0x0800d030
 8003e88:	0800d040 	.word	0x0800d040
 8003e8c:	003d0900 	.word	0x003d0900

08003e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000000 	.word	0x20000000

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003eae:	f7ff ffef 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ebc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ec0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	fa92 f2a2 	rbit	r2, r2
 8003ec8:	603a      	str	r2, [r7, #0]
  return result;
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	fab2 f282 	clz	r2, r2
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	40d3      	lsrs	r3, r2
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	0800d028 	.word	0x0800d028

08003eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ef2:	f7ff ffcd 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	fa92 f2a2 	rbit	r2, r2
 8003f0c:	603a      	str	r2, [r7, #0]
  return result;
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	fab2 f282 	clz	r2, r2
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	40d3      	lsrs	r3, r2
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	0800d028 	.word	0x0800d028

08003f30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0203 	and.w	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	08db      	lsrs	r3, r3, #3
 8003f6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <HAL_RCC_GetClockConfig+0x60>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0207 	and.w	r2, r3, #7
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40022000 	.word	0x40022000

08003f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b092      	sub	sp, #72	; 0x48
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80d4 	beq.w	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb8:	4b4e      	ldr	r3, [pc, #312]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	61d3      	str	r3, [r2, #28]
 8003fd0:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe2:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d118      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fee:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a41      	ldr	r2, [pc, #260]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fce5 	bl	80019c8 <HAL_GetTick>
 8003ffe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	e008      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004002:	f7fd fce1 	bl	80019c8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b64      	cmp	r3, #100	; 0x64
 800400e:	d901      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e14b      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004020:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8084 	beq.w	800413a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800403c:	429a      	cmp	r2, r3
 800403e:	d07c      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004040:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800404e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	461a      	mov	r2, r3
 800406a:	2301      	movs	r3, #1
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	461a      	mov	r2, r3
 800408e:	2300      	movs	r3, #0
 8004090:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004092:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004096:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04b      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fd fc91 	bl	80019c8 <HAL_GetTick>
 80040a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fd fc8d 	bl	80019c8 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0f5      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x318>
 80040c0:	2302      	movs	r3, #2
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	2302      	movs	r3, #2
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	61fb      	str	r3, [r7, #28]
  return result;
 80040d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f043 0302 	orr.w	r3, r3, #2
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d108      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040ee:	4b01      	ldr	r3, [pc, #4]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	e00d      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
 80040fc:	10908100 	.word	0x10908100
 8004100:	2302      	movs	r3, #2
 8004102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	fa93 f3a3 	rbit	r3, r3
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	4b69      	ldr	r3, [pc, #420]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2202      	movs	r2, #2
 8004112:	613a      	str	r2, [r7, #16]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	fa92 f2a2 	rbit	r2, r2
 800411a:	60fa      	str	r2, [r7, #12]
  return result;
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	fab2 f282 	clz	r2, r2
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f002 021f 	and.w	r2, r2, #31
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f202 	lsl.w	r2, r1, r2
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0b7      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800413a:	4b5e      	ldr	r3, [pc, #376]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	495b      	ldr	r1, [pc, #364]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004148:	4313      	orrs	r3, r2
 800414a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800414c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004150:	2b01      	cmp	r3, #1
 8004152:	d105      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004154:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	4a56      	ldr	r2, [pc, #344]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800415a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800416c:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f023 0203 	bic.w	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	494e      	ldr	r1, [pc, #312]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800417a:	4313      	orrs	r3, r2
 800417c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f023 0210 	bic.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	4947      	ldr	r1, [pc, #284]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004198:	4313      	orrs	r3, r2
 800419a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041a8:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	493f      	ldr	r1, [pc, #252]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c6:	4b3b      	ldr	r3, [pc, #236]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	f023 0220 	bic.w	r2, r3, #32
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	4938      	ldr	r1, [pc, #224]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	4930      	ldr	r1, [pc, #192]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004202:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4929      	ldr	r1, [pc, #164]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004220:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4921      	ldr	r1, [pc, #132]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800422e:	4313      	orrs	r3, r2
 8004230:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	491a      	ldr	r1, [pc, #104]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800424c:	4313      	orrs	r3, r2
 800424e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	4912      	ldr	r1, [pc, #72]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800426a:	4313      	orrs	r3, r2
 800426c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	490b      	ldr	r1, [pc, #44]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004288:	4313      	orrs	r3, r2
 800428a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4903      	ldr	r1, [pc, #12]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3748      	adds	r7, #72	; 0x48
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000

080042b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e049      	b.n	800435e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f841 	bl	8004366 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 f9dc 	bl	80046b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e03b      	b.n	800440c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <HAL_TIM_Base_Start_IT+0x9c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_TIM_Base_Start_IT+0x4e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043be:	d004      	beq.n	80043ca <HAL_TIM_Base_Start_IT+0x4e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <HAL_TIM_Base_Start_IT+0xa0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d115      	bne.n	80043f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_TIM_Base_Start_IT+0xa4>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d015      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x8c>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d011      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	e008      	b.n	8004408 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e000      	b.n	800440a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40014000 	.word	0x40014000
 8004420:	00010007 	.word	0x00010007

08004424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b02      	cmp	r3, #2
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0202 	mvn.w	r2, #2
 8004450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f905 	bl	8004676 <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f8f7 	bl	8004662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f908 	bl	800468a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0204 	mvn.w	r2, #4
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8db 	bl	8004676 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8cd 	bl	8004662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8de 	bl	800468a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0208 	mvn.w	r2, #8
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8b1 	bl	8004676 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8a3 	bl	8004662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8b4 	bl	800468a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b10      	cmp	r3, #16
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b10      	cmp	r3, #16
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0210 	mvn.w	r2, #16
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2208      	movs	r2, #8
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f887 	bl	8004676 <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f879 	bl	8004662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f88a 	bl	800468a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0201 	mvn.w	r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc fe34 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d10e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8e8 	bl	80047a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e2:	d10e      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8db 	bl	80047b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f838 	bl	800469e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b20      	cmp	r3, #32
 800463a:	d10e      	bne.n	800465a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b20      	cmp	r3, #32
 8004648:	d107      	bne.n	800465a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0220 	mvn.w	r2, #32
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f89b 	bl	8004790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a2e      	ldr	r2, [pc, #184]	; (8004780 <TIM_Base_SetConfig+0xcc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0x20>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d108      	bne.n	80046e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a25      	ldr	r2, [pc, #148]	; (8004780 <TIM_Base_SetConfig+0xcc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00f      	beq.n	800470e <TIM_Base_SetConfig+0x5a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f4:	d00b      	beq.n	800470e <TIM_Base_SetConfig+0x5a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <TIM_Base_SetConfig+0xd0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <TIM_Base_SetConfig+0x5a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a21      	ldr	r2, [pc, #132]	; (8004788 <TIM_Base_SetConfig+0xd4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_Base_SetConfig+0x5a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <TIM_Base_SetConfig+0xd8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d108      	bne.n	8004720 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <TIM_Base_SetConfig+0xcc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_Base_SetConfig+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <TIM_Base_SetConfig+0xd0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_Base_SetConfig+0xb0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <TIM_Base_SetConfig+0xd4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_Base_SetConfig+0xb0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0b      	ldr	r2, [pc, #44]	; (800478c <TIM_Base_SetConfig+0xd8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	615a      	str	r2, [r3, #20]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40014000 	.word	0x40014000
 8004788:	40014400 	.word	0x40014400
 800478c:	40014800 	.word	0x40014800

08004790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e040      	b.n	8004860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fd80 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fc00 	bl	8005010 <UART_SetConfig>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e022      	b.n	8004860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fd2a 	bl	800527c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fdb1 	bl	80053c0 <UART_CheckIdleState>
 800485e:	4603      	mov	r3, r0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af02      	add	r7, sp, #8
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487c:	2b20      	cmp	r3, #32
 800487e:	d178      	bne.n	8004972 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_UART_Transmit+0x24>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e071      	b.n	8004974 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	; 0x21
 800489c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800489e:	f7fd f893 	bl	80019c8 <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048bc:	d108      	bne.n	80048d0 <HAL_UART_Transmit+0x68>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e003      	b.n	80048d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d8:	e030      	b.n	800493c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fe13 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e03c      	b.n	8004974 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	881a      	ldrh	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490c:	b292      	uxth	r2, r2
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	3302      	adds	r3, #2
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	e008      	b.n	800492a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	b292      	uxth	r2, r2
 8004922:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	3301      	adds	r3, #1
 8004928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1c8      	bne.n	80048da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	2140      	movs	r1, #64	; 0x40
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 fddc 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e005      	b.n	8004974 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e000      	b.n	8004974 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
  }
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004990:	2b20      	cmp	r3, #32
 8004992:	d132      	bne.n	80049fa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_UART_Receive_IT+0x24>
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e02b      	b.n	80049fc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d018      	beq.n	80049ea <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	613b      	str	r3, [r7, #16]
   return(result);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	69f9      	ldr	r1, [r7, #28]
 80049dc:	6a3a      	ldr	r2, [r7, #32]
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e6      	bne.n	80049b8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fdf5 	bl	80055e0 <UART_Start_Receive_IT>
 80049f6:	4603      	mov	r3, r0
 80049f8:	e000      	b.n	80049fc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
  }
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3728      	adds	r7, #40	; 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b0ba      	sub	sp, #232	; 0xe8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a32:	4013      	ands	r3, r2
 8004a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d115      	bne.n	8004a6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00f      	beq.n	8004a6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 82ab 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4798      	blx	r3
      }
      return;
 8004a6a:	e2a5      	b.n	8004fb8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8117 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a86:	4b85      	ldr	r3, [pc, #532]	; (8004c9c <HAL_UART_IRQHandler+0x298>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 810a 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d011      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xbc>
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab6:	f043 0201 	orr.w	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d011      	beq.n	8004af0 <HAL_UART_IRQHandler+0xec>
 8004acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2202      	movs	r2, #2
 8004ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae6:	f043 0204 	orr.w	r2, r3, #4
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d011      	beq.n	8004b20 <HAL_UART_IRQHandler+0x11c>
 8004afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00b      	beq.n	8004b20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b16:	f043 0202 	orr.w	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d017      	beq.n	8004b5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b52:	f043 0208 	orr.w	r2, r3, #8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d012      	beq.n	8004b8e <HAL_UART_IRQHandler+0x18a>
 8004b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00c      	beq.n	8004b8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b84:	f043 0220 	orr.w	r2, r3, #32
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8211 	beq.w	8004fbc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d005      	beq.n	8004be6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d04f      	beq.n	8004c86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fdc0 	bl	800576c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d141      	bne.n	8004c7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3308      	adds	r3, #8
 8004c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1d9      	bne.n	8004bfa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d013      	beq.n	8004c76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c52:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <HAL_UART_IRQHandler+0x29c>)
 8004c54:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fe47 	bl	80028ee <HAL_DMA_Abort_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d017      	beq.n	8004c96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c70:	4610      	mov	r0, r2
 8004c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	e00f      	b.n	8004c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f9b4 	bl	8004fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	e00b      	b.n	8004c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f9b0 	bl	8004fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	e007      	b.n	8004c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f9ac 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004c94:	e192      	b.n	8004fbc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c96:	bf00      	nop
    return;
 8004c98:	e190      	b.n	8004fbc <HAL_UART_IRQHandler+0x5b8>
 8004c9a:	bf00      	nop
 8004c9c:	04000120 	.word	0x04000120
 8004ca0:	08005835 	.word	0x08005835

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	f040 814b 	bne.w	8004f44 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 8144 	beq.w	8004f44 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 813d 	beq.w	8004f44 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2210      	movs	r2, #16
 8004cd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	f040 80b5 	bne.w	8004e4c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8164 	beq.w	8004fc0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d02:	429a      	cmp	r2, r3
 8004d04:	f080 815c 	bcs.w	8004fc0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	f000 8086 	beq.w	8004e2a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1da      	bne.n	8004d1e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3308      	adds	r3, #8
 8004d88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e1      	bne.n	8004d68 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e3      	bne.n	8004da4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfa:	f023 0310 	bic.w	r3, r3, #16
 8004dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e4      	bne.n	8004dea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fd fd29 	bl	800287c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f8d7 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e4a:	e0b9      	b.n	8004fc0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80ab 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80a6 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e4      	bne.n	8004e78 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e3      	bne.n	8004eae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0310 	bic.w	r3, r3, #16
 8004f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	617b      	str	r3, [r7, #20]
   return(result);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e4      	bne.n	8004efa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f85b 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f42:	e03f      	b.n	8004fc4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00e      	beq.n	8004f6e <HAL_UART_IRQHandler+0x56a>
 8004f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fe4c 	bl	8005c04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f6c:	e02d      	b.n	8004fca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00e      	beq.n	8004f98 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01c      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
    }
    return;
 8004f96:	e017      	b.n	8004fc8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d012      	beq.n	8004fca <HAL_UART_IRQHandler+0x5c6>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00c      	beq.n	8004fca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fc55 	bl	8005860 <UART_EndTransmit_IT>
    return;
 8004fb6:	e008      	b.n	8004fca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004fb8:	bf00      	nop
 8004fba:	e006      	b.n	8004fca <HAL_UART_IRQHandler+0x5c6>
    return;
 8004fbc:	bf00      	nop
 8004fbe:	e004      	b.n	8004fca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004fc0:	bf00      	nop
 8004fc2:	e002      	b.n	8004fca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <HAL_UART_IRQHandler+0x5c6>
    return;
 8004fc8:	bf00      	nop
  }

}
 8004fca:	37e8      	adds	r7, #232	; 0xe8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b8a      	ldr	r3, [pc, #552]	; (8005264 <UART_SetConfig+0x254>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	6979      	ldr	r1, [r7, #20]
 8005044:	430b      	orrs	r3, r1
 8005046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	430a      	orrs	r2, r1
 8005080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a78      	ldr	r2, [pc, #480]	; (8005268 <UART_SetConfig+0x258>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d120      	bne.n	80050ce <UART_SetConfig+0xbe>
 800508c:	4b77      	ldr	r3, [pc, #476]	; (800526c <UART_SetConfig+0x25c>)
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b03      	cmp	r3, #3
 8005096:	d817      	bhi.n	80050c8 <UART_SetConfig+0xb8>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <UART_SetConfig+0x90>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050bd 	.word	0x080050bd
 80050a8:	080050c3 	.word	0x080050c3
 80050ac:	080050b7 	.word	0x080050b7
 80050b0:	2300      	movs	r3, #0
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e01d      	b.n	80050f2 <UART_SetConfig+0xe2>
 80050b6:	2302      	movs	r3, #2
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e01a      	b.n	80050f2 <UART_SetConfig+0xe2>
 80050bc:	2304      	movs	r3, #4
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e017      	b.n	80050f2 <UART_SetConfig+0xe2>
 80050c2:	2308      	movs	r3, #8
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e014      	b.n	80050f2 <UART_SetConfig+0xe2>
 80050c8:	2310      	movs	r3, #16
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e011      	b.n	80050f2 <UART_SetConfig+0xe2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a67      	ldr	r2, [pc, #412]	; (8005270 <UART_SetConfig+0x260>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d102      	bne.n	80050de <UART_SetConfig+0xce>
 80050d8:	2300      	movs	r3, #0
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0xe2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a64      	ldr	r2, [pc, #400]	; (8005274 <UART_SetConfig+0x264>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d102      	bne.n	80050ee <UART_SetConfig+0xde>
 80050e8:	2300      	movs	r3, #0
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e001      	b.n	80050f2 <UART_SetConfig+0xe2>
 80050ee:	2310      	movs	r3, #16
 80050f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fa:	d15a      	bne.n	80051b2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80050fc:	7ffb      	ldrb	r3, [r7, #31]
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d827      	bhi.n	8005152 <UART_SetConfig+0x142>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0xf8>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800512d 	.word	0x0800512d
 800510c:	08005135 	.word	0x08005135
 8005110:	0800513d 	.word	0x0800513d
 8005114:	08005153 	.word	0x08005153
 8005118:	08005143 	.word	0x08005143
 800511c:	08005153 	.word	0x08005153
 8005120:	08005153 	.word	0x08005153
 8005124:	08005153 	.word	0x08005153
 8005128:	0800514b 	.word	0x0800514b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7fe febc 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8005130:	61b8      	str	r0, [r7, #24]
        break;
 8005132:	e013      	b.n	800515c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005134:	f7fe feda 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8005138:	61b8      	str	r0, [r7, #24]
        break;
 800513a:	e00f      	b.n	800515c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513c:	4b4e      	ldr	r3, [pc, #312]	; (8005278 <UART_SetConfig+0x268>)
 800513e:	61bb      	str	r3, [r7, #24]
        break;
 8005140:	e00c      	b.n	800515c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005142:	f7fe fe3b 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005146:	61b8      	str	r0, [r7, #24]
        break;
 8005148:	e008      	b.n	800515c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	61bb      	str	r3, [r7, #24]
        break;
 8005150:	e004      	b.n	800515c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	77bb      	strb	r3, [r7, #30]
        break;
 800515a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d074      	beq.n	800524c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	005a      	lsls	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	441a      	add	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b0f      	cmp	r3, #15
 800517c:	d916      	bls.n	80051ac <UART_SetConfig+0x19c>
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005184:	d212      	bcs.n	80051ac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f023 030f 	bic.w	r3, r3, #15
 800518e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	b29b      	uxth	r3, r3
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	b29a      	uxth	r2, r3
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	4313      	orrs	r3, r2
 80051a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	89fa      	ldrh	r2, [r7, #14]
 80051a8:	60da      	str	r2, [r3, #12]
 80051aa:	e04f      	b.n	800524c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	77bb      	strb	r3, [r7, #30]
 80051b0:	e04c      	b.n	800524c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d828      	bhi.n	800520a <UART_SetConfig+0x1fa>
 80051b8:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0x1b0>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	0800520b 	.word	0x0800520b
 80051d0:	080051fb 	.word	0x080051fb
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	0800520b 	.word	0x0800520b
 80051dc:	0800520b 	.word	0x0800520b
 80051e0:	08005203 	.word	0x08005203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fe fe60 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 80051e8:	61b8      	str	r0, [r7, #24]
        break;
 80051ea:	e013      	b.n	8005214 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ec:	f7fe fe7e 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 80051f0:	61b8      	str	r0, [r7, #24]
        break;
 80051f2:	e00f      	b.n	8005214 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f4:	4b20      	ldr	r3, [pc, #128]	; (8005278 <UART_SetConfig+0x268>)
 80051f6:	61bb      	str	r3, [r7, #24]
        break;
 80051f8:	e00c      	b.n	8005214 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fa:	f7fe fddf 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 80051fe:	61b8      	str	r0, [r7, #24]
        break;
 8005200:	e008      	b.n	8005214 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005206:	61bb      	str	r3, [r7, #24]
        break;
 8005208:	e004      	b.n	8005214 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	77bb      	strb	r3, [r7, #30]
        break;
 8005212:	bf00      	nop
    }

    if (pclk != 0U)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d018      	beq.n	800524c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	085a      	lsrs	r2, r3, #1
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	441a      	add	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b0f      	cmp	r3, #15
 8005232:	d909      	bls.n	8005248 <UART_SetConfig+0x238>
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523a:	d205      	bcs.n	8005248 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	e001      	b.n	800524c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005258:	7fbb      	ldrb	r3, [r7, #30]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	efff69f3 	.word	0xefff69f3
 8005268:	40013800 	.word	0x40013800
 800526c:	40021000 	.word	0x40021000
 8005270:	40004400 	.word	0x40004400
 8005274:	40004800 	.word	0x40004800
 8005278:	007a1200 	.word	0x007a1200

0800527c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01a      	beq.n	8005392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800537a:	d10a      	bne.n	8005392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]
  }
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b098      	sub	sp, #96	; 0x60
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d0:	f7fc fafa 	bl	80019c8 <HAL_GetTick>
 80053d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d12e      	bne.n	8005442 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ec:	2200      	movs	r2, #0
 80053ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f88c 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d021      	beq.n	8005442 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005412:	653b      	str	r3, [r7, #80]	; 0x50
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541c:	647b      	str	r3, [r7, #68]	; 0x44
 800541e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e6      	bne.n	80053fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2220      	movs	r2, #32
 8005434:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e062      	b.n	8005508 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d149      	bne.n	80054e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005458:	2200      	movs	r2, #0
 800545a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f856 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d03c      	beq.n	80054e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	623b      	str	r3, [r7, #32]
   return(result);
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800547e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005488:	633b      	str	r3, [r7, #48]	; 0x30
 800548a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800548e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e6      	bne.n	800546a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054bc:	61fa      	str	r2, [r7, #28]
 80054be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	69b9      	ldr	r1, [r7, #24]
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e5      	bne.n	800549c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e011      	b.n	8005508 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3758      	adds	r7, #88	; 0x58
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005520:	e049      	b.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d045      	beq.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552a:	f7fc fa4d 	bl	80019c8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <UART_WaitOnFlagUntilTimeout+0x30>
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e048      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d031      	beq.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b08      	cmp	r3, #8
 800555e:	d110      	bne.n	8005582 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2208      	movs	r2, #8
 8005566:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f8ff 	bl	800576c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2208      	movs	r2, #8
 8005572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e029      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005590:	d111      	bne.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800559a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f8e5 	bl	800576c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e00f      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	bf0c      	ite	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	2300      	movne	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d0a6      	beq.n	8005522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b097      	sub	sp, #92	; 0x5c
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005612:	d10e      	bne.n	8005632 <UART_Start_Receive_IT+0x52>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <UART_Start_Receive_IT+0x48>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005626:	e02d      	b.n	8005684 <UART_Start_Receive_IT+0xa4>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	22ff      	movs	r2, #255	; 0xff
 800562c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005630:	e028      	b.n	8005684 <UART_Start_Receive_IT+0xa4>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10d      	bne.n	8005656 <UART_Start_Receive_IT+0x76>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <UART_Start_Receive_IT+0x6c>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	22ff      	movs	r2, #255	; 0xff
 8005646:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800564a:	e01b      	b.n	8005684 <UART_Start_Receive_IT+0xa4>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	227f      	movs	r2, #127	; 0x7f
 8005650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005654:	e016      	b.n	8005684 <UART_Start_Receive_IT+0xa4>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800565e:	d10d      	bne.n	800567c <UART_Start_Receive_IT+0x9c>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <UART_Start_Receive_IT+0x92>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	227f      	movs	r2, #127	; 0x7f
 800566c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005670:	e008      	b.n	8005684 <UART_Start_Receive_IT+0xa4>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	223f      	movs	r2, #63	; 0x3f
 8005676:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800567a:	e003      	b.n	8005684 <UART_Start_Receive_IT+0xa4>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2222      	movs	r2, #34	; 0x22
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3308      	adds	r3, #8
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	657b      	str	r3, [r7, #84]	; 0x54
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80056b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e5      	bne.n	8005694 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d107      	bne.n	80056e2 <UART_Start_Receive_IT+0x102>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a21      	ldr	r2, [pc, #132]	; (8005764 <UART_Start_Receive_IT+0x184>)
 80056de:	669a      	str	r2, [r3, #104]	; 0x68
 80056e0:	e002      	b.n	80056e8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a20      	ldr	r2, [pc, #128]	; (8005768 <UART_Start_Receive_IT+0x188>)
 80056e6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d019      	beq.n	8005724 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
 8005710:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e6      	bne.n	80056f0 <UART_Start_Receive_IT+0x110>
 8005722:	e018      	b.n	8005756 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	613b      	str	r3, [r7, #16]
   return(result);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f043 0320 	orr.w	r3, r3, #32
 8005738:	653b      	str	r3, [r7, #80]	; 0x50
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005742:	623b      	str	r3, [r7, #32]
 8005744:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	69f9      	ldr	r1, [r7, #28]
 8005748:	6a3a      	ldr	r2, [r7, #32]
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e6      	bne.n	8005724 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	375c      	adds	r7, #92	; 0x5c
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	08005a5d 	.word	0x08005a5d
 8005768:	080058b5 	.word	0x080058b5

0800576c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b095      	sub	sp, #84	; 0x54
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005792:	643b      	str	r3, [r7, #64]	; 0x40
 8005794:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e6      	bne.n	8005774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e5      	bne.n	80057a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d118      	bne.n	8005814 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0310 	bic.w	r3, r3, #16
 80057f6:	647b      	str	r3, [r7, #68]	; 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6979      	ldr	r1, [r7, #20]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	613b      	str	r3, [r7, #16]
   return(result);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e6      	bne.n	80057e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005828:	bf00      	nop
 800582a:	3754      	adds	r7, #84	; 0x54
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff fbc6 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	60bb      	str	r3, [r7, #8]
   return(result);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6979      	ldr	r1, [r7, #20]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	613b      	str	r3, [r7, #16]
   return(result);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fb92 	bl	8004fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ac:	bf00      	nop
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b09c      	sub	sp, #112	; 0x70
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058cc:	2b22      	cmp	r3, #34	; 0x22
 80058ce:	f040 80b9 	bne.w	8005a44 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058e0:	b2d9      	uxtb	r1, r3
 80058e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	400a      	ands	r2, r1
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 809c 	bne.w	8005a54 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800592a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005930:	66bb      	str	r3, [r7, #104]	; 0x68
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800593a:	65bb      	str	r3, [r7, #88]	; 0x58
 800593c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e6      	bne.n	800591c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	667b      	str	r3, [r7, #100]	; 0x64
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800596e:	647a      	str	r2, [r7, #68]	; 0x44
 8005970:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d018      	beq.n	80059d6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	623b      	str	r3, [r7, #32]
   return(result);
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c2:	633b      	str	r3, [r7, #48]	; 0x30
 80059c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e6      	bne.n	80059a4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d12e      	bne.n	8005a3c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 0310 	bic.w	r3, r3, #16
 80059f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	69b9      	ldr	r1, [r7, #24]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e6      	bne.n	80059e4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d103      	bne.n	8005a2c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2210      	movs	r2, #16
 8005a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff fadf 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a3a:	e00b      	b.n	8005a54 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fb fb9d 	bl	800117c <HAL_UART_RxCpltCallback>
}
 8005a42:	e007      	b.n	8005a54 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0208 	orr.w	r2, r2, #8
 8005a52:	619a      	str	r2, [r3, #24]
}
 8005a54:	bf00      	nop
 8005a56:	3770      	adds	r7, #112	; 0x70
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b09c      	sub	sp, #112	; 0x70
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a74:	2b22      	cmp	r3, #34	; 0x22
 8005a76:	f040 80b9 	bne.w	8005bec <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005a8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a92:	4013      	ands	r3, r2
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	1c9a      	adds	r2, r3, #2
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 809c 	bne.w	8005bfc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e6      	bne.n	8005ac4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3308      	adds	r3, #8
 8005b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b16:	643a      	str	r2, [r7, #64]	; 0x40
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e5      	bne.n	8005af6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d018      	beq.n	8005b7e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b6c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e6      	bne.n	8005b4c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d12e      	bne.n	8005be4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f023 0310 	bic.w	r3, r3, #16
 8005ba0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e6      	bne.n	8005b8c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d103      	bne.n	8005bd4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fa0b 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005be2:	e00b      	b.n	8005bfc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7fb fac9 	bl	800117c <HAL_UART_RxCpltCallback>
}
 8005bea:	e007      	b.n	8005bfc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0208 	orr.w	r2, r2, #8
 8005bfa:	619a      	str	r2, [r3, #24]
}
 8005bfc:	bf00      	nop
 8005bfe:	3770      	adds	r7, #112	; 0x70
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f103 0208 	add.w	r2, r3, #8
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c30:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f103 0208 	add.w	r2, r3, #8
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f103 0208 	add.w	r2, r3, #8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d103      	bne.n	8005c92 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e00c      	b.n	8005cac <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3308      	adds	r3, #8
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e002      	b.n	8005ca0 <vListInsert+0x2e>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d2f6      	bcs.n	8005c9a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	601a      	str	r2, [r3, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6892      	ldr	r2, [r2, #8]
 8005cfa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6852      	ldr	r2, [r2, #4]
 8005d04:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d103      	bne.n	8005d18 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	1e5a      	subs	r2, r3, #1
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005d42:	2301      	movs	r3, #1
 8005d44:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <xQueueGenericReset+0x2e>
        __asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
    }
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05d      	beq.n	8005e28 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d059      	beq.n	8005e28 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d000      	beq.n	8005d88 <xQueueGenericReset+0x50>
 8005d86:	2101      	movs	r1, #1
 8005d88:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d14c      	bne.n	8005e28 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005d8e:	f002 f943 	bl	8008018 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	6939      	ldr	r1, [r7, #16]
 8005d9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	441a      	add	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2200      	movs	r2, #0
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	6939      	ldr	r1, [r7, #16]
 8005dc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dc4:	fb01 f303 	mul.w	r3, r1, r3
 8005dc8:	441a      	add	r2, r3
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	22ff      	movs	r2, #255	; 0xff
 8005dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	22ff      	movs	r2, #255	; 0xff
 8005dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d114      	bne.n	8005e0e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01a      	beq.n	8005e22 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	3310      	adds	r3, #16
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 f981 	bl	80070f8 <xTaskRemoveFromEventList>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d012      	beq.n	8005e22 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005dfc:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <xQueueGenericReset+0x11c>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	e009      	b.n	8005e22 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3310      	adds	r3, #16
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff ff00 	bl	8005c18 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3324      	adds	r3, #36	; 0x24
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fefb 	bl	8005c18 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005e22:	f002 f929 	bl	8008078 <vPortExitCritical>
 8005e26:	e001      	b.n	8005e2c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <xQueueGenericReset+0x110>
        __asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	60bb      	str	r3, [r7, #8]
    }
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d02e      	beq.n	8005ece <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005e70:	2100      	movs	r1, #0
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d000      	beq.n	8005e80 <xQueueGenericCreate+0x28>
 8005e7e:	2101      	movs	r1, #1
 8005e80:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d123      	bne.n	8005ece <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005e8e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005e92:	d81c      	bhi.n	8005ece <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	fb02 f303 	mul.w	r3, r2, r3
 8005e9c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3350      	adds	r3, #80	; 0x50
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f002 f9da 	bl	800825c <pvPortMalloc>
 8005ea8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01c      	beq.n	8005eea <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	3350      	adds	r3, #80	; 0x50
 8005eb8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005eba:	79fa      	ldrb	r2, [r7, #7]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f814 	bl	8005ef4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005ecc:	e00d      	b.n	8005eea <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <xQueueGenericCreate+0x92>
        __asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	613b      	str	r3, [r7, #16]
    }
 8005ee6:	bf00      	nop
 8005ee8:	e7fe      	b.n	8005ee8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005eea:	69fb      	ldr	r3, [r7, #28]
    }
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e002      	b.n	8005f16 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f22:	2101      	movs	r1, #1
 8005f24:	69b8      	ldr	r0, [r7, #24]
 8005f26:	f7ff ff07 	bl	8005d38 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08e      	sub	sp, #56	; 0x38
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xQueueGenericSend+0x32>
        __asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d103      	bne.n	8005f7c <xQueueGenericSend+0x40>
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <xQueueGenericSend+0x44>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <xQueueGenericSend+0x46>
 8005f80:	2300      	movs	r3, #0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <xQueueGenericSend+0x60>
        __asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005f98:	bf00      	nop
 8005f9a:	e7fe      	b.n	8005f9a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d103      	bne.n	8005faa <xQueueGenericSend+0x6e>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <xQueueGenericSend+0x72>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <xQueueGenericSend+0x74>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <xQueueGenericSend+0x8e>
        __asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	623b      	str	r3, [r7, #32]
    }
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fca:	f001 faa5 	bl	8007518 <xTaskGetSchedulerState>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <xQueueGenericSend+0x9e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <xQueueGenericSend+0xa2>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <xQueueGenericSend+0xa4>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xQueueGenericSend+0xbe>
        __asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	61fb      	str	r3, [r7, #28]
    }
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005ffa:	f002 f80d 	bl	8008018 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <xQueueGenericSend+0xd4>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d129      	bne.n	8006064 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006016:	f000 fad6 	bl	80065c6 <prvCopyDataToQueue>
 800601a:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	d010      	beq.n	8006046 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	3324      	adds	r3, #36	; 0x24
 8006028:	4618      	mov	r0, r3
 800602a:	f001 f865 	bl	80070f8 <xTaskRemoveFromEventList>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d013      	beq.n	800605c <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006034:	4b3f      	ldr	r3, [pc, #252]	; (8006134 <xQueueGenericSend+0x1f8>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	e00a      	b.n	800605c <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800604c:	4b39      	ldr	r3, [pc, #228]	; (8006134 <xQueueGenericSend+0x1f8>)
 800604e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800605c:	f002 f80c 	bl	8008078 <vPortExitCritical>
                return pdPASS;
 8006060:	2301      	movs	r3, #1
 8006062:	e063      	b.n	800612c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800606a:	f002 f805 	bl	8008078 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800606e:	2300      	movs	r3, #0
 8006070:	e05c      	b.n	800612c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	4618      	mov	r0, r3
 800607e:	f001 f911 	bl	80072a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006086:	f001 fff7 	bl	8008078 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800608a:	f000 fd89 	bl	8006ba0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800608e:	f001 ffc3 	bl	8008018 <vPortEnterCritical>
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006098:	b25b      	sxtb	r3, r3
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d103      	bne.n	80060a8 <xQueueGenericSend+0x16c>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d103      	bne.n	80060be <xQueueGenericSend+0x182>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060be:	f001 ffdb 	bl	8008078 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060c2:	1d3a      	adds	r2, r7, #4
 80060c4:	f107 0314 	add.w	r3, r7, #20
 80060c8:	4611      	mov	r1, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 f900 	bl	80072d0 <xTaskCheckForTimeOut>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d124      	bne.n	8006120 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d8:	f000 fb6d 	bl	80067b6 <prvIsQueueFull>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d018      	beq.n	8006114 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	3310      	adds	r3, #16
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 ffe0 	bl	80070b0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80060f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060f2:	f000 faf8 	bl	80066e6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80060f6:	f000 fd61 	bl	8006bbc <xTaskResumeAll>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f47f af7c 	bne.w	8005ffa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <xQueueGenericSend+0x1f8>)
 8006104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	e772      	b.n	8005ffa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006116:	f000 fae6 	bl	80066e6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800611a:	f000 fd4f 	bl	8006bbc <xTaskResumeAll>
 800611e:	e76c      	b.n	8005ffa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006122:	f000 fae0 	bl	80066e6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006126:	f000 fd49 	bl	8006bbc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800612a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800612c:	4618      	mov	r0, r3
 800612e:	3738      	adds	r7, #56	; 0x38
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b092      	sub	sp, #72	; 0x48
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 800614a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <xQueueGenericSendFromISR+0x3c>
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueGenericSendFromISR+0x40>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueGenericSendFromISR+0x42>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d103      	bne.n	80061a2 <xQueueGenericSendFromISR+0x6a>
 800619a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <xQueueGenericSendFromISR+0x6e>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <xQueueGenericSendFromISR+0x70>
 80061a6:	2300      	movs	r3, #0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061c2:	f002 f80b 	bl	80081dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80061c6:	f3ef 8211 	mrs	r2, BASEPRI
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	623a      	str	r2, [r7, #32]
 80061dc:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80061de:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d302      	bcc.n	80061f4 <xQueueGenericSendFromISR+0xbc>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d146      	bne.n	8006282 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80061f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800620a:	f000 f9dc 	bl	80065c6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800620e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d112      	bne.n	800623e <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02d      	beq.n	800627c <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006222:	3324      	adds	r3, #36	; 0x24
 8006224:	4618      	mov	r0, r3
 8006226:	f000 ff67 	bl	80070f8 <xTaskRemoveFromEventList>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d025      	beq.n	800627c <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d022      	beq.n	800627c <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e01e      	b.n	800627c <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800623e:	f000 fdb9 	bl	8006db4 <uxTaskGetNumberOfTasks>
 8006242:	6338      	str	r0, [r7, #48]	; 0x30
 8006244:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8006248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624a:	429a      	cmp	r2, r3
 800624c:	d916      	bls.n	800627c <xQueueGenericSendFromISR+0x144>
 800624e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8006252:	2b7f      	cmp	r3, #127	; 0x7f
 8006254:	d10a      	bne.n	800626c <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	61bb      	str	r3, [r7, #24]
    }
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <xQueueGenericSendFromISR+0x132>
 800626c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006270:	3301      	adds	r3, #1
 8006272:	b2db      	uxtb	r3, r3
 8006274:	b25a      	sxtb	r2, r3
 8006276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800627c:	2301      	movs	r3, #1
 800627e:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8006280:	e001      	b.n	8006286 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006282:	2300      	movs	r3, #0
 8006284:	647b      	str	r3, [r7, #68]	; 0x44
 8006286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006288:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006290:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006294:	4618      	mov	r0, r3
 8006296:	3748      	adds	r7, #72	; 0x48
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	; 0x30
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80062a8:	2300      	movs	r3, #0
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <xQueueReceive+0x30>
        __asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	623b      	str	r3, [r7, #32]
    }
 80062c8:	bf00      	nop
 80062ca:	e7fe      	b.n	80062ca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <xQueueReceive+0x3e>
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <xQueueReceive+0x42>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <xQueueReceive+0x44>
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <xQueueReceive+0x5e>
        __asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	61fb      	str	r3, [r7, #28]
    }
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062fa:	f001 f90d 	bl	8007518 <xTaskGetSchedulerState>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <xQueueReceive+0x6e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <xQueueReceive+0x72>
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <xQueueReceive+0x74>
 800630e:	2300      	movs	r3, #0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <xQueueReceive+0x8e>
        __asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	61bb      	str	r3, [r7, #24]
    }
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800632a:	f001 fe75 	bl	8008018 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01f      	beq.n	800637a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633e:	f000 f9ac 	bl	800669a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	1e5a      	subs	r2, r3, #1
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00f      	beq.n	8006372 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	3310      	adds	r3, #16
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fece 	bl	80070f8 <xTaskRemoveFromEventList>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006362:	4b3d      	ldr	r3, [pc, #244]	; (8006458 <xQueueReceive+0x1bc>)
 8006364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006372:	f001 fe81 	bl	8008078 <vPortExitCritical>
                return pdPASS;
 8006376:	2301      	movs	r3, #1
 8006378:	e069      	b.n	800644e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006380:	f001 fe7a 	bl	8008078 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006384:	2300      	movs	r3, #0
 8006386:	e062      	b.n	800644e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800638e:	f107 0310 	add.w	r3, r7, #16
 8006392:	4618      	mov	r0, r3
 8006394:	f000 ff86 	bl	80072a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800639c:	f001 fe6c 	bl	8008078 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80063a0:	f000 fbfe 	bl	8006ba0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80063a4:	f001 fe38 	bl	8008018 <vPortEnterCritical>
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d103      	bne.n	80063be <xQueueReceive+0x122>
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c4:	b25b      	sxtb	r3, r3
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d103      	bne.n	80063d4 <xQueueReceive+0x138>
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d4:	f001 fe50 	bl	8008078 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063d8:	1d3a      	adds	r2, r7, #4
 80063da:	f107 0310 	add.w	r3, r7, #16
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 ff75 	bl	80072d0 <xTaskCheckForTimeOut>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d123      	bne.n	8006434 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ee:	f000 f9cc 	bl	800678a <prvIsQueueEmpty>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d017      	beq.n	8006428 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	3324      	adds	r3, #36	; 0x24
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	4611      	mov	r1, r2
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fe55 	bl	80070b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006408:	f000 f96d 	bl	80066e6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800640c:	f000 fbd6 	bl	8006bbc <xTaskResumeAll>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d189      	bne.n	800632a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006416:	4b10      	ldr	r3, [pc, #64]	; (8006458 <xQueueReceive+0x1bc>)
 8006418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	e780      	b.n	800632a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642a:	f000 f95c 	bl	80066e6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800642e:	f000 fbc5 	bl	8006bbc <xTaskResumeAll>
 8006432:	e77a      	b.n	800632a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006436:	f000 f956 	bl	80066e6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800643a:	f000 fbbf 	bl	8006bbc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800643e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006440:	f000 f9a3 	bl	800678a <prvIsQueueEmpty>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	f43f af6f 	beq.w	800632a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800644c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800644e:	4618      	mov	r0, r3
 8006450:	3730      	adds	r7, #48	; 0x30
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b090      	sub	sp, #64	; 0x40
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <xQueueReceiveFromISR+0x3a>
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <xQueueReceiveFromISR+0x3e>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <xQueueReceiveFromISR+0x40>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	623b      	str	r3, [r7, #32]
    }
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064b6:	f001 fe91 	bl	80081dc <vPortValidateInterruptPriority>
        __asm volatile
 80064ba:	f3ef 8211 	mrs	r2, BASEPRI
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	61fa      	str	r2, [r7, #28]
 80064d0:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80064d2:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d046      	beq.n	8006570 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064f0:	f000 f8d3 	bl	800669a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	1e5a      	subs	r2, r3, #1
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80064fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d112      	bne.n	800652c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d02d      	beq.n	800656a <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	3310      	adds	r3, #16
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fdf0 	bl	80070f8 <xTaskRemoveFromEventList>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d025      	beq.n	800656a <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d022      	beq.n	800656a <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	e01e      	b.n	800656a <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800652c:	f000 fc42 	bl	8006db4 <uxTaskGetNumberOfTasks>
 8006530:	62b8      	str	r0, [r7, #40]	; 0x28
 8006532:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006538:	429a      	cmp	r2, r3
 800653a:	d916      	bls.n	800656a <xQueueReceiveFromISR+0x10e>
 800653c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006540:	2b7f      	cmp	r3, #127	; 0x7f
 8006542:	d10a      	bne.n	800655a <xQueueReceiveFromISR+0xfe>
        __asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	617b      	str	r3, [r7, #20]
    }
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xQueueReceiveFromISR+0xfc>
 800655a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800655e:	3301      	adds	r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	b25a      	sxtb	r2, r3
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800656a:	2301      	movs	r3, #1
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656e:	e001      	b.n	8006574 <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 8006570:	2300      	movs	r3, #0
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f383 8811 	msr	BASEPRI, r3
    }
 800657e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006582:	4618      	mov	r0, r3
 8006584:	3740      	adds	r7, #64	; 0x40
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	60bb      	str	r3, [r7, #8]
    }
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80065ae:	f001 fd33 	bl	8008018 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80065b8:	f001 fd5e 	bl	8008078 <vPortExitCritical>

    return uxReturn;
 80065bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10d      	bne.n	8006600 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d14d      	bne.n	8006688 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 ffaf 	bl	8007554 <xTaskPriorityDisinherit>
 80065f6:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
 80065fe:	e043      	b.n	8006688 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d119      	bne.n	800663a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6858      	ldr	r0, [r3, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	461a      	mov	r2, r3
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	f002 f819 	bl	8008648 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	441a      	add	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	429a      	cmp	r2, r3
 800662e:	d32b      	bcc.n	8006688 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	605a      	str	r2, [r3, #4]
 8006638:	e026      	b.n	8006688 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68d8      	ldr	r0, [r3, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	461a      	mov	r2, r3
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	f001 ffff 	bl	8008648 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	425b      	negs	r3, r3
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d207      	bcs.n	8006676 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	425b      	negs	r3, r3
 8006670:	441a      	add	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d105      	bne.n	8006688 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	3b01      	subs	r3, #1
 8006686:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006690:	697b      	ldr	r3, [r7, #20]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d018      	beq.n	80066de <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	441a      	add	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d303      	bcc.n	80066ce <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68d9      	ldr	r1, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	461a      	mov	r2, r3
 80066d8:	6838      	ldr	r0, [r7, #0]
 80066da:	f001 ffb5 	bl	8008648 <memcpy>
    }
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80066ee:	f001 fc93 	bl	8008018 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80066fa:	e011      	b.n	8006720 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	d012      	beq.n	800672a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fcf5 	bl	80070f8 <xTaskRemoveFromEventList>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006714:	f000 fe42 	bl	800739c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	3b01      	subs	r3, #1
 800671c:	b2db      	uxtb	r3, r3
 800671e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006724:	2b00      	cmp	r3, #0
 8006726:	dce9      	bgt.n	80066fc <prvUnlockQueue+0x16>
 8006728:	e000      	b.n	800672c <prvUnlockQueue+0x46>
                    break;
 800672a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	22ff      	movs	r2, #255	; 0xff
 8006730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006734:	f001 fca0 	bl	8008078 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006738:	f001 fc6e 	bl	8008018 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006742:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006744:	e011      	b.n	800676a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d012      	beq.n	8006774 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3310      	adds	r3, #16
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fcd0 	bl	80070f8 <xTaskRemoveFromEventList>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800675e:	f000 fe1d 	bl	800739c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	3b01      	subs	r3, #1
 8006766:	b2db      	uxtb	r3, r3
 8006768:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800676a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	dce9      	bgt.n	8006746 <prvUnlockQueue+0x60>
 8006772:	e000      	b.n	8006776 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006774:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800677e:	f001 fc7b 	bl	8008078 <vPortExitCritical>
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006792:	f001 fc41 	bl	8008018 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800679e:	2301      	movs	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	e001      	b.n	80067a8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80067a8:	f001 fc66 	bl	8008078 <vPortExitCritical>

    return xReturn;
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80067be:	f001 fc2b 	bl	8008018 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d102      	bne.n	80067d4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80067ce:	2301      	movs	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e001      	b.n	80067d8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80067d8:	f001 fc4e 	bl	8008078 <vPortExitCritical>

    return xReturn;
 80067dc:	68fb      	ldr	r3, [r7, #12]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80067e6:	b480      	push	{r7}
 80067e8:	b087      	sub	sp, #28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
    }
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	429a      	cmp	r2, r3
 8006818:	d102      	bne.n	8006820 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800681a:	2301      	movs	r3, #1
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	e001      	b.n	8006824 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006824:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006832:	b580      	push	{r7, lr}
 8006834:	b08c      	sub	sp, #48	; 0x30
 8006836:	af04      	add	r7, sp, #16
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4618      	mov	r0, r3
 8006848:	f001 fd08 	bl	800825c <pvPortMalloc>
 800684c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d013      	beq.n	800687c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006854:	2064      	movs	r0, #100	; 0x64
 8006856:	f001 fd01 	bl	800825c <pvPortMalloc>
 800685a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d008      	beq.n	8006874 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006862:	2264      	movs	r2, #100	; 0x64
 8006864:	2100      	movs	r1, #0
 8006866:	69f8      	ldr	r0, [r7, #28]
 8006868:	f001 fefc 	bl	8008664 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	631a      	str	r2, [r3, #48]	; 0x30
 8006872:	e005      	b.n	8006880 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006874:	6978      	ldr	r0, [r7, #20]
 8006876:	f001 fdab 	bl	80083d0 <vPortFree>
 800687a:	e001      	b.n	8006880 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d013      	beq.n	80068ae <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	2300      	movs	r3, #0
 800688a:	9303      	str	r3, [sp, #12]
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	9302      	str	r3, [sp, #8]
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f80e 	bl	80068be <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80068a2:	69f8      	ldr	r0, [r7, #28]
 80068a4:	f000 f89a 	bl	80069dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80068a8:	2301      	movs	r3, #1
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	e002      	b.n	80068b4 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295
 80068b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80068b4:	69bb      	ldr	r3, [r7, #24]
    }
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b088      	sub	sp, #32
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
 80068ca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	461a      	mov	r2, r3
 80068d6:	21a5      	movs	r1, #165	; 0xa5
 80068d8:	f001 fec4 	bl	8008664 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068e6:	3b01      	subs	r3, #1
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	f023 0307 	bic.w	r3, r3, #7
 80068f4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	617b      	str	r3, [r7, #20]
    }
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01e      	beq.n	800695a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800691c:	2300      	movs	r3, #0
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	e012      	b.n	8006948 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	7819      	ldrb	r1, [r3, #0]
 800692a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	3334      	adds	r3, #52	; 0x34
 8006932:	460a      	mov	r2, r1
 8006934:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d006      	beq.n	8006950 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	3301      	adds	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b0f      	cmp	r3, #15
 800694c:	d9e9      	bls.n	8006922 <prvInitialiseNewTask+0x64>
 800694e:	e000      	b.n	8006952 <prvInitialiseNewTask+0x94>
            {
                break;
 8006950:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	2b06      	cmp	r3, #6
 800695e:	d90a      	bls.n	8006976 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
    }
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	2b06      	cmp	r3, #6
 800697a:	d901      	bls.n	8006980 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800697c:	2306      	movs	r3, #6
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006984:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800698a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	3304      	adds	r3, #4
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff f961 	bl	8005c58 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	3318      	adds	r3, #24
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff f95c 	bl	8005c58 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	f1c3 0207 	rsb	r2, r3, #7
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	68f9      	ldr	r1, [r7, #12]
 80069ba:	69b8      	ldr	r0, [r7, #24]
 80069bc:	f001 f9fe 	bl	8007dbc <pxPortInitialiseStack>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80069d2:	bf00      	nop
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80069e4:	f001 fb18 	bl	8008018 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80069e8:	4b40      	ldr	r3, [pc, #256]	; (8006aec <prvAddNewTaskToReadyList+0x110>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	4a3f      	ldr	r2, [pc, #252]	; (8006aec <prvAddNewTaskToReadyList+0x110>)
 80069f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80069f2:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <prvAddNewTaskToReadyList+0x114>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80069fa:	4a3d      	ldr	r2, [pc, #244]	; (8006af0 <prvAddNewTaskToReadyList+0x114>)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a00:	4b3a      	ldr	r3, [pc, #232]	; (8006aec <prvAddNewTaskToReadyList+0x110>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d110      	bne.n	8006a2a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006a08:	f000 fcec 	bl	80073e4 <prvInitialiseTaskLists>
 8006a0c:	e00d      	b.n	8006a2a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006a0e:	4b39      	ldr	r3, [pc, #228]	; (8006af4 <prvAddNewTaskToReadyList+0x118>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a16:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <prvAddNewTaskToReadyList+0x114>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d802      	bhi.n	8006a2a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006a24:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <prvAddNewTaskToReadyList+0x114>)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006a2a:	4b33      	ldr	r3, [pc, #204]	; (8006af8 <prvAddNewTaskToReadyList+0x11c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	4a31      	ldr	r2, [pc, #196]	; (8006af8 <prvAddNewTaskToReadyList+0x11c>)
 8006a32:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a34:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <prvAddNewTaskToReadyList+0x11c>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	2201      	movs	r2, #1
 8006a42:	409a      	lsls	r2, r3
 8006a44:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <prvAddNewTaskToReadyList+0x120>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <prvAddNewTaskToReadyList+0x120>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a52:	492b      	ldr	r1, [pc, #172]	; (8006b00 <prvAddNewTaskToReadyList+0x124>)
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3304      	adds	r3, #4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	609a      	str	r2, [r3, #8]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	3204      	adds	r2, #4
 8006a7a:	605a      	str	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	1d1a      	adds	r2, r3, #4
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <prvAddNewTaskToReadyList+0x124>)
 8006a92:	441a      	add	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	615a      	str	r2, [r3, #20]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9c:	4918      	ldr	r1, [pc, #96]	; (8006b00 <prvAddNewTaskToReadyList+0x124>)
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	4814      	ldr	r0, [pc, #80]	; (8006b00 <prvAddNewTaskToReadyList+0x124>)
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4403      	add	r3, r0
 8006ab8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006aba:	f001 fadd 	bl	8008078 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006abe:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <prvAddNewTaskToReadyList+0x118>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00e      	beq.n	8006ae4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <prvAddNewTaskToReadyList+0x114>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d207      	bcs.n	8006ae4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <prvAddNewTaskToReadyList+0x128>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000310 	.word	0x20000310
 8006af0:	20000210 	.word	0x20000210
 8006af4:	2000031c 	.word	0x2000031c
 8006af8:	2000032c 	.word	0x2000032c
 8006afc:	20000318 	.word	0x20000318
 8006b00:	20000214 	.word	0x20000214
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <vTaskStartScheduler+0x7c>)
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	2300      	movs	r3, #0
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	2300      	movs	r3, #0
 8006b18:	22c8      	movs	r2, #200	; 0xc8
 8006b1a:	491b      	ldr	r1, [pc, #108]	; (8006b88 <vTaskStartScheduler+0x80>)
 8006b1c:	481b      	ldr	r0, [pc, #108]	; (8006b8c <vTaskStartScheduler+0x84>)
 8006b1e:	f7ff fe88 	bl	8006832 <xTaskCreate>
 8006b22:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d116      	bne.n	8006b58 <vTaskStartScheduler+0x50>
        __asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	60bb      	str	r3, [r7, #8]
    }
 8006b3c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <vTaskStartScheduler+0x88>)
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <vTaskStartScheduler+0x8c>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b4c:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <vTaskStartScheduler+0x90>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006b52:	f001 f9bf 	bl	8007ed4 <xPortStartScheduler>
 8006b56:	e00e      	b.n	8006b76 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d10a      	bne.n	8006b76 <vTaskStartScheduler+0x6e>
        __asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	607b      	str	r3, [r7, #4]
    }
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006b76:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <vTaskStartScheduler+0x94>)
 8006b78:	681b      	ldr	r3, [r3, #0]
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000334 	.word	0x20000334
 8006b88:	0800d010 	.word	0x0800d010
 8006b8c:	080073b5 	.word	0x080073b5
 8006b90:	20000330 	.word	0x20000330
 8006b94:	2000031c 	.word	0x2000031c
 8006b98:	20000314 	.word	0x20000314
 8006b9c:	20000014 	.word	0x20000014

08006ba0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <vTaskSuspendAll+0x18>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	4a03      	ldr	r2, [pc, #12]	; (8006bb8 <vTaskSuspendAll+0x18>)
 8006bac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006bae:	bf00      	nop
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	20000338 	.word	0x20000338

08006bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006bca:	4b71      	ldr	r3, [pc, #452]	; (8006d90 <xTaskResumeAll+0x1d4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <xTaskResumeAll+0x2c>
        __asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	607b      	str	r3, [r7, #4]
    }
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006be8:	f001 fa16 	bl	8008018 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006bec:	4b68      	ldr	r3, [pc, #416]	; (8006d90 <xTaskResumeAll+0x1d4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	4a67      	ldr	r2, [pc, #412]	; (8006d90 <xTaskResumeAll+0x1d4>)
 8006bf4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bf6:	4b66      	ldr	r3, [pc, #408]	; (8006d90 <xTaskResumeAll+0x1d4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 80c0 	bne.w	8006d80 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c00:	4b64      	ldr	r3, [pc, #400]	; (8006d94 <xTaskResumeAll+0x1d8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 80bb 	beq.w	8006d80 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c0a:	e08a      	b.n	8006d22 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c0c:	4b62      	ldr	r3, [pc, #392]	; (8006d98 <xTaskResumeAll+0x1dc>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	6a12      	ldr	r2, [r2, #32]
 8006c22:	609a      	str	r2, [r3, #8]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	69d2      	ldr	r2, [r2, #28]
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	3318      	adds	r3, #24
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d103      	bne.n	8006c42 <xTaskResumeAll+0x86>
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	6a1a      	ldr	r2, [r3, #32]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	2200      	movs	r2, #0
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	1e5a      	subs	r2, r3, #1
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	68d2      	ldr	r2, [r2, #12]
 8006c60:	609a      	str	r2, [r3, #8]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	6892      	ldr	r2, [r2, #8]
 8006c6a:	605a      	str	r2, [r3, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3304      	adds	r3, #4
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d103      	bne.n	8006c80 <xTaskResumeAll+0xc4>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	605a      	str	r2, [r3, #4]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2200      	movs	r2, #0
 8006c84:	615a      	str	r2, [r3, #20]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	1e5a      	subs	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	2201      	movs	r2, #1
 8006c96:	409a      	lsls	r2, r3
 8006c98:	4b40      	ldr	r3, [pc, #256]	; (8006d9c <xTaskResumeAll+0x1e0>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	4a3f      	ldr	r2, [pc, #252]	; (8006d9c <xTaskResumeAll+0x1e0>)
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca6:	493e      	ldr	r1, [pc, #248]	; (8006da0 <xTaskResumeAll+0x1e4>)
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	609a      	str	r2, [r3, #8]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	60da      	str	r2, [r3, #12]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	3204      	adds	r2, #4
 8006cce:	605a      	str	r2, [r3, #4]
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4a2e      	ldr	r2, [pc, #184]	; (8006da0 <xTaskResumeAll+0x1e4>)
 8006ce6:	441a      	add	r2, r3
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	615a      	str	r2, [r3, #20]
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	492b      	ldr	r1, [pc, #172]	; (8006da0 <xTaskResumeAll+0x1e4>)
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	4827      	ldr	r0, [pc, #156]	; (8006da0 <xTaskResumeAll+0x1e4>)
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4403      	add	r3, r0
 8006d0c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d12:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <xTaskResumeAll+0x1e8>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d302      	bcc.n	8006d22 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8006d1c:	4b22      	ldr	r3, [pc, #136]	; (8006da8 <xTaskResumeAll+0x1ec>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d22:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <xTaskResumeAll+0x1dc>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f47f af70 	bne.w	8006c0c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006d32:	f000 fbd5 	bl	80074e0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d36:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <xTaskResumeAll+0x1f0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d010      	beq.n	8006d64 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006d42:	f000 f843 	bl	8006dcc <xTaskIncrementTick>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8006d4c:	4b16      	ldr	r3, [pc, #88]	; (8006da8 <xTaskResumeAll+0x1ec>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f1      	bne.n	8006d42 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <xTaskResumeAll+0x1f0>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006d64:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <xTaskResumeAll+0x1ec>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d009      	beq.n	8006d80 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006d70:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <xTaskResumeAll+0x1f4>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006d80:	f001 f97a 	bl	8008078 <vPortExitCritical>

    return xAlreadyYielded;
 8006d84:	69bb      	ldr	r3, [r7, #24]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000338 	.word	0x20000338
 8006d94:	20000310 	.word	0x20000310
 8006d98:	200002d0 	.word	0x200002d0
 8006d9c:	20000318 	.word	0x20000318
 8006da0:	20000214 	.word	0x20000214
 8006da4:	20000210 	.word	0x20000210
 8006da8:	20000324 	.word	0x20000324
 8006dac:	20000320 	.word	0x20000320
 8006db0:	e000ed04 	.word	0xe000ed04

08006db4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <uxTaskGetNumberOfTasks+0x14>)
 8006dba:	681b      	ldr	r3, [r3, #0]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000310 	.word	0x20000310

08006dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd6:	4b7d      	ldr	r3, [pc, #500]	; (8006fcc <xTaskIncrementTick+0x200>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 80ec 	bne.w	8006fb8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006de0:	4b7b      	ldr	r3, [pc, #492]	; (8006fd0 <xTaskIncrementTick+0x204>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3301      	adds	r3, #1
 8006de6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006de8:	4a79      	ldr	r2, [pc, #484]	; (8006fd0 <xTaskIncrementTick+0x204>)
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d120      	bne.n	8006e36 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006df4:	4b77      	ldr	r3, [pc, #476]	; (8006fd4 <xTaskIncrementTick+0x208>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <xTaskIncrementTick+0x48>
        __asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	607b      	str	r3, [r7, #4]
    }
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <xTaskIncrementTick+0x46>
 8006e14:	4b6f      	ldr	r3, [pc, #444]	; (8006fd4 <xTaskIncrementTick+0x208>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	61fb      	str	r3, [r7, #28]
 8006e1a:	4b6f      	ldr	r3, [pc, #444]	; (8006fd8 <xTaskIncrementTick+0x20c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a6d      	ldr	r2, [pc, #436]	; (8006fd4 <xTaskIncrementTick+0x208>)
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	4a6d      	ldr	r2, [pc, #436]	; (8006fd8 <xTaskIncrementTick+0x20c>)
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	4b6c      	ldr	r3, [pc, #432]	; (8006fdc <xTaskIncrementTick+0x210>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	4a6b      	ldr	r2, [pc, #428]	; (8006fdc <xTaskIncrementTick+0x210>)
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	f000 fb55 	bl	80074e0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006e36:	4b6a      	ldr	r3, [pc, #424]	; (8006fe0 <xTaskIncrementTick+0x214>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	f0c0 80a6 	bcc.w	8006f8e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e42:	4b64      	ldr	r3, [pc, #400]	; (8006fd4 <xTaskIncrementTick+0x208>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4c:	4b64      	ldr	r3, [pc, #400]	; (8006fe0 <xTaskIncrementTick+0x214>)
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e52:	601a      	str	r2, [r3, #0]
                    break;
 8006e54:	e09b      	b.n	8006f8e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e56:	4b5f      	ldr	r3, [pc, #380]	; (8006fd4 <xTaskIncrementTick+0x208>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006e66:	6a3a      	ldr	r2, [r7, #32]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d203      	bcs.n	8006e76 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006e6e:	4a5c      	ldr	r2, [pc, #368]	; (8006fe0 <xTaskIncrementTick+0x214>)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006e74:	e08b      	b.n	8006f8e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	613b      	str	r3, [r7, #16]
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	68d2      	ldr	r2, [r2, #12]
 8006e84:	609a      	str	r2, [r3, #8]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	6892      	ldr	r2, [r2, #8]
 8006e8e:	605a      	str	r2, [r3, #4]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	3304      	adds	r3, #4
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d103      	bne.n	8006ea4 <xTaskIncrementTick+0xd8>
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	605a      	str	r2, [r3, #4]
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	615a      	str	r2, [r3, #20]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	1e5a      	subs	r2, r3, #1
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01e      	beq.n	8006efa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	6a12      	ldr	r2, [r2, #32]
 8006eca:	609a      	str	r2, [r3, #8]
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	69d2      	ldr	r2, [r2, #28]
 8006ed4:	605a      	str	r2, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	3318      	adds	r3, #24
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d103      	bne.n	8006eea <xTaskIncrementTick+0x11e>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2200      	movs	r2, #0
 8006eee:	629a      	str	r2, [r3, #40]	; 0x28
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	1e5a      	subs	r2, r3, #1
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	2201      	movs	r2, #1
 8006f00:	409a      	lsls	r2, r3
 8006f02:	4b38      	ldr	r3, [pc, #224]	; (8006fe4 <xTaskIncrementTick+0x218>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	4a36      	ldr	r2, [pc, #216]	; (8006fe4 <xTaskIncrementTick+0x218>)
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4935      	ldr	r1, [pc, #212]	; (8006fe8 <xTaskIncrementTick+0x21c>)
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	60da      	str	r2, [r3, #12]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	3204      	adds	r2, #4
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	1d1a      	adds	r2, r3, #4
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	609a      	str	r2, [r3, #8]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <xTaskIncrementTick+0x21c>)
 8006f50:	441a      	add	r2, r3
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	615a      	str	r2, [r3, #20]
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5a:	4923      	ldr	r1, [pc, #140]	; (8006fe8 <xTaskIncrementTick+0x21c>)
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	1c59      	adds	r1, r3, #1
 8006f6a:	481f      	ldr	r0, [pc, #124]	; (8006fe8 <xTaskIncrementTick+0x21c>)
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4403      	add	r3, r0
 8006f76:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7c:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <xTaskIncrementTick+0x220>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	429a      	cmp	r2, r3
 8006f84:	f67f af5d 	bls.w	8006e42 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f8c:	e759      	b.n	8006e42 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f8e:	4b17      	ldr	r3, [pc, #92]	; (8006fec <xTaskIncrementTick+0x220>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	4914      	ldr	r1, [pc, #80]	; (8006fe8 <xTaskIncrementTick+0x21c>)
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d901      	bls.n	8006faa <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006faa:	4b11      	ldr	r3, [pc, #68]	; (8006ff0 <xTaskIncrementTick+0x224>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb6:	e004      	b.n	8006fc2 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006fb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <xTaskIncrementTick+0x228>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	4a0d      	ldr	r2, [pc, #52]	; (8006ff4 <xTaskIncrementTick+0x228>)
 8006fc0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3728      	adds	r7, #40	; 0x28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000338 	.word	0x20000338
 8006fd0:	20000314 	.word	0x20000314
 8006fd4:	200002c8 	.word	0x200002c8
 8006fd8:	200002cc 	.word	0x200002cc
 8006fdc:	20000328 	.word	0x20000328
 8006fe0:	20000330 	.word	0x20000330
 8006fe4:	20000318 	.word	0x20000318
 8006fe8:	20000214 	.word	0x20000214
 8006fec:	20000210 	.word	0x20000210
 8006ff0:	20000324 	.word	0x20000324
 8006ff4:	20000320 	.word	0x20000320

08006ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ffe:	4b27      	ldr	r3, [pc, #156]	; (800709c <vTaskSwitchContext+0xa4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007006:	4b26      	ldr	r3, [pc, #152]	; (80070a0 <vTaskSwitchContext+0xa8>)
 8007008:	2201      	movs	r2, #1
 800700a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800700c:	e03f      	b.n	800708e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800700e:	4b24      	ldr	r3, [pc, #144]	; (80070a0 <vTaskSwitchContext+0xa8>)
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007014:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <vTaskSwitchContext+0xac>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	fab3 f383 	clz	r3, r3
 8007020:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	f1c3 031f 	rsb	r3, r3, #31
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	491f      	ldr	r1, [pc, #124]	; (80070a8 <vTaskSwitchContext+0xb0>)
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <vTaskSwitchContext+0x5c>
        __asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	607b      	str	r3, [r7, #4]
    }
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <vTaskSwitchContext+0x5a>
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4a12      	ldr	r2, [pc, #72]	; (80070a8 <vTaskSwitchContext+0xb0>)
 8007060:	4413      	add	r3, r2
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3308      	adds	r3, #8
 8007076:	429a      	cmp	r2, r3
 8007078:	d104      	bne.n	8007084 <vTaskSwitchContext+0x8c>
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	605a      	str	r2, [r3, #4]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	4a08      	ldr	r2, [pc, #32]	; (80070ac <vTaskSwitchContext+0xb4>)
 800708c:	6013      	str	r3, [r2, #0]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000338 	.word	0x20000338
 80070a0:	20000324 	.word	0x20000324
 80070a4:	20000318 	.word	0x20000318
 80070a8:	20000214 	.word	0x20000214
 80070ac:	20000210 	.word	0x20000210

080070b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	60fb      	str	r3, [r7, #12]
    }
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070d6:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <vTaskPlaceOnEventList+0x44>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3318      	adds	r3, #24
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fe fdc7 	bl	8005c72 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070e4:	2101      	movs	r1, #1
 80070e6:	6838      	ldr	r0, [r7, #0]
 80070e8:	f000 fde8 	bl	8007cbc <prvAddCurrentTaskToDelayedList>
}
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000210 	.word	0x20000210

080070f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b08b      	sub	sp, #44	; 0x2c
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	60fb      	str	r3, [r7, #12]
    }
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	61fb      	str	r3, [r7, #28]
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	6a3a      	ldr	r2, [r7, #32]
 8007130:	6a12      	ldr	r2, [r2, #32]
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	6a3a      	ldr	r2, [r7, #32]
 800713a:	69d2      	ldr	r2, [r2, #28]
 800713c:	605a      	str	r2, [r3, #4]
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	3318      	adds	r3, #24
 8007146:	429a      	cmp	r2, r3
 8007148:	d103      	bne.n	8007152 <xTaskRemoveFromEventList+0x5a>
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	6a1a      	ldr	r2, [r3, #32]
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2200      	movs	r2, #0
 8007156:	629a      	str	r2, [r3, #40]	; 0x28
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	1e5a      	subs	r2, r3, #1
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007162:	4b4a      	ldr	r3, [pc, #296]	; (800728c <xTaskRemoveFromEventList+0x194>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d15e      	bne.n	8007228 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	6a3a      	ldr	r2, [r7, #32]
 8007176:	68d2      	ldr	r2, [r2, #12]
 8007178:	609a      	str	r2, [r3, #8]
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	6a3a      	ldr	r2, [r7, #32]
 8007180:	6892      	ldr	r2, [r2, #8]
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	3304      	adds	r3, #4
 800718c:	429a      	cmp	r2, r3
 800718e:	d103      	bne.n	8007198 <xTaskRemoveFromEventList+0xa0>
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	605a      	str	r2, [r3, #4]
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	2200      	movs	r2, #0
 800719c:	615a      	str	r2, [r3, #20]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	1e5a      	subs	r2, r3, #1
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	2201      	movs	r2, #1
 80071ae:	409a      	lsls	r2, r3
 80071b0:	4b37      	ldr	r3, [pc, #220]	; (8007290 <xTaskRemoveFromEventList+0x198>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	4a36      	ldr	r2, [pc, #216]	; (8007290 <xTaskRemoveFromEventList+0x198>)
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	4935      	ldr	r1, [pc, #212]	; (8007294 <xTaskRemoveFromEventList+0x19c>)
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	3304      	adds	r3, #4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	609a      	str	r2, [r3, #8]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	60da      	str	r2, [r3, #12]
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	3204      	adds	r2, #4
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	1d1a      	adds	r2, r3, #4
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	609a      	str	r2, [r3, #8]
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4a25      	ldr	r2, [pc, #148]	; (8007294 <xTaskRemoveFromEventList+0x19c>)
 80071fe:	441a      	add	r2, r3
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	615a      	str	r2, [r3, #20]
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4922      	ldr	r1, [pc, #136]	; (8007294 <xTaskRemoveFromEventList+0x19c>)
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	1c59      	adds	r1, r3, #1
 8007218:	481e      	ldr	r0, [pc, #120]	; (8007294 <xTaskRemoveFromEventList+0x19c>)
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4403      	add	r3, r0
 8007224:	6019      	str	r1, [r3, #0]
 8007226:	e01b      	b.n	8007260 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007228:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <xTaskRemoveFromEventList+0x1a0>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	61da      	str	r2, [r3, #28]
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	621a      	str	r2, [r3, #32]
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	6a3a      	ldr	r2, [r7, #32]
 8007242:	3218      	adds	r2, #24
 8007244:	605a      	str	r2, [r3, #4]
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f103 0218 	add.w	r2, r3, #24
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	4a11      	ldr	r2, [pc, #68]	; (8007298 <xTaskRemoveFromEventList+0x1a0>)
 8007254:	629a      	str	r2, [r3, #40]	; 0x28
 8007256:	4b10      	ldr	r3, [pc, #64]	; (8007298 <xTaskRemoveFromEventList+0x1a0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	4a0e      	ldr	r2, [pc, #56]	; (8007298 <xTaskRemoveFromEventList+0x1a0>)
 800725e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <xTaskRemoveFromEventList+0x1a4>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	429a      	cmp	r2, r3
 800726c:	d905      	bls.n	800727a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800726e:	2301      	movs	r3, #1
 8007270:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007272:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <xTaskRemoveFromEventList+0x1a8>)
 8007274:	2201      	movs	r2, #1
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e001      	b.n	800727e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007280:	4618      	mov	r0, r3
 8007282:	372c      	adds	r7, #44	; 0x2c
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	20000338 	.word	0x20000338
 8007290:	20000318 	.word	0x20000318
 8007294:	20000214 	.word	0x20000214
 8007298:	200002d0 	.word	0x200002d0
 800729c:	20000210 	.word	0x20000210
 80072a0:	20000324 	.word	0x20000324

080072a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <vTaskInternalSetTimeOutState+0x24>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <vTaskInternalSetTimeOutState+0x28>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	605a      	str	r2, [r3, #4]
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	20000328 	.word	0x20000328
 80072cc:	20000314 	.word	0x20000314

080072d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
    }
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	60fb      	str	r3, [r7, #12]
    }
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007312:	f000 fe81 	bl	8008018 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007316:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <xTaskCheckForTimeOut+0xc4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d102      	bne.n	8007336 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	e026      	b.n	8007384 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b17      	ldr	r3, [pc, #92]	; (8007398 <xTaskCheckForTimeOut+0xc8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d00a      	beq.n	8007358 <xTaskCheckForTimeOut+0x88>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	429a      	cmp	r2, r3
 800734a:	d305      	bcc.n	8007358 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800734c:	2301      	movs	r3, #1
 800734e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e015      	b.n	8007384 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	429a      	cmp	r2, r3
 8007360:	d20b      	bcs.n	800737a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	1ad2      	subs	r2, r2, r3
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff ff98 	bl	80072a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007374:	2300      	movs	r3, #0
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	e004      	b.n	8007384 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007384:	f000 fe78 	bl	8008078 <vPortExitCritical>

    return xReturn;
 8007388:	69fb      	ldr	r3, [r7, #28]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000314 	.word	0x20000314
 8007398:	20000328 	.word	0x20000328

0800739c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80073a0:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <vTaskMissedYield+0x14>)
 80073a2:	2201      	movs	r2, #1
 80073a4:	601a      	str	r2, [r3, #0]
}
 80073a6:	bf00      	nop
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	20000324 	.word	0x20000324

080073b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80073bc:	f000 f852 	bl	8007464 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073c0:	4b06      	ldr	r3, [pc, #24]	; (80073dc <prvIdleTask+0x28>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d9f9      	bls.n	80073bc <prvIdleTask+0x8>
            {
                taskYIELD();
 80073c8:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <prvIdleTask+0x2c>)
 80073ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80073d8:	e7f0      	b.n	80073bc <prvIdleTask+0x8>
 80073da:	bf00      	nop
 80073dc:	20000214 	.word	0x20000214
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073ea:	2300      	movs	r3, #0
 80073ec:	607b      	str	r3, [r7, #4]
 80073ee:	e00c      	b.n	800740a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4a12      	ldr	r2, [pc, #72]	; (8007444 <prvInitialiseTaskLists+0x60>)
 80073fc:	4413      	add	r3, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fc0a 	bl	8005c18 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3301      	adds	r3, #1
 8007408:	607b      	str	r3, [r7, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b06      	cmp	r3, #6
 800740e:	d9ef      	bls.n	80073f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007410:	480d      	ldr	r0, [pc, #52]	; (8007448 <prvInitialiseTaskLists+0x64>)
 8007412:	f7fe fc01 	bl	8005c18 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007416:	480d      	ldr	r0, [pc, #52]	; (800744c <prvInitialiseTaskLists+0x68>)
 8007418:	f7fe fbfe 	bl	8005c18 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800741c:	480c      	ldr	r0, [pc, #48]	; (8007450 <prvInitialiseTaskLists+0x6c>)
 800741e:	f7fe fbfb 	bl	8005c18 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8007422:	480c      	ldr	r0, [pc, #48]	; (8007454 <prvInitialiseTaskLists+0x70>)
 8007424:	f7fe fbf8 	bl	8005c18 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8007428:	480b      	ldr	r0, [pc, #44]	; (8007458 <prvInitialiseTaskLists+0x74>)
 800742a:	f7fe fbf5 	bl	8005c18 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800742e:	4b0b      	ldr	r3, [pc, #44]	; (800745c <prvInitialiseTaskLists+0x78>)
 8007430:	4a05      	ldr	r2, [pc, #20]	; (8007448 <prvInitialiseTaskLists+0x64>)
 8007432:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007434:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <prvInitialiseTaskLists+0x7c>)
 8007436:	4a05      	ldr	r2, [pc, #20]	; (800744c <prvInitialiseTaskLists+0x68>)
 8007438:	601a      	str	r2, [r3, #0]
}
 800743a:	bf00      	nop
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20000214 	.word	0x20000214
 8007448:	200002a0 	.word	0x200002a0
 800744c:	200002b4 	.word	0x200002b4
 8007450:	200002d0 	.word	0x200002d0
 8007454:	200002e4 	.word	0x200002e4
 8007458:	200002fc 	.word	0x200002fc
 800745c:	200002c8 	.word	0x200002c8
 8007460:	200002cc 	.word	0x200002cc

08007464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800746a:	e019      	b.n	80074a0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800746c:	f000 fdd4 	bl	8008018 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007470:	4b10      	ldr	r3, [pc, #64]	; (80074b4 <prvCheckTasksWaitingTermination+0x50>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe fc31 	bl	8005ce4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8007482:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <prvCheckTasksWaitingTermination+0x54>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3b01      	subs	r3, #1
 8007488:	4a0b      	ldr	r2, [pc, #44]	; (80074b8 <prvCheckTasksWaitingTermination+0x54>)
 800748a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800748c:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <prvCheckTasksWaitingTermination+0x58>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3b01      	subs	r3, #1
 8007492:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <prvCheckTasksWaitingTermination+0x58>)
 8007494:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007496:	f000 fdef 	bl	8008078 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f810 	bl	80074c0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074a0:	4b06      	ldr	r3, [pc, #24]	; (80074bc <prvCheckTasksWaitingTermination+0x58>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e1      	bne.n	800746c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	200002e4 	.word	0x200002e4
 80074b8:	20000310 	.word	0x20000310
 80074bc:	200002f8 	.word	0x200002f8

080074c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 ff7f 	bl	80083d0 <vPortFree>
            vPortFree( pxTCB );
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 ff7c 	bl	80083d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074e4:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <prvResetNextTaskUnblockTime+0x30>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d104      	bne.n	80074f8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <prvResetNextTaskUnblockTime+0x34>)
 80074f0:	f04f 32ff 	mov.w	r2, #4294967295
 80074f4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80074f6:	e005      	b.n	8007504 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <prvResetNextTaskUnblockTime+0x30>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a04      	ldr	r2, [pc, #16]	; (8007514 <prvResetNextTaskUnblockTime+0x34>)
 8007502:	6013      	str	r3, [r2, #0]
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	200002c8 	.word	0x200002c8
 8007514:	20000330 	.word	0x20000330

08007518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <xTaskGetSchedulerState+0x34>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007526:	2301      	movs	r3, #1
 8007528:	607b      	str	r3, [r7, #4]
 800752a:	e008      	b.n	800753e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800752c:	4b08      	ldr	r3, [pc, #32]	; (8007550 <xTaskGetSchedulerState+0x38>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007534:	2302      	movs	r3, #2
 8007536:	607b      	str	r3, [r7, #4]
 8007538:	e001      	b.n	800753e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800753a:	2300      	movs	r3, #0
 800753c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800753e:	687b      	ldr	r3, [r7, #4]
    }
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	2000031c 	.word	0x2000031c
 8007550:	20000338 	.word	0x20000338

08007554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 808c 	beq.w	8007684 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800756c:	4b48      	ldr	r3, [pc, #288]	; (8007690 <xTaskPriorityDisinherit+0x13c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	429a      	cmp	r2, r3
 8007574:	d00a      	beq.n	800758c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	613b      	str	r3, [r7, #16]
    }
 8007588:	bf00      	nop
 800758a:	e7fe      	b.n	800758a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	60fb      	str	r3, [r7, #12]
    }
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ae:	1e5a      	subs	r2, r3, #1
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075bc:	429a      	cmp	r2, r3
 80075be:	d061      	beq.n	8007684 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d15d      	bne.n	8007684 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	3304      	adds	r3, #4
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe fb89 	bl	8005ce4 <uxListRemove>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	2201      	movs	r2, #1
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43da      	mvns	r2, r3
 80075e4:	4b2b      	ldr	r3, [pc, #172]	; (8007694 <xTaskPriorityDisinherit+0x140>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4013      	ands	r3, r2
 80075ea:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <xTaskPriorityDisinherit+0x140>)
 80075ec:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	f1c3 0207 	rsb	r2, r3, #7
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	2201      	movs	r2, #1
 8007608:	409a      	lsls	r2, r3
 800760a:	4b22      	ldr	r3, [pc, #136]	; (8007694 <xTaskPriorityDisinherit+0x140>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	4a20      	ldr	r2, [pc, #128]	; (8007694 <xTaskPriorityDisinherit+0x140>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007618:	491f      	ldr	r1, [pc, #124]	; (8007698 <xTaskPriorityDisinherit+0x144>)
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	440b      	add	r3, r1
 8007624:	3304      	adds	r3, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	609a      	str	r2, [r3, #8]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	60da      	str	r2, [r3, #12]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	3204      	adds	r2, #4
 8007640:	605a      	str	r2, [r3, #4]
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	1d1a      	adds	r2, r3, #4
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	609a      	str	r2, [r3, #8]
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4a10      	ldr	r2, [pc, #64]	; (8007698 <xTaskPriorityDisinherit+0x144>)
 8007658:	441a      	add	r2, r3
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	615a      	str	r2, [r3, #20]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	490d      	ldr	r1, [pc, #52]	; (8007698 <xTaskPriorityDisinherit+0x144>)
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	1c59      	adds	r1, r3, #1
 8007672:	4809      	ldr	r0, [pc, #36]	; (8007698 <xTaskPriorityDisinherit+0x144>)
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4403      	add	r3, r0
 800767e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007684:	69fb      	ldr	r3, [r7, #28]
    }
 8007686:	4618      	mov	r0, r3
 8007688:	3720      	adds	r7, #32
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000210 	.word	0x20000210
 8007694:	20000318 	.word	0x20000318
 8007698:	20000214 	.word	0x20000214

0800769c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d90a      	bls.n	80076c6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
    }
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80076c6:	f000 fca7 	bl	8008018 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80076ca:	4b34      	ldr	r3, [pc, #208]	; (800779c <xTaskGenericNotifyWait+0x100>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	3360      	adds	r3, #96	; 0x60
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d024      	beq.n	8007726 <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80076dc:	4b2f      	ldr	r3, [pc, #188]	; (800779c <xTaskGenericNotifyWait+0x100>)
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3314      	adds	r3, #20
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	6859      	ldr	r1, [r3, #4]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	43db      	mvns	r3, r3
 80076ee:	4019      	ands	r1, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3314      	adds	r3, #20
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80076fa:	4b28      	ldr	r3, [pc, #160]	; (800779c <xTaskGenericNotifyWait+0x100>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4413      	add	r3, r2
 8007702:	3360      	adds	r3, #96	; 0x60
 8007704:	2201      	movs	r2, #1
 8007706:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00b      	beq.n	8007726 <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800770e:	2101      	movs	r1, #1
 8007710:	6a38      	ldr	r0, [r7, #32]
 8007712:	f000 fad3 	bl	8007cbc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8007716:	4b22      	ldr	r3, [pc, #136]	; (80077a0 <xTaskGenericNotifyWait+0x104>)
 8007718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007726:	f000 fca7 	bl	8008078 <vPortExitCritical>

        taskENTER_CRITICAL();
 800772a:	f000 fc75 	bl	8008018 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8007734:	4b19      	ldr	r3, [pc, #100]	; (800779c <xTaskGenericNotifyWait+0x100>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3314      	adds	r3, #20
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007746:	4b15      	ldr	r3, [pc, #84]	; (800779c <xTaskGenericNotifyWait+0x100>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	3360      	adds	r3, #96	; 0x60
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d002      	beq.n	800775e <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	e010      	b.n	8007780 <xTaskGenericNotifyWait+0xe4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800775e:	4b0f      	ldr	r3, [pc, #60]	; (800779c <xTaskGenericNotifyWait+0x100>)
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3314      	adds	r3, #20
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	6859      	ldr	r1, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	43db      	mvns	r3, r3
 8007770:	4019      	ands	r1, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3314      	adds	r3, #20
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8007780:	4b06      	ldr	r3, [pc, #24]	; (800779c <xTaskGenericNotifyWait+0x100>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	3360      	adds	r3, #96	; 0x60
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800778e:	f000 fc73 	bl	8008078 <vPortExitCritical>

        return xReturn;
 8007792:	697b      	ldr	r3, [r7, #20]
    }
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000210 	.word	0x20000210
 80077a0:	e000ed04 	.word	0xe000ed04

080077a4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08e      	sub	sp, #56	; 0x38
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
 80077b0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80077b2:	2301      	movs	r3, #1
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d90a      	bls.n	80077d2 <xTaskGenericNotify+0x2e>
        __asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	623b      	str	r3, [r7, #32]
    }
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <xTaskGenericNotify+0x4a>
        __asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	61fb      	str	r3, [r7, #28]
    }
 80077ea:	bf00      	nop
 80077ec:	e7fe      	b.n	80077ec <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80077f2:	f000 fc11 	bl	8008018 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80077f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80077fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3314      	adds	r3, #20
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800780c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4413      	add	r3, r2
 8007812:	3360      	adds	r3, #96	; 0x60
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800781a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	4413      	add	r3, r2
 8007820:	3360      	adds	r3, #96	; 0x60
 8007822:	2202      	movs	r2, #2
 8007824:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	2b04      	cmp	r3, #4
 800782a:	d841      	bhi.n	80078b0 <xTaskGenericNotify+0x10c>
 800782c:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <xTaskGenericNotify+0x90>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	080078cf 	.word	0x080078cf
 8007838:	08007849 	.word	0x08007849
 800783c:	08007867 	.word	0x08007867
 8007840:	08007883 	.word	0x08007883
 8007844:	08007893 	.word	0x08007893
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	3314      	adds	r3, #20
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	431a      	orrs	r2, r3
 8007858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	3314      	adds	r3, #20
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	440b      	add	r3, r1
 8007862:	605a      	str	r2, [r3, #4]
                    break;
 8007864:	e036      	b.n	80078d4 <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	3314      	adds	r3, #20
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	3314      	adds	r3, #20
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	605a      	str	r2, [r3, #4]
                    break;
 8007880:	e028      	b.n	80078d4 <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	3314      	adds	r3, #20
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	605a      	str	r2, [r3, #4]
                    break;
 8007890:	e020      	b.n	80078d4 <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007896:	2b02      	cmp	r3, #2
 8007898:	d007      	beq.n	80078aa <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800789a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	3314      	adds	r3, #20
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80078a8:	e014      	b.n	80078d4 <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80078ae:	e011      	b.n	80078d4 <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80078b0:	4b4c      	ldr	r3, [pc, #304]	; (80079e4 <xTaskGenericNotify+0x240>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00c      	beq.n	80078d2 <xTaskGenericNotify+0x12e>
        __asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	61bb      	str	r3, [r7, #24]
    }
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xTaskGenericNotify+0x128>
                    break;
 80078ce:	bf00      	nop
 80078d0:	e000      	b.n	80078d4 <xTaskGenericNotify+0x130>

                    break;
 80078d2:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80078d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d17b      	bne.n	80079d4 <xTaskGenericNotify+0x230>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e8:	68d2      	ldr	r2, [r2, #12]
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f2:	6892      	ldr	r2, [r2, #8]
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	3304      	adds	r3, #4
 80078fe:	429a      	cmp	r2, r3
 8007900:	d103      	bne.n	800790a <xTaskGenericNotify+0x166>
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	2200      	movs	r2, #0
 800790e:	615a      	str	r2, [r3, #20]
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	1e5a      	subs	r2, r3, #1
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	2201      	movs	r2, #1
 8007920:	409a      	lsls	r2, r3
 8007922:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <xTaskGenericNotify+0x244>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4313      	orrs	r3, r2
 8007928:	4a2f      	ldr	r2, [pc, #188]	; (80079e8 <xTaskGenericNotify+0x244>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	492e      	ldr	r1, [pc, #184]	; (80079ec <xTaskGenericNotify+0x248>)
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	440b      	add	r3, r1
 800793c:	3304      	adds	r3, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007946:	609a      	str	r2, [r3, #8]
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	60da      	str	r2, [r3, #12]
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007956:	3204      	adds	r2, #4
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	1d1a      	adds	r2, r3, #4
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	609a      	str	r2, [r3, #8]
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <xTaskGenericNotify+0x248>)
 8007970:	441a      	add	r2, r3
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	615a      	str	r2, [r3, #20]
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	491c      	ldr	r1, [pc, #112]	; (80079ec <xTaskGenericNotify+0x248>)
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	440b      	add	r3, r1
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	1c59      	adds	r1, r3, #1
 800798a:	4818      	ldr	r0, [pc, #96]	; (80079ec <xTaskGenericNotify+0x248>)
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4403      	add	r3, r0
 8007996:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <xTaskGenericNotify+0x212>
        __asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	617b      	str	r3, [r7, #20]
    }
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xTaskGenericNotify+0x210>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ba:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <xTaskGenericNotify+0x24c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d907      	bls.n	80079d4 <xTaskGenericNotify+0x230>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80079c4:	4b0b      	ldr	r3, [pc, #44]	; (80079f4 <xTaskGenericNotify+0x250>)
 80079c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80079d4:	f000 fb50 	bl	8008078 <vPortExitCritical>

        return xReturn;
 80079d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80079da:	4618      	mov	r0, r3
 80079dc:	3738      	adds	r7, #56	; 0x38
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000314 	.word	0x20000314
 80079e8:	20000318 	.word	0x20000318
 80079ec:	20000214 	.word	0x20000214
 80079f0:	20000210 	.word	0x20000210
 80079f4:	e000ed04 	.word	0xe000ed04

080079f8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b092      	sub	sp, #72	; 0x48
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8007a06:	2301      	movs	r3, #1
 8007a08:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d90a      	bls.n	8007a42 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a42:	f000 fbcb 	bl	80081dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8007a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	623a      	str	r2, [r7, #32]
 8007a60:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8007a62:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8007a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	3314      	adds	r3, #20
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007a7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	3360      	adds	r3, #96	; 0x60
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4413      	add	r3, r2
 8007a90:	3360      	adds	r3, #96	; 0x60
 8007a92:	2202      	movs	r2, #2
 8007a94:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d841      	bhi.n	8007b20 <xTaskGenericNotifyFromISR+0x128>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <xTaskGenericNotifyFromISR+0xac>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007b3f 	.word	0x08007b3f
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007ad7 	.word	0x08007ad7
 8007ab0:	08007af3 	.word	0x08007af3
 8007ab4:	08007b03 	.word	0x08007b03
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	3314      	adds	r3, #20
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	3314      	adds	r3, #20
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	605a      	str	r2, [r3, #4]
                    break;
 8007ad4:	e036      	b.n	8007b44 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	3314      	adds	r3, #20
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3314      	adds	r3, #20
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	605a      	str	r2, [r3, #4]
                    break;
 8007af0:	e028      	b.n	8007b44 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3314      	adds	r3, #20
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	605a      	str	r2, [r3, #4]
                    break;
 8007b00:	e020      	b.n	8007b44 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007b02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d007      	beq.n	8007b1a <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	3314      	adds	r3, #20
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007b18:	e014      	b.n	8007b44 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8007b1e:	e011      	b.n	8007b44 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007b20:	4b5f      	ldr	r3, [pc, #380]	; (8007ca0 <xTaskGenericNotifyFromISR+0x2a8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00c      	beq.n	8007b42 <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	61bb      	str	r3, [r7, #24]
    }
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xTaskGenericNotifyFromISR+0x144>
                    break;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8007b42:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007b44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f040 809e 	bne.w	8007c8a <xTaskGenericNotifyFromISR+0x292>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <xTaskGenericNotifyFromISR+0x174>
        __asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	617b      	str	r3, [r7, #20]
    }
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b6c:	4b4d      	ldr	r3, [pc, #308]	; (8007ca4 <xTaskGenericNotifyFromISR+0x2ac>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d15e      	bne.n	8007c32 <xTaskGenericNotifyFromISR+0x23a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	633b      	str	r3, [r7, #48]	; 0x30
 8007b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b80:	68d2      	ldr	r2, [r2, #12]
 8007b82:	609a      	str	r2, [r3, #8]
 8007b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b8a:	6892      	ldr	r2, [r2, #8]
 8007b8c:	605a      	str	r2, [r3, #4]
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b94:	3304      	adds	r3, #4
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d103      	bne.n	8007ba2 <xTaskGenericNotifyFromISR+0x1aa>
 8007b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	615a      	str	r2, [r3, #20]
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	1e5a      	subs	r2, r3, #1
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	409a      	lsls	r2, r3
 8007bba:	4b3b      	ldr	r3, [pc, #236]	; (8007ca8 <xTaskGenericNotifyFromISR+0x2b0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	4a39      	ldr	r2, [pc, #228]	; (8007ca8 <xTaskGenericNotifyFromISR+0x2b0>)
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc8:	4938      	ldr	r1, [pc, #224]	; (8007cac <xTaskGenericNotifyFromISR+0x2b4>)
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be6:	60da      	str	r2, [r3, #12]
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bee:	3204      	adds	r2, #4
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf4:	1d1a      	adds	r2, r3, #4
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	609a      	str	r2, [r3, #8]
 8007bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a29      	ldr	r2, [pc, #164]	; (8007cac <xTaskGenericNotifyFromISR+0x2b4>)
 8007c08:	441a      	add	r2, r3
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0c:	615a      	str	r2, [r3, #20]
 8007c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c12:	4926      	ldr	r1, [pc, #152]	; (8007cac <xTaskGenericNotifyFromISR+0x2b4>)
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	1c59      	adds	r1, r3, #1
 8007c22:	4822      	ldr	r0, [pc, #136]	; (8007cac <xTaskGenericNotifyFromISR+0x2b4>)
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4403      	add	r3, r0
 8007c2e:	6019      	str	r1, [r3, #0]
 8007c30:	e01b      	b.n	8007c6a <xTaskGenericNotifyFromISR+0x272>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007c32:	4b1f      	ldr	r3, [pc, #124]	; (8007cb0 <xTaskGenericNotifyFromISR+0x2b8>)
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34
 8007c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c3c:	61da      	str	r2, [r3, #28]
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c44:	621a      	str	r2, [r3, #32]
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c4c:	3218      	adds	r2, #24
 8007c4e:	605a      	str	r2, [r3, #4]
 8007c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c52:	f103 0218 	add.w	r2, r3, #24
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c58:	609a      	str	r2, [r3, #8]
 8007c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c5c:	4a14      	ldr	r2, [pc, #80]	; (8007cb0 <xTaskGenericNotifyFromISR+0x2b8>)
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c60:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <xTaskGenericNotifyFromISR+0x2b8>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	4a12      	ldr	r2, [pc, #72]	; (8007cb0 <xTaskGenericNotifyFromISR+0x2b8>)
 8007c68:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6e:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <xTaskGenericNotifyFromISR+0x2bc>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d908      	bls.n	8007c8a <xTaskGenericNotifyFromISR+0x292>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <xTaskGenericNotifyFromISR+0x28c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c80:	2201      	movs	r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007c84:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <xTaskGenericNotifyFromISR+0x2c0>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8c:	613b      	str	r3, [r7, #16]
        __asm volatile
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f383 8811 	msr	BASEPRI, r3
    }
 8007c94:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3748      	adds	r7, #72	; 0x48
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000314 	.word	0x20000314
 8007ca4:	20000338 	.word	0x20000338
 8007ca8:	20000318 	.word	0x20000318
 8007cac:	20000214 	.word	0x20000214
 8007cb0:	200002d0 	.word	0x200002d0
 8007cb4:	20000210 	.word	0x20000210
 8007cb8:	20000324 	.word	0x20000324

08007cbc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007cc6:	4b36      	ldr	r3, [pc, #216]	; (8007da0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ccc:	4b35      	ldr	r3, [pc, #212]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe f806 	bl	8005ce4 <uxListRemove>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10b      	bne.n	8007cf6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007cde:	4b31      	ldr	r3, [pc, #196]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	43da      	mvns	r2, r3
 8007cec:	4b2e      	ldr	r3, [pc, #184]	; (8007da8 <prvAddCurrentTaskToDelayedList+0xec>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	4a2d      	ldr	r2, [pc, #180]	; (8007da8 <prvAddCurrentTaskToDelayedList+0xec>)
 8007cf4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d124      	bne.n	8007d48 <prvAddCurrentTaskToDelayedList+0x8c>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d021      	beq.n	8007d48 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d04:	4b29      	ldr	r3, [pc, #164]	; (8007dac <prvAddCurrentTaskToDelayedList+0xf0>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	4b26      	ldr	r3, [pc, #152]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	609a      	str	r2, [r3, #8]
 8007d12:	4b24      	ldr	r3, [pc, #144]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	6892      	ldr	r2, [r2, #8]
 8007d1a:	60da      	str	r2, [r3, #12]
 8007d1c:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	3204      	adds	r2, #4
 8007d26:	605a      	str	r2, [r3, #4]
 8007d28:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	1d1a      	adds	r2, r3, #4
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	609a      	str	r2, [r3, #8]
 8007d32:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1d      	ldr	r2, [pc, #116]	; (8007dac <prvAddCurrentTaskToDelayedList+0xf0>)
 8007d38:	615a      	str	r2, [r3, #20]
 8007d3a:	4b1c      	ldr	r3, [pc, #112]	; (8007dac <prvAddCurrentTaskToDelayedList+0xf0>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	4a1a      	ldr	r2, [pc, #104]	; (8007dac <prvAddCurrentTaskToDelayedList+0xf0>)
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007d46:	e026      	b.n	8007d96 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d50:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d209      	bcs.n	8007d74 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d60:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f7fd ff80 	bl	8005c72 <vListInsert>
}
 8007d72:	e010      	b.n	8007d96 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d74:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4610      	mov	r0, r2
 8007d82:	f7fd ff76 	bl	8005c72 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007d86:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d202      	bcs.n	8007d96 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007d90:	4a09      	ldr	r2, [pc, #36]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6013      	str	r3, [r2, #0]
}
 8007d96:	bf00      	nop
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000314 	.word	0x20000314
 8007da4:	20000210 	.word	0x20000210
 8007da8:	20000318 	.word	0x20000318
 8007dac:	200002fc 	.word	0x200002fc
 8007db0:	200002cc 	.word	0x200002cc
 8007db4:	200002c8 	.word	0x200002c8
 8007db8:	20000330 	.word	0x20000330

08007dbc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3b04      	subs	r3, #4
 8007dcc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3b04      	subs	r3, #4
 8007dda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f023 0201 	bic.w	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3b04      	subs	r3, #4
 8007dea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007dec:	4a0c      	ldr	r2, [pc, #48]	; (8007e20 <pxPortInitialiseStack+0x64>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b14      	subs	r3, #20
 8007df6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3b04      	subs	r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f06f 0202 	mvn.w	r2, #2
 8007e0a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3b20      	subs	r3, #32
 8007e10:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007e12:	68fb      	ldr	r3, [r7, #12]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	08007e25 	.word	0x08007e25

08007e24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007e2e:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <prvTaskExitError+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d00a      	beq.n	8007e4e <prvTaskExitError+0x2a>
        __asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	60fb      	str	r3, [r7, #12]
    }
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <prvTaskExitError+0x28>
        __asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	60bb      	str	r3, [r7, #8]
    }
 8007e60:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007e62:	bf00      	nop
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0fc      	beq.n	8007e64 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007e6a:	bf00      	nop
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	20000018 	.word	0x20000018
 8007e7c:	00000000 	.word	0x00000000

08007e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <pxCurrentTCBConst2>)
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	6808      	ldr	r0, [r1, #0]
 8007e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	f380 8809 	msr	PSP, r0
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8811 	msr	BASEPRI, r0
 8007e9a:	4770      	bx	lr
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst2>:
 8007ea0:	20000210 	.word	0x20000210
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007ea8:	4808      	ldr	r0, [pc, #32]	; (8007ecc <prvPortStartFirstTask+0x24>)
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	6800      	ldr	r0, [r0, #0]
 8007eae:	f380 8808 	msr	MSP, r0
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8814 	msr	CONTROL, r0
 8007eba:	b662      	cpsie	i
 8007ebc:	b661      	cpsie	f
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	df00      	svc	0
 8007ec8:	bf00      	nop
 8007eca:	0000      	.short	0x0000
 8007ecc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop

08007ed4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007eda:	4b46      	ldr	r3, [pc, #280]	; (8007ff4 <xPortStartScheduler+0x120>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a46      	ldr	r2, [pc, #280]	; (8007ff8 <xPortStartScheduler+0x124>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d10a      	bne.n	8007efa <xPortStartScheduler+0x26>
        __asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	613b      	str	r3, [r7, #16]
    }
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007efa:	4b3e      	ldr	r3, [pc, #248]	; (8007ff4 <xPortStartScheduler+0x120>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a3f      	ldr	r2, [pc, #252]	; (8007ffc <xPortStartScheduler+0x128>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d10a      	bne.n	8007f1a <xPortStartScheduler+0x46>
        __asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	60fb      	str	r3, [r7, #12]
    }
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f1a:	4b39      	ldr	r3, [pc, #228]	; (8008000 <xPortStartScheduler+0x12c>)
 8007f1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	22ff      	movs	r2, #255	; 0xff
 8007f2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	4b31      	ldr	r3, [pc, #196]	; (8008004 <xPortStartScheduler+0x130>)
 8007f40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f42:	4b31      	ldr	r3, [pc, #196]	; (8008008 <xPortStartScheduler+0x134>)
 8007f44:	2207      	movs	r2, #7
 8007f46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f48:	e009      	b.n	8007f5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8007f4a:	4b2f      	ldr	r3, [pc, #188]	; (8008008 <xPortStartScheduler+0x134>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	4a2d      	ldr	r2, [pc, #180]	; (8008008 <xPortStartScheduler+0x134>)
 8007f52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f66:	2b80      	cmp	r3, #128	; 0x80
 8007f68:	d0ef      	beq.n	8007f4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f6a:	4b27      	ldr	r3, [pc, #156]	; (8008008 <xPortStartScheduler+0x134>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1c3 0307 	rsb	r3, r3, #7
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d00a      	beq.n	8007f8c <xPortStartScheduler+0xb8>
        __asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60bb      	str	r3, [r7, #8]
    }
 8007f88:	bf00      	nop
 8007f8a:	e7fe      	b.n	8007f8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f8c:	4b1e      	ldr	r3, [pc, #120]	; (8008008 <xPortStartScheduler+0x134>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	4a1d      	ldr	r2, [pc, #116]	; (8008008 <xPortStartScheduler+0x134>)
 8007f94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f96:	4b1c      	ldr	r3, [pc, #112]	; (8008008 <xPortStartScheduler+0x134>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f9e:	4a1a      	ldr	r2, [pc, #104]	; (8008008 <xPortStartScheduler+0x134>)
 8007fa0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007faa:	4b18      	ldr	r3, [pc, #96]	; (800800c <xPortStartScheduler+0x138>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a17      	ldr	r2, [pc, #92]	; (800800c <xPortStartScheduler+0x138>)
 8007fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <xPortStartScheduler+0x138>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a14      	ldr	r2, [pc, #80]	; (800800c <xPortStartScheduler+0x138>)
 8007fbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007fc2:	f000 f8db 	bl	800817c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007fc6:	4b12      	ldr	r3, [pc, #72]	; (8008010 <xPortStartScheduler+0x13c>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007fcc:	f000 f8fa 	bl	80081c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fd0:	4b10      	ldr	r3, [pc, #64]	; (8008014 <xPortStartScheduler+0x140>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a0f      	ldr	r2, [pc, #60]	; (8008014 <xPortStartScheduler+0x140>)
 8007fd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007fdc:	f7ff ff64 	bl	8007ea8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007fe0:	f7ff f80a 	bl	8006ff8 <vTaskSwitchContext>
    prvTaskExitError();
 8007fe4:	f7ff ff1e 	bl	8007e24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed00 	.word	0xe000ed00
 8007ff8:	410fc271 	.word	0x410fc271
 8007ffc:	410fc270 	.word	0x410fc270
 8008000:	e000e400 	.word	0xe000e400
 8008004:	2000033c 	.word	0x2000033c
 8008008:	20000340 	.word	0x20000340
 800800c:	e000ed20 	.word	0xe000ed20
 8008010:	20000018 	.word	0x20000018
 8008014:	e000ef34 	.word	0xe000ef34

08008018 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
        __asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
    }
 8008030:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008032:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <vPortEnterCritical+0x58>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	4a0d      	ldr	r2, [pc, #52]	; (8008070 <vPortEnterCritical+0x58>)
 800803a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <vPortEnterCritical+0x58>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d10f      	bne.n	8008064 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <vPortEnterCritical+0x5c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <vPortEnterCritical+0x4c>
        __asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	603b      	str	r3, [r7, #0]
    }
 8008060:	bf00      	nop
 8008062:	e7fe      	b.n	8008062 <vPortEnterCritical+0x4a>
    }
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	20000018 	.word	0x20000018
 8008074:	e000ed04 	.word	0xe000ed04

08008078 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800807e:	4b12      	ldr	r3, [pc, #72]	; (80080c8 <vPortExitCritical+0x50>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10a      	bne.n	800809c <vPortExitCritical+0x24>
        __asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	607b      	str	r3, [r7, #4]
    }
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <vPortExitCritical+0x50>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	4a09      	ldr	r2, [pc, #36]	; (80080c8 <vPortExitCritical+0x50>)
 80080a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80080a6:	4b08      	ldr	r3, [pc, #32]	; (80080c8 <vPortExitCritical+0x50>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d105      	bne.n	80080ba <vPortExitCritical+0x42>
 80080ae:	2300      	movs	r3, #0
 80080b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f383 8811 	msr	BASEPRI, r3
    }
 80080b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	20000018 	.word	0x20000018
 80080cc:	00000000 	.word	0x00000000

080080d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80080d0:	f3ef 8009 	mrs	r0, PSP
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4b15      	ldr	r3, [pc, #84]	; (8008130 <pxCurrentTCBConst>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	f01e 0f10 	tst.w	lr, #16
 80080e0:	bf08      	it	eq
 80080e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	6010      	str	r0, [r2, #0]
 80080ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080f4:	f380 8811 	msr	BASEPRI, r0
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f7fe ff7a 	bl	8006ff8 <vTaskSwitchContext>
 8008104:	f04f 0000 	mov.w	r0, #0
 8008108:	f380 8811 	msr	BASEPRI, r0
 800810c:	bc09      	pop	{r0, r3}
 800810e:	6819      	ldr	r1, [r3, #0]
 8008110:	6808      	ldr	r0, [r1, #0]
 8008112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008116:	f01e 0f10 	tst.w	lr, #16
 800811a:	bf08      	it	eq
 800811c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008120:	f380 8809 	msr	PSP, r0
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w

08008130 <pxCurrentTCBConst>:
 8008130:	20000210 	.word	0x20000210
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
        __asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
    }
 8008150:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008152:	f7fe fe3b 	bl	8006dcc <xTaskIncrementTick>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800815c:	4b06      	ldr	r3, [pc, #24]	; (8008178 <SysTick_Handler+0x40>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
    }
 800816e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <vPortSetupTimerInterrupt+0x34>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <vPortSetupTimerInterrupt+0x38>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <vPortSetupTimerInterrupt+0x3c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <vPortSetupTimerInterrupt+0x40>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	099b      	lsrs	r3, r3, #6
 8008198:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <vPortSetupTimerInterrupt+0x44>)
 800819a:	3b01      	subs	r3, #1
 800819c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800819e:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <vPortSetupTimerInterrupt+0x34>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	e000e010 	.word	0xe000e010
 80081b4:	e000e018 	.word	0xe000e018
 80081b8:	20000000 	.word	0x20000000
 80081bc:	10624dd3 	.word	0x10624dd3
 80081c0:	e000e014 	.word	0xe000e014

080081c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80081c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081d4 <vPortEnableVFP+0x10>
 80081c8:	6801      	ldr	r1, [r0, #0]
 80081ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ce:	6001      	str	r1, [r0, #0]
 80081d0:	4770      	bx	lr
 80081d2:	0000      	.short	0x0000
 80081d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop

080081dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80081e2:	f3ef 8305 	mrs	r3, IPSR
 80081e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b0f      	cmp	r3, #15
 80081ec:	d914      	bls.n	8008218 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ee:	4a17      	ldr	r2, [pc, #92]	; (800824c <vPortValidateInterruptPriority+0x70>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081f8:	4b15      	ldr	r3, [pc, #84]	; (8008250 <vPortValidateInterruptPriority+0x74>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	7afa      	ldrb	r2, [r7, #11]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d20a      	bcs.n	8008218 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	607b      	str	r3, [r7, #4]
    }
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008218:	4b0e      	ldr	r3, [pc, #56]	; (8008254 <vPortValidateInterruptPriority+0x78>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008220:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <vPortValidateInterruptPriority+0x7c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d90a      	bls.n	800823e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	603b      	str	r3, [r7, #0]
    }
 800823a:	bf00      	nop
 800823c:	e7fe      	b.n	800823c <vPortValidateInterruptPriority+0x60>
    }
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	e000e3f0 	.word	0xe000e3f0
 8008250:	2000033c 	.word	0x2000033c
 8008254:	e000ed0c 	.word	0xe000ed0c
 8008258:	20000340 	.word	0x20000340

0800825c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	; 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008268:	f7fe fc9a 	bl	8006ba0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800826c:	4b53      	ldr	r3, [pc, #332]	; (80083bc <pvPortMalloc+0x160>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008274:	f000 f908 	bl	8008488 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d012      	beq.n	80082a4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800827e:	2208      	movs	r2, #8
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	3308      	adds	r3, #8
 800828a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	43db      	mvns	r3, r3
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	429a      	cmp	r2, r3
 8008294:	d804      	bhi.n	80082a0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	4413      	add	r3, r2
 800829c:	607b      	str	r3, [r7, #4]
 800829e:	e001      	b.n	80082a4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	db70      	blt.n	800838c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06d      	beq.n	800838c <pvPortMalloc+0x130>
 80082b0:	4b43      	ldr	r3, [pc, #268]	; (80083c0 <pvPortMalloc+0x164>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d868      	bhi.n	800838c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80082ba:	4b42      	ldr	r3, [pc, #264]	; (80083c4 <pvPortMalloc+0x168>)
 80082bc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80082be:	4b41      	ldr	r3, [pc, #260]	; (80083c4 <pvPortMalloc+0x168>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082c4:	e004      	b.n	80082d0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d903      	bls.n	80082e2 <pvPortMalloc+0x86>
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f1      	bne.n	80082c6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <pvPortMalloc+0x160>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d04f      	beq.n	800838c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2208      	movs	r2, #8
 80082f2:	4413      	add	r3, r2
 80082f4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	2308      	movs	r3, #8
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	429a      	cmp	r2, r3
 800830c:	d91f      	bls.n	800834e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800830e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4413      	add	r3, r2
 8008314:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <pvPortMalloc+0xda>
        __asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	613b      	str	r3, [r7, #16]
    }
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	1ad2      	subs	r2, r2, r3
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008348:	6978      	ldr	r0, [r7, #20]
 800834a:	f000 f8f9 	bl	8008540 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800834e:	4b1c      	ldr	r3, [pc, #112]	; (80083c0 <pvPortMalloc+0x164>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	4a19      	ldr	r2, [pc, #100]	; (80083c0 <pvPortMalloc+0x164>)
 800835a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800835c:	4b18      	ldr	r3, [pc, #96]	; (80083c0 <pvPortMalloc+0x164>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4b19      	ldr	r3, [pc, #100]	; (80083c8 <pvPortMalloc+0x16c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d203      	bcs.n	8008370 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <pvPortMalloc+0x164>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a16      	ldr	r2, [pc, #88]	; (80083c8 <pvPortMalloc+0x16c>)
 800836e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008382:	4b12      	ldr	r3, [pc, #72]	; (80083cc <pvPortMalloc+0x170>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	4a10      	ldr	r2, [pc, #64]	; (80083cc <pvPortMalloc+0x170>)
 800838a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800838c:	f7fe fc16 	bl	8006bbc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <pvPortMalloc+0x154>
        __asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60fb      	str	r3, [r7, #12]
    }
 80083ac:	bf00      	nop
 80083ae:	e7fe      	b.n	80083ae <pvPortMalloc+0x152>
    return pvReturn;
 80083b0:	69fb      	ldr	r3, [r7, #28]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3728      	adds	r7, #40	; 0x28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20001b4c 	.word	0x20001b4c
 80083c0:	20001b50 	.word	0x20001b50
 80083c4:	20001b44 	.word	0x20001b44
 80083c8:	20001b54 	.word	0x20001b54
 80083cc:	20001b58 	.word	0x20001b58

080083d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d049      	beq.n	8008476 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80083e2:	2308      	movs	r3, #8
 80083e4:	425b      	negs	r3, r3
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4413      	add	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	db0a      	blt.n	800840e <vPortFree+0x3e>
        __asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	60fb      	str	r3, [r7, #12]
    }
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <vPortFree+0x5c>
        __asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	60bb      	str	r3, [r7, #8]
    }
 8008428:	bf00      	nop
 800842a:	e7fe      	b.n	800842a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	0fdb      	lsrs	r3, r3, #31
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01c      	beq.n	8008476 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d118      	bne.n	8008476 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008450:	f7fe fba6 	bl	8006ba0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	4b09      	ldr	r3, [pc, #36]	; (8008480 <vPortFree+0xb0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4413      	add	r3, r2
 800845e:	4a08      	ldr	r2, [pc, #32]	; (8008480 <vPortFree+0xb0>)
 8008460:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008462:	6938      	ldr	r0, [r7, #16]
 8008464:	f000 f86c 	bl	8008540 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008468:	4b06      	ldr	r3, [pc, #24]	; (8008484 <vPortFree+0xb4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3301      	adds	r3, #1
 800846e:	4a05      	ldr	r2, [pc, #20]	; (8008484 <vPortFree+0xb4>)
 8008470:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008472:	f7fe fba3 	bl	8006bbc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008476:	bf00      	nop
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20001b50 	.word	0x20001b50
 8008484:	20001b5c 	.word	0x20001b5c

08008488 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800848e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008492:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008494:	4b25      	ldr	r3, [pc, #148]	; (800852c <prvHeapInit+0xa4>)
 8008496:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00c      	beq.n	80084bc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3307      	adds	r3, #7
 80084a6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0307 	bic.w	r3, r3, #7
 80084ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	4a1d      	ldr	r2, [pc, #116]	; (800852c <prvHeapInit+0xa4>)
 80084b8:	4413      	add	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084c0:	4a1b      	ldr	r2, [pc, #108]	; (8008530 <prvHeapInit+0xa8>)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80084c6:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <prvHeapInit+0xa8>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4413      	add	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80084d4:	2208      	movs	r2, #8
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	1a9b      	subs	r3, r3, r2
 80084da:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0307 	bic.w	r3, r3, #7
 80084e2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4a13      	ldr	r2, [pc, #76]	; (8008534 <prvHeapInit+0xac>)
 80084e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80084ea:	4b12      	ldr	r3, [pc, #72]	; (8008534 <prvHeapInit+0xac>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2200      	movs	r2, #0
 80084f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80084f2:	4b10      	ldr	r3, [pc, #64]	; (8008534 <prvHeapInit+0xac>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	1ad2      	subs	r2, r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <prvHeapInit+0xac>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	4a08      	ldr	r2, [pc, #32]	; (8008538 <prvHeapInit+0xb0>)
 8008516:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	4a07      	ldr	r2, [pc, #28]	; (800853c <prvHeapInit+0xb4>)
 800851e:	6013      	str	r3, [r2, #0]
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	20000344 	.word	0x20000344
 8008530:	20001b44 	.word	0x20001b44
 8008534:	20001b4c 	.word	0x20001b4c
 8008538:	20001b54 	.word	0x20001b54
 800853c:	20001b50 	.word	0x20001b50

08008540 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008548:	4b28      	ldr	r3, [pc, #160]	; (80085ec <prvInsertBlockIntoFreeList+0xac>)
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	e002      	b.n	8008554 <prvInsertBlockIntoFreeList+0x14>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	429a      	cmp	r2, r3
 800855c:	d8f7      	bhi.n	800854e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d108      	bne.n	8008582 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	441a      	add	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	441a      	add	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d118      	bne.n	80085c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <prvInsertBlockIntoFreeList+0xb0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d00d      	beq.n	80085be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	441a      	add	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e008      	b.n	80085d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085be:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <prvInsertBlockIntoFreeList+0xb0>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	e003      	b.n	80085d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d002      	beq.n	80085de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	20001b44 	.word	0x20001b44
 80085f0:	20001b4c 	.word	0x20001b4c

080085f4 <__errno>:
 80085f4:	4b01      	ldr	r3, [pc, #4]	; (80085fc <__errno+0x8>)
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	2000001c 	.word	0x2000001c

08008600 <__libc_init_array>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	4d0d      	ldr	r5, [pc, #52]	; (8008638 <__libc_init_array+0x38>)
 8008604:	4c0d      	ldr	r4, [pc, #52]	; (800863c <__libc_init_array+0x3c>)
 8008606:	1b64      	subs	r4, r4, r5
 8008608:	10a4      	asrs	r4, r4, #2
 800860a:	2600      	movs	r6, #0
 800860c:	42a6      	cmp	r6, r4
 800860e:	d109      	bne.n	8008624 <__libc_init_array+0x24>
 8008610:	4d0b      	ldr	r5, [pc, #44]	; (8008640 <__libc_init_array+0x40>)
 8008612:	4c0c      	ldr	r4, [pc, #48]	; (8008644 <__libc_init_array+0x44>)
 8008614:	f004 fc56 	bl	800cec4 <_init>
 8008618:	1b64      	subs	r4, r4, r5
 800861a:	10a4      	asrs	r4, r4, #2
 800861c:	2600      	movs	r6, #0
 800861e:	42a6      	cmp	r6, r4
 8008620:	d105      	bne.n	800862e <__libc_init_array+0x2e>
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f855 3b04 	ldr.w	r3, [r5], #4
 8008628:	4798      	blx	r3
 800862a:	3601      	adds	r6, #1
 800862c:	e7ee      	b.n	800860c <__libc_init_array+0xc>
 800862e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008632:	4798      	blx	r3
 8008634:	3601      	adds	r6, #1
 8008636:	e7f2      	b.n	800861e <__libc_init_array+0x1e>
 8008638:	0800d504 	.word	0x0800d504
 800863c:	0800d504 	.word	0x0800d504
 8008640:	0800d504 	.word	0x0800d504
 8008644:	0800d508 	.word	0x0800d508

08008648 <memcpy>:
 8008648:	440a      	add	r2, r1
 800864a:	4291      	cmp	r1, r2
 800864c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008650:	d100      	bne.n	8008654 <memcpy+0xc>
 8008652:	4770      	bx	lr
 8008654:	b510      	push	{r4, lr}
 8008656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800865a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800865e:	4291      	cmp	r1, r2
 8008660:	d1f9      	bne.n	8008656 <memcpy+0xe>
 8008662:	bd10      	pop	{r4, pc}

08008664 <memset>:
 8008664:	4402      	add	r2, r0
 8008666:	4603      	mov	r3, r0
 8008668:	4293      	cmp	r3, r2
 800866a:	d100      	bne.n	800866e <memset+0xa>
 800866c:	4770      	bx	lr
 800866e:	f803 1b01 	strb.w	r1, [r3], #1
 8008672:	e7f9      	b.n	8008668 <memset+0x4>

08008674 <__cvt>:
 8008674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008678:	ec55 4b10 	vmov	r4, r5, d0
 800867c:	2d00      	cmp	r5, #0
 800867e:	460e      	mov	r6, r1
 8008680:	4619      	mov	r1, r3
 8008682:	462b      	mov	r3, r5
 8008684:	bfbb      	ittet	lt
 8008686:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800868a:	461d      	movlt	r5, r3
 800868c:	2300      	movge	r3, #0
 800868e:	232d      	movlt	r3, #45	; 0x2d
 8008690:	700b      	strb	r3, [r1, #0]
 8008692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008694:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008698:	4691      	mov	r9, r2
 800869a:	f023 0820 	bic.w	r8, r3, #32
 800869e:	bfbc      	itt	lt
 80086a0:	4622      	movlt	r2, r4
 80086a2:	4614      	movlt	r4, r2
 80086a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086a8:	d005      	beq.n	80086b6 <__cvt+0x42>
 80086aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086ae:	d100      	bne.n	80086b2 <__cvt+0x3e>
 80086b0:	3601      	adds	r6, #1
 80086b2:	2102      	movs	r1, #2
 80086b4:	e000      	b.n	80086b8 <__cvt+0x44>
 80086b6:	2103      	movs	r1, #3
 80086b8:	ab03      	add	r3, sp, #12
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	ab02      	add	r3, sp, #8
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	ec45 4b10 	vmov	d0, r4, r5
 80086c4:	4653      	mov	r3, sl
 80086c6:	4632      	mov	r2, r6
 80086c8:	f001 fdb6 	bl	800a238 <_dtoa_r>
 80086cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086d0:	4607      	mov	r7, r0
 80086d2:	d102      	bne.n	80086da <__cvt+0x66>
 80086d4:	f019 0f01 	tst.w	r9, #1
 80086d8:	d022      	beq.n	8008720 <__cvt+0xac>
 80086da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086de:	eb07 0906 	add.w	r9, r7, r6
 80086e2:	d110      	bne.n	8008706 <__cvt+0x92>
 80086e4:	783b      	ldrb	r3, [r7, #0]
 80086e6:	2b30      	cmp	r3, #48	; 0x30
 80086e8:	d10a      	bne.n	8008700 <__cvt+0x8c>
 80086ea:	2200      	movs	r2, #0
 80086ec:	2300      	movs	r3, #0
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f8 f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80086f6:	b918      	cbnz	r0, 8008700 <__cvt+0x8c>
 80086f8:	f1c6 0601 	rsb	r6, r6, #1
 80086fc:	f8ca 6000 	str.w	r6, [sl]
 8008700:	f8da 3000 	ldr.w	r3, [sl]
 8008704:	4499      	add	r9, r3
 8008706:	2200      	movs	r2, #0
 8008708:	2300      	movs	r3, #0
 800870a:	4620      	mov	r0, r4
 800870c:	4629      	mov	r1, r5
 800870e:	f7f8 f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 8008712:	b108      	cbz	r0, 8008718 <__cvt+0xa4>
 8008714:	f8cd 900c 	str.w	r9, [sp, #12]
 8008718:	2230      	movs	r2, #48	; 0x30
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	454b      	cmp	r3, r9
 800871e:	d307      	bcc.n	8008730 <__cvt+0xbc>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008724:	1bdb      	subs	r3, r3, r7
 8008726:	4638      	mov	r0, r7
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	b004      	add	sp, #16
 800872c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008730:	1c59      	adds	r1, r3, #1
 8008732:	9103      	str	r1, [sp, #12]
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e7f0      	b.n	800871a <__cvt+0xa6>

08008738 <__exponent>:
 8008738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800873a:	4603      	mov	r3, r0
 800873c:	2900      	cmp	r1, #0
 800873e:	bfb8      	it	lt
 8008740:	4249      	neglt	r1, r1
 8008742:	f803 2b02 	strb.w	r2, [r3], #2
 8008746:	bfb4      	ite	lt
 8008748:	222d      	movlt	r2, #45	; 0x2d
 800874a:	222b      	movge	r2, #43	; 0x2b
 800874c:	2909      	cmp	r1, #9
 800874e:	7042      	strb	r2, [r0, #1]
 8008750:	dd2a      	ble.n	80087a8 <__exponent+0x70>
 8008752:	f10d 0407 	add.w	r4, sp, #7
 8008756:	46a4      	mov	ip, r4
 8008758:	270a      	movs	r7, #10
 800875a:	46a6      	mov	lr, r4
 800875c:	460a      	mov	r2, r1
 800875e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008762:	fb07 1516 	mls	r5, r7, r6, r1
 8008766:	3530      	adds	r5, #48	; 0x30
 8008768:	2a63      	cmp	r2, #99	; 0x63
 800876a:	f104 34ff 	add.w	r4, r4, #4294967295
 800876e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008772:	4631      	mov	r1, r6
 8008774:	dcf1      	bgt.n	800875a <__exponent+0x22>
 8008776:	3130      	adds	r1, #48	; 0x30
 8008778:	f1ae 0502 	sub.w	r5, lr, #2
 800877c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008780:	1c44      	adds	r4, r0, #1
 8008782:	4629      	mov	r1, r5
 8008784:	4561      	cmp	r1, ip
 8008786:	d30a      	bcc.n	800879e <__exponent+0x66>
 8008788:	f10d 0209 	add.w	r2, sp, #9
 800878c:	eba2 020e 	sub.w	r2, r2, lr
 8008790:	4565      	cmp	r5, ip
 8008792:	bf88      	it	hi
 8008794:	2200      	movhi	r2, #0
 8008796:	4413      	add	r3, r2
 8008798:	1a18      	subs	r0, r3, r0
 800879a:	b003      	add	sp, #12
 800879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800879e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80087a6:	e7ed      	b.n	8008784 <__exponent+0x4c>
 80087a8:	2330      	movs	r3, #48	; 0x30
 80087aa:	3130      	adds	r1, #48	; 0x30
 80087ac:	7083      	strb	r3, [r0, #2]
 80087ae:	70c1      	strb	r1, [r0, #3]
 80087b0:	1d03      	adds	r3, r0, #4
 80087b2:	e7f1      	b.n	8008798 <__exponent+0x60>

080087b4 <_printf_float>:
 80087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	ed2d 8b02 	vpush	{d8}
 80087bc:	b08d      	sub	sp, #52	; 0x34
 80087be:	460c      	mov	r4, r1
 80087c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087c4:	4616      	mov	r6, r2
 80087c6:	461f      	mov	r7, r3
 80087c8:	4605      	mov	r5, r0
 80087ca:	f002 fe91 	bl	800b4f0 <_localeconv_r>
 80087ce:	f8d0 a000 	ldr.w	sl, [r0]
 80087d2:	4650      	mov	r0, sl
 80087d4:	f7f7 fcfc 	bl	80001d0 <strlen>
 80087d8:	2300      	movs	r3, #0
 80087da:	930a      	str	r3, [sp, #40]	; 0x28
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	9305      	str	r3, [sp, #20]
 80087e0:	f8d8 3000 	ldr.w	r3, [r8]
 80087e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087e8:	3307      	adds	r3, #7
 80087ea:	f023 0307 	bic.w	r3, r3, #7
 80087ee:	f103 0208 	add.w	r2, r3, #8
 80087f2:	f8c8 2000 	str.w	r2, [r8]
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008806:	9307      	str	r3, [sp, #28]
 8008808:	f8cd 8018 	str.w	r8, [sp, #24]
 800880c:	ee08 0a10 	vmov	s16, r0
 8008810:	4b9f      	ldr	r3, [pc, #636]	; (8008a90 <_printf_float+0x2dc>)
 8008812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008816:	f04f 32ff 	mov.w	r2, #4294967295
 800881a:	f7f8 f987 	bl	8000b2c <__aeabi_dcmpun>
 800881e:	bb88      	cbnz	r0, 8008884 <_printf_float+0xd0>
 8008820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008824:	4b9a      	ldr	r3, [pc, #616]	; (8008a90 <_printf_float+0x2dc>)
 8008826:	f04f 32ff 	mov.w	r2, #4294967295
 800882a:	f7f8 f961 	bl	8000af0 <__aeabi_dcmple>
 800882e:	bb48      	cbnz	r0, 8008884 <_printf_float+0xd0>
 8008830:	2200      	movs	r2, #0
 8008832:	2300      	movs	r3, #0
 8008834:	4640      	mov	r0, r8
 8008836:	4649      	mov	r1, r9
 8008838:	f7f8 f950 	bl	8000adc <__aeabi_dcmplt>
 800883c:	b110      	cbz	r0, 8008844 <_printf_float+0x90>
 800883e:	232d      	movs	r3, #45	; 0x2d
 8008840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008844:	4b93      	ldr	r3, [pc, #588]	; (8008a94 <_printf_float+0x2e0>)
 8008846:	4894      	ldr	r0, [pc, #592]	; (8008a98 <_printf_float+0x2e4>)
 8008848:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800884c:	bf94      	ite	ls
 800884e:	4698      	movls	r8, r3
 8008850:	4680      	movhi	r8, r0
 8008852:	2303      	movs	r3, #3
 8008854:	6123      	str	r3, [r4, #16]
 8008856:	9b05      	ldr	r3, [sp, #20]
 8008858:	f023 0204 	bic.w	r2, r3, #4
 800885c:	6022      	str	r2, [r4, #0]
 800885e:	f04f 0900 	mov.w	r9, #0
 8008862:	9700      	str	r7, [sp, #0]
 8008864:	4633      	mov	r3, r6
 8008866:	aa0b      	add	r2, sp, #44	; 0x2c
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f9d8 	bl	8008c20 <_printf_common>
 8008870:	3001      	adds	r0, #1
 8008872:	f040 8090 	bne.w	8008996 <_printf_float+0x1e2>
 8008876:	f04f 30ff 	mov.w	r0, #4294967295
 800887a:	b00d      	add	sp, #52	; 0x34
 800887c:	ecbd 8b02 	vpop	{d8}
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	4642      	mov	r2, r8
 8008886:	464b      	mov	r3, r9
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f8 f94e 	bl	8000b2c <__aeabi_dcmpun>
 8008890:	b140      	cbz	r0, 80088a4 <_printf_float+0xf0>
 8008892:	464b      	mov	r3, r9
 8008894:	2b00      	cmp	r3, #0
 8008896:	bfbc      	itt	lt
 8008898:	232d      	movlt	r3, #45	; 0x2d
 800889a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800889e:	487f      	ldr	r0, [pc, #508]	; (8008a9c <_printf_float+0x2e8>)
 80088a0:	4b7f      	ldr	r3, [pc, #508]	; (8008aa0 <_printf_float+0x2ec>)
 80088a2:	e7d1      	b.n	8008848 <_printf_float+0x94>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80088aa:	9206      	str	r2, [sp, #24]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	d13f      	bne.n	8008930 <_printf_float+0x17c>
 80088b0:	2306      	movs	r3, #6
 80088b2:	6063      	str	r3, [r4, #4]
 80088b4:	9b05      	ldr	r3, [sp, #20]
 80088b6:	6861      	ldr	r1, [r4, #4]
 80088b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088bc:	2300      	movs	r3, #0
 80088be:	9303      	str	r3, [sp, #12]
 80088c0:	ab0a      	add	r3, sp, #40	; 0x28
 80088c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088c6:	ab09      	add	r3, sp, #36	; 0x24
 80088c8:	ec49 8b10 	vmov	d0, r8, r9
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088d4:	4628      	mov	r0, r5
 80088d6:	f7ff fecd 	bl	8008674 <__cvt>
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088de:	2b47      	cmp	r3, #71	; 0x47
 80088e0:	4680      	mov	r8, r0
 80088e2:	d108      	bne.n	80088f6 <_printf_float+0x142>
 80088e4:	1cc8      	adds	r0, r1, #3
 80088e6:	db02      	blt.n	80088ee <_printf_float+0x13a>
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	4299      	cmp	r1, r3
 80088ec:	dd41      	ble.n	8008972 <_printf_float+0x1be>
 80088ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80088f2:	fa5f fb8b 	uxtb.w	fp, fp
 80088f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088fa:	d820      	bhi.n	800893e <_printf_float+0x18a>
 80088fc:	3901      	subs	r1, #1
 80088fe:	465a      	mov	r2, fp
 8008900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008904:	9109      	str	r1, [sp, #36]	; 0x24
 8008906:	f7ff ff17 	bl	8008738 <__exponent>
 800890a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800890c:	1813      	adds	r3, r2, r0
 800890e:	2a01      	cmp	r2, #1
 8008910:	4681      	mov	r9, r0
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	dc02      	bgt.n	800891c <_printf_float+0x168>
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	07d2      	lsls	r2, r2, #31
 800891a:	d501      	bpl.n	8008920 <_printf_float+0x16c>
 800891c:	3301      	adds	r3, #1
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008924:	2b00      	cmp	r3, #0
 8008926:	d09c      	beq.n	8008862 <_printf_float+0xae>
 8008928:	232d      	movs	r3, #45	; 0x2d
 800892a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800892e:	e798      	b.n	8008862 <_printf_float+0xae>
 8008930:	9a06      	ldr	r2, [sp, #24]
 8008932:	2a47      	cmp	r2, #71	; 0x47
 8008934:	d1be      	bne.n	80088b4 <_printf_float+0x100>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1bc      	bne.n	80088b4 <_printf_float+0x100>
 800893a:	2301      	movs	r3, #1
 800893c:	e7b9      	b.n	80088b2 <_printf_float+0xfe>
 800893e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008942:	d118      	bne.n	8008976 <_printf_float+0x1c2>
 8008944:	2900      	cmp	r1, #0
 8008946:	6863      	ldr	r3, [r4, #4]
 8008948:	dd0b      	ble.n	8008962 <_printf_float+0x1ae>
 800894a:	6121      	str	r1, [r4, #16]
 800894c:	b913      	cbnz	r3, 8008954 <_printf_float+0x1a0>
 800894e:	6822      	ldr	r2, [r4, #0]
 8008950:	07d0      	lsls	r0, r2, #31
 8008952:	d502      	bpl.n	800895a <_printf_float+0x1a6>
 8008954:	3301      	adds	r3, #1
 8008956:	440b      	add	r3, r1
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	65a1      	str	r1, [r4, #88]	; 0x58
 800895c:	f04f 0900 	mov.w	r9, #0
 8008960:	e7de      	b.n	8008920 <_printf_float+0x16c>
 8008962:	b913      	cbnz	r3, 800896a <_printf_float+0x1b6>
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	07d2      	lsls	r2, r2, #31
 8008968:	d501      	bpl.n	800896e <_printf_float+0x1ba>
 800896a:	3302      	adds	r3, #2
 800896c:	e7f4      	b.n	8008958 <_printf_float+0x1a4>
 800896e:	2301      	movs	r3, #1
 8008970:	e7f2      	b.n	8008958 <_printf_float+0x1a4>
 8008972:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008978:	4299      	cmp	r1, r3
 800897a:	db05      	blt.n	8008988 <_printf_float+0x1d4>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	6121      	str	r1, [r4, #16]
 8008980:	07d8      	lsls	r0, r3, #31
 8008982:	d5ea      	bpl.n	800895a <_printf_float+0x1a6>
 8008984:	1c4b      	adds	r3, r1, #1
 8008986:	e7e7      	b.n	8008958 <_printf_float+0x1a4>
 8008988:	2900      	cmp	r1, #0
 800898a:	bfd4      	ite	le
 800898c:	f1c1 0202 	rsble	r2, r1, #2
 8008990:	2201      	movgt	r2, #1
 8008992:	4413      	add	r3, r2
 8008994:	e7e0      	b.n	8008958 <_printf_float+0x1a4>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	055a      	lsls	r2, r3, #21
 800899a:	d407      	bmi.n	80089ac <_printf_float+0x1f8>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	4642      	mov	r2, r8
 80089a0:	4631      	mov	r1, r6
 80089a2:	4628      	mov	r0, r5
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	d12c      	bne.n	8008a04 <_printf_float+0x250>
 80089aa:	e764      	b.n	8008876 <_printf_float+0xc2>
 80089ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089b0:	f240 80e0 	bls.w	8008b74 <_printf_float+0x3c0>
 80089b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089b8:	2200      	movs	r2, #0
 80089ba:	2300      	movs	r3, #0
 80089bc:	f7f8 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d034      	beq.n	8008a2e <_printf_float+0x27a>
 80089c4:	4a37      	ldr	r2, [pc, #220]	; (8008aa4 <_printf_float+0x2f0>)
 80089c6:	2301      	movs	r3, #1
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f af51 	beq.w	8008876 <_printf_float+0xc2>
 80089d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089d8:	429a      	cmp	r2, r3
 80089da:	db02      	blt.n	80089e2 <_printf_float+0x22e>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	07d8      	lsls	r0, r3, #31
 80089e0:	d510      	bpl.n	8008a04 <_printf_float+0x250>
 80089e2:	ee18 3a10 	vmov	r3, s16
 80089e6:	4652      	mov	r2, sl
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f43f af41 	beq.w	8008876 <_printf_float+0xc2>
 80089f4:	f04f 0800 	mov.w	r8, #0
 80089f8:	f104 091a 	add.w	r9, r4, #26
 80089fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fe:	3b01      	subs	r3, #1
 8008a00:	4543      	cmp	r3, r8
 8008a02:	dc09      	bgt.n	8008a18 <_printf_float+0x264>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	079b      	lsls	r3, r3, #30
 8008a08:	f100 8105 	bmi.w	8008c16 <_printf_float+0x462>
 8008a0c:	68e0      	ldr	r0, [r4, #12]
 8008a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a10:	4298      	cmp	r0, r3
 8008a12:	bfb8      	it	lt
 8008a14:	4618      	movlt	r0, r3
 8008a16:	e730      	b.n	800887a <_printf_float+0xc6>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	464a      	mov	r2, r9
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f af27 	beq.w	8008876 <_printf_float+0xc2>
 8008a28:	f108 0801 	add.w	r8, r8, #1
 8008a2c:	e7e6      	b.n	80089fc <_printf_float+0x248>
 8008a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc39      	bgt.n	8008aa8 <_printf_float+0x2f4>
 8008a34:	4a1b      	ldr	r2, [pc, #108]	; (8008aa4 <_printf_float+0x2f0>)
 8008a36:	2301      	movs	r3, #1
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f43f af19 	beq.w	8008876 <_printf_float+0xc2>
 8008a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	d102      	bne.n	8008a52 <_printf_float+0x29e>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	07d9      	lsls	r1, r3, #31
 8008a50:	d5d8      	bpl.n	8008a04 <_printf_float+0x250>
 8008a52:	ee18 3a10 	vmov	r3, s16
 8008a56:	4652      	mov	r2, sl
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b8      	blx	r7
 8008a5e:	3001      	adds	r0, #1
 8008a60:	f43f af09 	beq.w	8008876 <_printf_float+0xc2>
 8008a64:	f04f 0900 	mov.w	r9, #0
 8008a68:	f104 0a1a 	add.w	sl, r4, #26
 8008a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6e:	425b      	negs	r3, r3
 8008a70:	454b      	cmp	r3, r9
 8008a72:	dc01      	bgt.n	8008a78 <_printf_float+0x2c4>
 8008a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a76:	e792      	b.n	800899e <_printf_float+0x1ea>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4652      	mov	r2, sl
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f aef7 	beq.w	8008876 <_printf_float+0xc2>
 8008a88:	f109 0901 	add.w	r9, r9, #1
 8008a8c:	e7ee      	b.n	8008a6c <_printf_float+0x2b8>
 8008a8e:	bf00      	nop
 8008a90:	7fefffff 	.word	0x7fefffff
 8008a94:	0800d054 	.word	0x0800d054
 8008a98:	0800d058 	.word	0x0800d058
 8008a9c:	0800d060 	.word	0x0800d060
 8008aa0:	0800d05c 	.word	0x0800d05c
 8008aa4:	0800d064 	.word	0x0800d064
 8008aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aac:	429a      	cmp	r2, r3
 8008aae:	bfa8      	it	ge
 8008ab0:	461a      	movge	r2, r3
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	4691      	mov	r9, r2
 8008ab6:	dc37      	bgt.n	8008b28 <_printf_float+0x374>
 8008ab8:	f04f 0b00 	mov.w	fp, #0
 8008abc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ac0:	f104 021a 	add.w	r2, r4, #26
 8008ac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ac6:	9305      	str	r3, [sp, #20]
 8008ac8:	eba3 0309 	sub.w	r3, r3, r9
 8008acc:	455b      	cmp	r3, fp
 8008ace:	dc33      	bgt.n	8008b38 <_printf_float+0x384>
 8008ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	db3b      	blt.n	8008b50 <_printf_float+0x39c>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	07da      	lsls	r2, r3, #31
 8008adc:	d438      	bmi.n	8008b50 <_printf_float+0x39c>
 8008ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	eba2 0901 	sub.w	r9, r2, r1
 8008aea:	4599      	cmp	r9, r3
 8008aec:	bfa8      	it	ge
 8008aee:	4699      	movge	r9, r3
 8008af0:	f1b9 0f00 	cmp.w	r9, #0
 8008af4:	dc35      	bgt.n	8008b62 <_printf_float+0x3ae>
 8008af6:	f04f 0800 	mov.w	r8, #0
 8008afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008afe:	f104 0a1a 	add.w	sl, r4, #26
 8008b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	eba3 0309 	sub.w	r3, r3, r9
 8008b0c:	4543      	cmp	r3, r8
 8008b0e:	f77f af79 	ble.w	8008a04 <_printf_float+0x250>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4652      	mov	r2, sl
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	47b8      	blx	r7
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	f43f aeaa 	beq.w	8008876 <_printf_float+0xc2>
 8008b22:	f108 0801 	add.w	r8, r8, #1
 8008b26:	e7ec      	b.n	8008b02 <_printf_float+0x34e>
 8008b28:	4613      	mov	r3, r2
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b8      	blx	r7
 8008b32:	3001      	adds	r0, #1
 8008b34:	d1c0      	bne.n	8008ab8 <_printf_float+0x304>
 8008b36:	e69e      	b.n	8008876 <_printf_float+0xc2>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	9205      	str	r2, [sp, #20]
 8008b40:	47b8      	blx	r7
 8008b42:	3001      	adds	r0, #1
 8008b44:	f43f ae97 	beq.w	8008876 <_printf_float+0xc2>
 8008b48:	9a05      	ldr	r2, [sp, #20]
 8008b4a:	f10b 0b01 	add.w	fp, fp, #1
 8008b4e:	e7b9      	b.n	8008ac4 <_printf_float+0x310>
 8008b50:	ee18 3a10 	vmov	r3, s16
 8008b54:	4652      	mov	r2, sl
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d1be      	bne.n	8008ade <_printf_float+0x32a>
 8008b60:	e689      	b.n	8008876 <_printf_float+0xc2>
 8008b62:	9a05      	ldr	r2, [sp, #20]
 8008b64:	464b      	mov	r3, r9
 8008b66:	4442      	add	r2, r8
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b8      	blx	r7
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d1c1      	bne.n	8008af6 <_printf_float+0x342>
 8008b72:	e680      	b.n	8008876 <_printf_float+0xc2>
 8008b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b76:	2a01      	cmp	r2, #1
 8008b78:	dc01      	bgt.n	8008b7e <_printf_float+0x3ca>
 8008b7a:	07db      	lsls	r3, r3, #31
 8008b7c:	d538      	bpl.n	8008bf0 <_printf_float+0x43c>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4642      	mov	r2, r8
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b8      	blx	r7
 8008b88:	3001      	adds	r0, #1
 8008b8a:	f43f ae74 	beq.w	8008876 <_printf_float+0xc2>
 8008b8e:	ee18 3a10 	vmov	r3, s16
 8008b92:	4652      	mov	r2, sl
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f ae6b 	beq.w	8008876 <_printf_float+0xc2>
 8008ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f7f7 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bac:	b9d8      	cbnz	r0, 8008be6 <_printf_float+0x432>
 8008bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb0:	f108 0201 	add.w	r2, r8, #1
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d10e      	bne.n	8008bde <_printf_float+0x42a>
 8008bc0:	e659      	b.n	8008876 <_printf_float+0xc2>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4652      	mov	r2, sl
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	47b8      	blx	r7
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f43f ae52 	beq.w	8008876 <_printf_float+0xc2>
 8008bd2:	f108 0801 	add.w	r8, r8, #1
 8008bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	4543      	cmp	r3, r8
 8008bdc:	dcf1      	bgt.n	8008bc2 <_printf_float+0x40e>
 8008bde:	464b      	mov	r3, r9
 8008be0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008be4:	e6dc      	b.n	80089a0 <_printf_float+0x1ec>
 8008be6:	f04f 0800 	mov.w	r8, #0
 8008bea:	f104 0a1a 	add.w	sl, r4, #26
 8008bee:	e7f2      	b.n	8008bd6 <_printf_float+0x422>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4642      	mov	r2, r8
 8008bf4:	e7df      	b.n	8008bb6 <_printf_float+0x402>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	464a      	mov	r2, r9
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	f43f ae38 	beq.w	8008876 <_printf_float+0xc2>
 8008c06:	f108 0801 	add.w	r8, r8, #1
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c0e:	1a5b      	subs	r3, r3, r1
 8008c10:	4543      	cmp	r3, r8
 8008c12:	dcf0      	bgt.n	8008bf6 <_printf_float+0x442>
 8008c14:	e6fa      	b.n	8008a0c <_printf_float+0x258>
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	f104 0919 	add.w	r9, r4, #25
 8008c1e:	e7f4      	b.n	8008c0a <_printf_float+0x456>

08008c20 <_printf_common>:
 8008c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c24:	4616      	mov	r6, r2
 8008c26:	4699      	mov	r9, r3
 8008c28:	688a      	ldr	r2, [r1, #8]
 8008c2a:	690b      	ldr	r3, [r1, #16]
 8008c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c30:	4293      	cmp	r3, r2
 8008c32:	bfb8      	it	lt
 8008c34:	4613      	movlt	r3, r2
 8008c36:	6033      	str	r3, [r6, #0]
 8008c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	b10a      	cbz	r2, 8008c46 <_printf_common+0x26>
 8008c42:	3301      	adds	r3, #1
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	0699      	lsls	r1, r3, #26
 8008c4a:	bf42      	ittt	mi
 8008c4c:	6833      	ldrmi	r3, [r6, #0]
 8008c4e:	3302      	addmi	r3, #2
 8008c50:	6033      	strmi	r3, [r6, #0]
 8008c52:	6825      	ldr	r5, [r4, #0]
 8008c54:	f015 0506 	ands.w	r5, r5, #6
 8008c58:	d106      	bne.n	8008c68 <_printf_common+0x48>
 8008c5a:	f104 0a19 	add.w	sl, r4, #25
 8008c5e:	68e3      	ldr	r3, [r4, #12]
 8008c60:	6832      	ldr	r2, [r6, #0]
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	42ab      	cmp	r3, r5
 8008c66:	dc26      	bgt.n	8008cb6 <_printf_common+0x96>
 8008c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c6c:	1e13      	subs	r3, r2, #0
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	bf18      	it	ne
 8008c72:	2301      	movne	r3, #1
 8008c74:	0692      	lsls	r2, r2, #26
 8008c76:	d42b      	bmi.n	8008cd0 <_printf_common+0xb0>
 8008c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	4638      	mov	r0, r7
 8008c80:	47c0      	blx	r8
 8008c82:	3001      	adds	r0, #1
 8008c84:	d01e      	beq.n	8008cc4 <_printf_common+0xa4>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	68e5      	ldr	r5, [r4, #12]
 8008c8a:	6832      	ldr	r2, [r6, #0]
 8008c8c:	f003 0306 	and.w	r3, r3, #6
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	bf08      	it	eq
 8008c94:	1aad      	subeq	r5, r5, r2
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	6922      	ldr	r2, [r4, #16]
 8008c9a:	bf0c      	ite	eq
 8008c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ca0:	2500      	movne	r5, #0
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	bfc4      	itt	gt
 8008ca6:	1a9b      	subgt	r3, r3, r2
 8008ca8:	18ed      	addgt	r5, r5, r3
 8008caa:	2600      	movs	r6, #0
 8008cac:	341a      	adds	r4, #26
 8008cae:	42b5      	cmp	r5, r6
 8008cb0:	d11a      	bne.n	8008ce8 <_printf_common+0xc8>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e008      	b.n	8008cc8 <_printf_common+0xa8>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4652      	mov	r2, sl
 8008cba:	4649      	mov	r1, r9
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	47c0      	blx	r8
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d103      	bne.n	8008ccc <_printf_common+0xac>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ccc:	3501      	adds	r5, #1
 8008cce:	e7c6      	b.n	8008c5e <_printf_common+0x3e>
 8008cd0:	18e1      	adds	r1, r4, r3
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	2030      	movs	r0, #48	; 0x30
 8008cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cda:	4422      	add	r2, r4
 8008cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	e7c7      	b.n	8008c78 <_printf_common+0x58>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	4622      	mov	r2, r4
 8008cec:	4649      	mov	r1, r9
 8008cee:	4638      	mov	r0, r7
 8008cf0:	47c0      	blx	r8
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d0e6      	beq.n	8008cc4 <_printf_common+0xa4>
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	e7d9      	b.n	8008cae <_printf_common+0x8e>
	...

08008cfc <_printf_i>:
 8008cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	460c      	mov	r4, r1
 8008d02:	4691      	mov	r9, r2
 8008d04:	7e27      	ldrb	r7, [r4, #24]
 8008d06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d08:	2f78      	cmp	r7, #120	; 0x78
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	469a      	mov	sl, r3
 8008d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d12:	d807      	bhi.n	8008d24 <_printf_i+0x28>
 8008d14:	2f62      	cmp	r7, #98	; 0x62
 8008d16:	d80a      	bhi.n	8008d2e <_printf_i+0x32>
 8008d18:	2f00      	cmp	r7, #0
 8008d1a:	f000 80d8 	beq.w	8008ece <_printf_i+0x1d2>
 8008d1e:	2f58      	cmp	r7, #88	; 0x58
 8008d20:	f000 80a3 	beq.w	8008e6a <_printf_i+0x16e>
 8008d24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d2c:	e03a      	b.n	8008da4 <_printf_i+0xa8>
 8008d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d32:	2b15      	cmp	r3, #21
 8008d34:	d8f6      	bhi.n	8008d24 <_printf_i+0x28>
 8008d36:	a001      	add	r0, pc, #4	; (adr r0, 8008d3c <_printf_i+0x40>)
 8008d38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d3c:	08008d95 	.word	0x08008d95
 8008d40:	08008da9 	.word	0x08008da9
 8008d44:	08008d25 	.word	0x08008d25
 8008d48:	08008d25 	.word	0x08008d25
 8008d4c:	08008d25 	.word	0x08008d25
 8008d50:	08008d25 	.word	0x08008d25
 8008d54:	08008da9 	.word	0x08008da9
 8008d58:	08008d25 	.word	0x08008d25
 8008d5c:	08008d25 	.word	0x08008d25
 8008d60:	08008d25 	.word	0x08008d25
 8008d64:	08008d25 	.word	0x08008d25
 8008d68:	08008eb5 	.word	0x08008eb5
 8008d6c:	08008dd9 	.word	0x08008dd9
 8008d70:	08008e97 	.word	0x08008e97
 8008d74:	08008d25 	.word	0x08008d25
 8008d78:	08008d25 	.word	0x08008d25
 8008d7c:	08008ed7 	.word	0x08008ed7
 8008d80:	08008d25 	.word	0x08008d25
 8008d84:	08008dd9 	.word	0x08008dd9
 8008d88:	08008d25 	.word	0x08008d25
 8008d8c:	08008d25 	.word	0x08008d25
 8008d90:	08008e9f 	.word	0x08008e9f
 8008d94:	680b      	ldr	r3, [r1, #0]
 8008d96:	1d1a      	adds	r2, r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	600a      	str	r2, [r1, #0]
 8008d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008da4:	2301      	movs	r3, #1
 8008da6:	e0a3      	b.n	8008ef0 <_printf_i+0x1f4>
 8008da8:	6825      	ldr	r5, [r4, #0]
 8008daa:	6808      	ldr	r0, [r1, #0]
 8008dac:	062e      	lsls	r6, r5, #24
 8008dae:	f100 0304 	add.w	r3, r0, #4
 8008db2:	d50a      	bpl.n	8008dca <_printf_i+0xce>
 8008db4:	6805      	ldr	r5, [r0, #0]
 8008db6:	600b      	str	r3, [r1, #0]
 8008db8:	2d00      	cmp	r5, #0
 8008dba:	da03      	bge.n	8008dc4 <_printf_i+0xc8>
 8008dbc:	232d      	movs	r3, #45	; 0x2d
 8008dbe:	426d      	negs	r5, r5
 8008dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dc4:	485e      	ldr	r0, [pc, #376]	; (8008f40 <_printf_i+0x244>)
 8008dc6:	230a      	movs	r3, #10
 8008dc8:	e019      	b.n	8008dfe <_printf_i+0x102>
 8008dca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008dce:	6805      	ldr	r5, [r0, #0]
 8008dd0:	600b      	str	r3, [r1, #0]
 8008dd2:	bf18      	it	ne
 8008dd4:	b22d      	sxthne	r5, r5
 8008dd6:	e7ef      	b.n	8008db8 <_printf_i+0xbc>
 8008dd8:	680b      	ldr	r3, [r1, #0]
 8008dda:	6825      	ldr	r5, [r4, #0]
 8008ddc:	1d18      	adds	r0, r3, #4
 8008dde:	6008      	str	r0, [r1, #0]
 8008de0:	0628      	lsls	r0, r5, #24
 8008de2:	d501      	bpl.n	8008de8 <_printf_i+0xec>
 8008de4:	681d      	ldr	r5, [r3, #0]
 8008de6:	e002      	b.n	8008dee <_printf_i+0xf2>
 8008de8:	0669      	lsls	r1, r5, #25
 8008dea:	d5fb      	bpl.n	8008de4 <_printf_i+0xe8>
 8008dec:	881d      	ldrh	r5, [r3, #0]
 8008dee:	4854      	ldr	r0, [pc, #336]	; (8008f40 <_printf_i+0x244>)
 8008df0:	2f6f      	cmp	r7, #111	; 0x6f
 8008df2:	bf0c      	ite	eq
 8008df4:	2308      	moveq	r3, #8
 8008df6:	230a      	movne	r3, #10
 8008df8:	2100      	movs	r1, #0
 8008dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dfe:	6866      	ldr	r6, [r4, #4]
 8008e00:	60a6      	str	r6, [r4, #8]
 8008e02:	2e00      	cmp	r6, #0
 8008e04:	bfa2      	ittt	ge
 8008e06:	6821      	ldrge	r1, [r4, #0]
 8008e08:	f021 0104 	bicge.w	r1, r1, #4
 8008e0c:	6021      	strge	r1, [r4, #0]
 8008e0e:	b90d      	cbnz	r5, 8008e14 <_printf_i+0x118>
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	d04d      	beq.n	8008eb0 <_printf_i+0x1b4>
 8008e14:	4616      	mov	r6, r2
 8008e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8008e1e:	5dc7      	ldrb	r7, [r0, r7]
 8008e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e24:	462f      	mov	r7, r5
 8008e26:	42bb      	cmp	r3, r7
 8008e28:	460d      	mov	r5, r1
 8008e2a:	d9f4      	bls.n	8008e16 <_printf_i+0x11a>
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d10b      	bne.n	8008e48 <_printf_i+0x14c>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	07df      	lsls	r7, r3, #31
 8008e34:	d508      	bpl.n	8008e48 <_printf_i+0x14c>
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	6861      	ldr	r1, [r4, #4]
 8008e3a:	4299      	cmp	r1, r3
 8008e3c:	bfde      	ittt	le
 8008e3e:	2330      	movle	r3, #48	; 0x30
 8008e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e48:	1b92      	subs	r2, r2, r6
 8008e4a:	6122      	str	r2, [r4, #16]
 8008e4c:	f8cd a000 	str.w	sl, [sp]
 8008e50:	464b      	mov	r3, r9
 8008e52:	aa03      	add	r2, sp, #12
 8008e54:	4621      	mov	r1, r4
 8008e56:	4640      	mov	r0, r8
 8008e58:	f7ff fee2 	bl	8008c20 <_printf_common>
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d14c      	bne.n	8008efa <_printf_i+0x1fe>
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	b004      	add	sp, #16
 8008e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6a:	4835      	ldr	r0, [pc, #212]	; (8008f40 <_printf_i+0x244>)
 8008e6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	680e      	ldr	r6, [r1, #0]
 8008e74:	061f      	lsls	r7, r3, #24
 8008e76:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e7a:	600e      	str	r6, [r1, #0]
 8008e7c:	d514      	bpl.n	8008ea8 <_printf_i+0x1ac>
 8008e7e:	07d9      	lsls	r1, r3, #31
 8008e80:	bf44      	itt	mi
 8008e82:	f043 0320 	orrmi.w	r3, r3, #32
 8008e86:	6023      	strmi	r3, [r4, #0]
 8008e88:	b91d      	cbnz	r5, 8008e92 <_printf_i+0x196>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	f023 0320 	bic.w	r3, r3, #32
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	2310      	movs	r3, #16
 8008e94:	e7b0      	b.n	8008df8 <_printf_i+0xfc>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	f043 0320 	orr.w	r3, r3, #32
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	2378      	movs	r3, #120	; 0x78
 8008ea0:	4828      	ldr	r0, [pc, #160]	; (8008f44 <_printf_i+0x248>)
 8008ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ea6:	e7e3      	b.n	8008e70 <_printf_i+0x174>
 8008ea8:	065e      	lsls	r6, r3, #25
 8008eaa:	bf48      	it	mi
 8008eac:	b2ad      	uxthmi	r5, r5
 8008eae:	e7e6      	b.n	8008e7e <_printf_i+0x182>
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	e7bb      	b.n	8008e2c <_printf_i+0x130>
 8008eb4:	680b      	ldr	r3, [r1, #0]
 8008eb6:	6826      	ldr	r6, [r4, #0]
 8008eb8:	6960      	ldr	r0, [r4, #20]
 8008eba:	1d1d      	adds	r5, r3, #4
 8008ebc:	600d      	str	r5, [r1, #0]
 8008ebe:	0635      	lsls	r5, r6, #24
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	d501      	bpl.n	8008ec8 <_printf_i+0x1cc>
 8008ec4:	6018      	str	r0, [r3, #0]
 8008ec6:	e002      	b.n	8008ece <_printf_i+0x1d2>
 8008ec8:	0671      	lsls	r1, r6, #25
 8008eca:	d5fb      	bpl.n	8008ec4 <_printf_i+0x1c8>
 8008ecc:	8018      	strh	r0, [r3, #0]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	4616      	mov	r6, r2
 8008ed4:	e7ba      	b.n	8008e4c <_printf_i+0x150>
 8008ed6:	680b      	ldr	r3, [r1, #0]
 8008ed8:	1d1a      	adds	r2, r3, #4
 8008eda:	600a      	str	r2, [r1, #0]
 8008edc:	681e      	ldr	r6, [r3, #0]
 8008ede:	6862      	ldr	r2, [r4, #4]
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7f7 f97c 	bl	80001e0 <memchr>
 8008ee8:	b108      	cbz	r0, 8008eee <_printf_i+0x1f2>
 8008eea:	1b80      	subs	r0, r0, r6
 8008eec:	6060      	str	r0, [r4, #4]
 8008eee:	6863      	ldr	r3, [r4, #4]
 8008ef0:	6123      	str	r3, [r4, #16]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef8:	e7a8      	b.n	8008e4c <_printf_i+0x150>
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	4632      	mov	r2, r6
 8008efe:	4649      	mov	r1, r9
 8008f00:	4640      	mov	r0, r8
 8008f02:	47d0      	blx	sl
 8008f04:	3001      	adds	r0, #1
 8008f06:	d0ab      	beq.n	8008e60 <_printf_i+0x164>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	079b      	lsls	r3, r3, #30
 8008f0c:	d413      	bmi.n	8008f36 <_printf_i+0x23a>
 8008f0e:	68e0      	ldr	r0, [r4, #12]
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	4298      	cmp	r0, r3
 8008f14:	bfb8      	it	lt
 8008f16:	4618      	movlt	r0, r3
 8008f18:	e7a4      	b.n	8008e64 <_printf_i+0x168>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	4649      	mov	r1, r9
 8008f20:	4640      	mov	r0, r8
 8008f22:	47d0      	blx	sl
 8008f24:	3001      	adds	r0, #1
 8008f26:	d09b      	beq.n	8008e60 <_printf_i+0x164>
 8008f28:	3501      	adds	r5, #1
 8008f2a:	68e3      	ldr	r3, [r4, #12]
 8008f2c:	9903      	ldr	r1, [sp, #12]
 8008f2e:	1a5b      	subs	r3, r3, r1
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	dcf2      	bgt.n	8008f1a <_printf_i+0x21e>
 8008f34:	e7eb      	b.n	8008f0e <_printf_i+0x212>
 8008f36:	2500      	movs	r5, #0
 8008f38:	f104 0619 	add.w	r6, r4, #25
 8008f3c:	e7f5      	b.n	8008f2a <_printf_i+0x22e>
 8008f3e:	bf00      	nop
 8008f40:	0800d066 	.word	0x0800d066
 8008f44:	0800d077 	.word	0x0800d077

08008f48 <_scanf_float>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	b087      	sub	sp, #28
 8008f4e:	4617      	mov	r7, r2
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	688b      	ldr	r3, [r1, #8]
 8008f54:	1e5a      	subs	r2, r3, #1
 8008f56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f5a:	bf83      	ittte	hi
 8008f5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f60:	195b      	addhi	r3, r3, r5
 8008f62:	9302      	strhi	r3, [sp, #8]
 8008f64:	2300      	movls	r3, #0
 8008f66:	bf86      	itte	hi
 8008f68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f6c:	608b      	strhi	r3, [r1, #8]
 8008f6e:	9302      	strls	r3, [sp, #8]
 8008f70:	680b      	ldr	r3, [r1, #0]
 8008f72:	468b      	mov	fp, r1
 8008f74:	2500      	movs	r5, #0
 8008f76:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f7a:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f82:	4680      	mov	r8, r0
 8008f84:	460c      	mov	r4, r1
 8008f86:	465e      	mov	r6, fp
 8008f88:	46aa      	mov	sl, r5
 8008f8a:	46a9      	mov	r9, r5
 8008f8c:	9501      	str	r5, [sp, #4]
 8008f8e:	68a2      	ldr	r2, [r4, #8]
 8008f90:	b152      	cbz	r2, 8008fa8 <_scanf_float+0x60>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b4e      	cmp	r3, #78	; 0x4e
 8008f98:	d864      	bhi.n	8009064 <_scanf_float+0x11c>
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	d83c      	bhi.n	8009018 <_scanf_float+0xd0>
 8008f9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008fa2:	b2c8      	uxtb	r0, r1
 8008fa4:	280e      	cmp	r0, #14
 8008fa6:	d93a      	bls.n	800901e <_scanf_float+0xd6>
 8008fa8:	f1b9 0f00 	cmp.w	r9, #0
 8008fac:	d003      	beq.n	8008fb6 <_scanf_float+0x6e>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fba:	f1ba 0f01 	cmp.w	sl, #1
 8008fbe:	f200 8113 	bhi.w	80091e8 <_scanf_float+0x2a0>
 8008fc2:	455e      	cmp	r6, fp
 8008fc4:	f200 8105 	bhi.w	80091d2 <_scanf_float+0x28a>
 8008fc8:	2501      	movs	r5, #1
 8008fca:	4628      	mov	r0, r5
 8008fcc:	b007      	add	sp, #28
 8008fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008fd6:	2a0d      	cmp	r2, #13
 8008fd8:	d8e6      	bhi.n	8008fa8 <_scanf_float+0x60>
 8008fda:	a101      	add	r1, pc, #4	; (adr r1, 8008fe0 <_scanf_float+0x98>)
 8008fdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fe0:	0800911f 	.word	0x0800911f
 8008fe4:	08008fa9 	.word	0x08008fa9
 8008fe8:	08008fa9 	.word	0x08008fa9
 8008fec:	08008fa9 	.word	0x08008fa9
 8008ff0:	0800917f 	.word	0x0800917f
 8008ff4:	08009157 	.word	0x08009157
 8008ff8:	08008fa9 	.word	0x08008fa9
 8008ffc:	08008fa9 	.word	0x08008fa9
 8009000:	0800912d 	.word	0x0800912d
 8009004:	08008fa9 	.word	0x08008fa9
 8009008:	08008fa9 	.word	0x08008fa9
 800900c:	08008fa9 	.word	0x08008fa9
 8009010:	08008fa9 	.word	0x08008fa9
 8009014:	080090e5 	.word	0x080090e5
 8009018:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800901c:	e7db      	b.n	8008fd6 <_scanf_float+0x8e>
 800901e:	290e      	cmp	r1, #14
 8009020:	d8c2      	bhi.n	8008fa8 <_scanf_float+0x60>
 8009022:	a001      	add	r0, pc, #4	; (adr r0, 8009028 <_scanf_float+0xe0>)
 8009024:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009028:	080090d7 	.word	0x080090d7
 800902c:	08008fa9 	.word	0x08008fa9
 8009030:	080090d7 	.word	0x080090d7
 8009034:	0800916b 	.word	0x0800916b
 8009038:	08008fa9 	.word	0x08008fa9
 800903c:	08009085 	.word	0x08009085
 8009040:	080090c1 	.word	0x080090c1
 8009044:	080090c1 	.word	0x080090c1
 8009048:	080090c1 	.word	0x080090c1
 800904c:	080090c1 	.word	0x080090c1
 8009050:	080090c1 	.word	0x080090c1
 8009054:	080090c1 	.word	0x080090c1
 8009058:	080090c1 	.word	0x080090c1
 800905c:	080090c1 	.word	0x080090c1
 8009060:	080090c1 	.word	0x080090c1
 8009064:	2b6e      	cmp	r3, #110	; 0x6e
 8009066:	d809      	bhi.n	800907c <_scanf_float+0x134>
 8009068:	2b60      	cmp	r3, #96	; 0x60
 800906a:	d8b2      	bhi.n	8008fd2 <_scanf_float+0x8a>
 800906c:	2b54      	cmp	r3, #84	; 0x54
 800906e:	d077      	beq.n	8009160 <_scanf_float+0x218>
 8009070:	2b59      	cmp	r3, #89	; 0x59
 8009072:	d199      	bne.n	8008fa8 <_scanf_float+0x60>
 8009074:	2d07      	cmp	r5, #7
 8009076:	d197      	bne.n	8008fa8 <_scanf_float+0x60>
 8009078:	2508      	movs	r5, #8
 800907a:	e029      	b.n	80090d0 <_scanf_float+0x188>
 800907c:	2b74      	cmp	r3, #116	; 0x74
 800907e:	d06f      	beq.n	8009160 <_scanf_float+0x218>
 8009080:	2b79      	cmp	r3, #121	; 0x79
 8009082:	e7f6      	b.n	8009072 <_scanf_float+0x12a>
 8009084:	6821      	ldr	r1, [r4, #0]
 8009086:	05c8      	lsls	r0, r1, #23
 8009088:	d51a      	bpl.n	80090c0 <_scanf_float+0x178>
 800908a:	9b02      	ldr	r3, [sp, #8]
 800908c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009090:	6021      	str	r1, [r4, #0]
 8009092:	f109 0901 	add.w	r9, r9, #1
 8009096:	b11b      	cbz	r3, 80090a0 <_scanf_float+0x158>
 8009098:	3b01      	subs	r3, #1
 800909a:	3201      	adds	r2, #1
 800909c:	9302      	str	r3, [sp, #8]
 800909e:	60a2      	str	r2, [r4, #8]
 80090a0:	68a3      	ldr	r3, [r4, #8]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	60a3      	str	r3, [r4, #8]
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	607b      	str	r3, [r7, #4]
 80090b4:	f340 8084 	ble.w	80091c0 <_scanf_float+0x278>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	3301      	adds	r3, #1
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	e766      	b.n	8008f8e <_scanf_float+0x46>
 80090c0:	eb1a 0f05 	cmn.w	sl, r5
 80090c4:	f47f af70 	bne.w	8008fa8 <_scanf_float+0x60>
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090ce:	6022      	str	r2, [r4, #0]
 80090d0:	f806 3b01 	strb.w	r3, [r6], #1
 80090d4:	e7e4      	b.n	80090a0 <_scanf_float+0x158>
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	0610      	lsls	r0, r2, #24
 80090da:	f57f af65 	bpl.w	8008fa8 <_scanf_float+0x60>
 80090de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090e2:	e7f4      	b.n	80090ce <_scanf_float+0x186>
 80090e4:	f1ba 0f00 	cmp.w	sl, #0
 80090e8:	d10e      	bne.n	8009108 <_scanf_float+0x1c0>
 80090ea:	f1b9 0f00 	cmp.w	r9, #0
 80090ee:	d10e      	bne.n	800910e <_scanf_float+0x1c6>
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090fa:	d108      	bne.n	800910e <_scanf_float+0x1c6>
 80090fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009100:	6022      	str	r2, [r4, #0]
 8009102:	f04f 0a01 	mov.w	sl, #1
 8009106:	e7e3      	b.n	80090d0 <_scanf_float+0x188>
 8009108:	f1ba 0f02 	cmp.w	sl, #2
 800910c:	d055      	beq.n	80091ba <_scanf_float+0x272>
 800910e:	2d01      	cmp	r5, #1
 8009110:	d002      	beq.n	8009118 <_scanf_float+0x1d0>
 8009112:	2d04      	cmp	r5, #4
 8009114:	f47f af48 	bne.w	8008fa8 <_scanf_float+0x60>
 8009118:	3501      	adds	r5, #1
 800911a:	b2ed      	uxtb	r5, r5
 800911c:	e7d8      	b.n	80090d0 <_scanf_float+0x188>
 800911e:	f1ba 0f01 	cmp.w	sl, #1
 8009122:	f47f af41 	bne.w	8008fa8 <_scanf_float+0x60>
 8009126:	f04f 0a02 	mov.w	sl, #2
 800912a:	e7d1      	b.n	80090d0 <_scanf_float+0x188>
 800912c:	b97d      	cbnz	r5, 800914e <_scanf_float+0x206>
 800912e:	f1b9 0f00 	cmp.w	r9, #0
 8009132:	f47f af3c 	bne.w	8008fae <_scanf_float+0x66>
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800913c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009140:	f47f af39 	bne.w	8008fb6 <_scanf_float+0x6e>
 8009144:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009148:	6022      	str	r2, [r4, #0]
 800914a:	2501      	movs	r5, #1
 800914c:	e7c0      	b.n	80090d0 <_scanf_float+0x188>
 800914e:	2d03      	cmp	r5, #3
 8009150:	d0e2      	beq.n	8009118 <_scanf_float+0x1d0>
 8009152:	2d05      	cmp	r5, #5
 8009154:	e7de      	b.n	8009114 <_scanf_float+0x1cc>
 8009156:	2d02      	cmp	r5, #2
 8009158:	f47f af26 	bne.w	8008fa8 <_scanf_float+0x60>
 800915c:	2503      	movs	r5, #3
 800915e:	e7b7      	b.n	80090d0 <_scanf_float+0x188>
 8009160:	2d06      	cmp	r5, #6
 8009162:	f47f af21 	bne.w	8008fa8 <_scanf_float+0x60>
 8009166:	2507      	movs	r5, #7
 8009168:	e7b2      	b.n	80090d0 <_scanf_float+0x188>
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	0591      	lsls	r1, r2, #22
 800916e:	f57f af1b 	bpl.w	8008fa8 <_scanf_float+0x60>
 8009172:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009176:	6022      	str	r2, [r4, #0]
 8009178:	f8cd 9004 	str.w	r9, [sp, #4]
 800917c:	e7a8      	b.n	80090d0 <_scanf_float+0x188>
 800917e:	6822      	ldr	r2, [r4, #0]
 8009180:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009184:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009188:	d006      	beq.n	8009198 <_scanf_float+0x250>
 800918a:	0550      	lsls	r0, r2, #21
 800918c:	f57f af0c 	bpl.w	8008fa8 <_scanf_float+0x60>
 8009190:	f1b9 0f00 	cmp.w	r9, #0
 8009194:	f43f af0f 	beq.w	8008fb6 <_scanf_float+0x6e>
 8009198:	0591      	lsls	r1, r2, #22
 800919a:	bf58      	it	pl
 800919c:	9901      	ldrpl	r1, [sp, #4]
 800919e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091a2:	bf58      	it	pl
 80091a4:	eba9 0101 	subpl.w	r1, r9, r1
 80091a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80091ac:	bf58      	it	pl
 80091ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	f04f 0900 	mov.w	r9, #0
 80091b8:	e78a      	b.n	80090d0 <_scanf_float+0x188>
 80091ba:	f04f 0a03 	mov.w	sl, #3
 80091be:	e787      	b.n	80090d0 <_scanf_float+0x188>
 80091c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091c4:	4639      	mov	r1, r7
 80091c6:	4640      	mov	r0, r8
 80091c8:	4798      	blx	r3
 80091ca:	2800      	cmp	r0, #0
 80091cc:	f43f aedf 	beq.w	8008f8e <_scanf_float+0x46>
 80091d0:	e6ea      	b.n	8008fa8 <_scanf_float+0x60>
 80091d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091da:	463a      	mov	r2, r7
 80091dc:	4640      	mov	r0, r8
 80091de:	4798      	blx	r3
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	6123      	str	r3, [r4, #16]
 80091e6:	e6ec      	b.n	8008fc2 <_scanf_float+0x7a>
 80091e8:	1e6b      	subs	r3, r5, #1
 80091ea:	2b06      	cmp	r3, #6
 80091ec:	d825      	bhi.n	800923a <_scanf_float+0x2f2>
 80091ee:	2d02      	cmp	r5, #2
 80091f0:	d836      	bhi.n	8009260 <_scanf_float+0x318>
 80091f2:	455e      	cmp	r6, fp
 80091f4:	f67f aee8 	bls.w	8008fc8 <_scanf_float+0x80>
 80091f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009200:	463a      	mov	r2, r7
 8009202:	4640      	mov	r0, r8
 8009204:	4798      	blx	r3
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	3b01      	subs	r3, #1
 800920a:	6123      	str	r3, [r4, #16]
 800920c:	e7f1      	b.n	80091f2 <_scanf_float+0x2aa>
 800920e:	9802      	ldr	r0, [sp, #8]
 8009210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009214:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009218:	9002      	str	r0, [sp, #8]
 800921a:	463a      	mov	r2, r7
 800921c:	4640      	mov	r0, r8
 800921e:	4798      	blx	r3
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	3b01      	subs	r3, #1
 8009224:	6123      	str	r3, [r4, #16]
 8009226:	f10a 3aff 	add.w	sl, sl, #4294967295
 800922a:	fa5f fa8a 	uxtb.w	sl, sl
 800922e:	f1ba 0f02 	cmp.w	sl, #2
 8009232:	d1ec      	bne.n	800920e <_scanf_float+0x2c6>
 8009234:	3d03      	subs	r5, #3
 8009236:	b2ed      	uxtb	r5, r5
 8009238:	1b76      	subs	r6, r6, r5
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	05da      	lsls	r2, r3, #23
 800923e:	d52f      	bpl.n	80092a0 <_scanf_float+0x358>
 8009240:	055b      	lsls	r3, r3, #21
 8009242:	d510      	bpl.n	8009266 <_scanf_float+0x31e>
 8009244:	455e      	cmp	r6, fp
 8009246:	f67f aebf 	bls.w	8008fc8 <_scanf_float+0x80>
 800924a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800924e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009252:	463a      	mov	r2, r7
 8009254:	4640      	mov	r0, r8
 8009256:	4798      	blx	r3
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	3b01      	subs	r3, #1
 800925c:	6123      	str	r3, [r4, #16]
 800925e:	e7f1      	b.n	8009244 <_scanf_float+0x2fc>
 8009260:	46aa      	mov	sl, r5
 8009262:	9602      	str	r6, [sp, #8]
 8009264:	e7df      	b.n	8009226 <_scanf_float+0x2de>
 8009266:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	2965      	cmp	r1, #101	; 0x65
 800926e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009272:	f106 35ff 	add.w	r5, r6, #4294967295
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	d00c      	beq.n	8009294 <_scanf_float+0x34c>
 800927a:	2945      	cmp	r1, #69	; 0x45
 800927c:	d00a      	beq.n	8009294 <_scanf_float+0x34c>
 800927e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009282:	463a      	mov	r2, r7
 8009284:	4640      	mov	r0, r8
 8009286:	4798      	blx	r3
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800928e:	3b01      	subs	r3, #1
 8009290:	1eb5      	subs	r5, r6, #2
 8009292:	6123      	str	r3, [r4, #16]
 8009294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009298:	463a      	mov	r2, r7
 800929a:	4640      	mov	r0, r8
 800929c:	4798      	blx	r3
 800929e:	462e      	mov	r6, r5
 80092a0:	6825      	ldr	r5, [r4, #0]
 80092a2:	f015 0510 	ands.w	r5, r5, #16
 80092a6:	d158      	bne.n	800935a <_scanf_float+0x412>
 80092a8:	7035      	strb	r5, [r6, #0]
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b4:	d11c      	bne.n	80092f0 <_scanf_float+0x3a8>
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	454b      	cmp	r3, r9
 80092ba:	eba3 0209 	sub.w	r2, r3, r9
 80092be:	d124      	bne.n	800930a <_scanf_float+0x3c2>
 80092c0:	2200      	movs	r2, #0
 80092c2:	4659      	mov	r1, fp
 80092c4:	4640      	mov	r0, r8
 80092c6:	f000 fe9d 	bl	800a004 <_strtod_r>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	6821      	ldr	r1, [r4, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f011 0f02 	tst.w	r1, #2
 80092d4:	ec57 6b10 	vmov	r6, r7, d0
 80092d8:	f103 0204 	add.w	r2, r3, #4
 80092dc:	d020      	beq.n	8009320 <_scanf_float+0x3d8>
 80092de:	9903      	ldr	r1, [sp, #12]
 80092e0:	600a      	str	r2, [r1, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	e9c3 6700 	strd	r6, r7, [r3]
 80092e8:	68e3      	ldr	r3, [r4, #12]
 80092ea:	3301      	adds	r3, #1
 80092ec:	60e3      	str	r3, [r4, #12]
 80092ee:	e66c      	b.n	8008fca <_scanf_float+0x82>
 80092f0:	9b04      	ldr	r3, [sp, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0e4      	beq.n	80092c0 <_scanf_float+0x378>
 80092f6:	9905      	ldr	r1, [sp, #20]
 80092f8:	230a      	movs	r3, #10
 80092fa:	462a      	mov	r2, r5
 80092fc:	3101      	adds	r1, #1
 80092fe:	4640      	mov	r0, r8
 8009300:	f000 ff0a 	bl	800a118 <_strtol_r>
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	9e05      	ldr	r6, [sp, #20]
 8009308:	1ac2      	subs	r2, r0, r3
 800930a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800930e:	429e      	cmp	r6, r3
 8009310:	bf28      	it	cs
 8009312:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009316:	4912      	ldr	r1, [pc, #72]	; (8009360 <_scanf_float+0x418>)
 8009318:	4630      	mov	r0, r6
 800931a:	f000 f82b 	bl	8009374 <siprintf>
 800931e:	e7cf      	b.n	80092c0 <_scanf_float+0x378>
 8009320:	f011 0f04 	tst.w	r1, #4
 8009324:	9903      	ldr	r1, [sp, #12]
 8009326:	600a      	str	r2, [r1, #0]
 8009328:	d1db      	bne.n	80092e2 <_scanf_float+0x39a>
 800932a:	f8d3 8000 	ldr.w	r8, [r3]
 800932e:	ee10 2a10 	vmov	r2, s0
 8009332:	ee10 0a10 	vmov	r0, s0
 8009336:	463b      	mov	r3, r7
 8009338:	4639      	mov	r1, r7
 800933a:	f7f7 fbf7 	bl	8000b2c <__aeabi_dcmpun>
 800933e:	b128      	cbz	r0, 800934c <_scanf_float+0x404>
 8009340:	4808      	ldr	r0, [pc, #32]	; (8009364 <_scanf_float+0x41c>)
 8009342:	f000 f811 	bl	8009368 <nanf>
 8009346:	ed88 0a00 	vstr	s0, [r8]
 800934a:	e7cd      	b.n	80092e8 <_scanf_float+0x3a0>
 800934c:	4630      	mov	r0, r6
 800934e:	4639      	mov	r1, r7
 8009350:	f7f7 fc4a 	bl	8000be8 <__aeabi_d2f>
 8009354:	f8c8 0000 	str.w	r0, [r8]
 8009358:	e7c6      	b.n	80092e8 <_scanf_float+0x3a0>
 800935a:	2500      	movs	r5, #0
 800935c:	e635      	b.n	8008fca <_scanf_float+0x82>
 800935e:	bf00      	nop
 8009360:	0800d088 	.word	0x0800d088
 8009364:	0800d4a0 	.word	0x0800d4a0

08009368 <nanf>:
 8009368:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009370 <nanf+0x8>
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	7fc00000 	.word	0x7fc00000

08009374 <siprintf>:
 8009374:	b40e      	push	{r1, r2, r3}
 8009376:	b500      	push	{lr}
 8009378:	b09c      	sub	sp, #112	; 0x70
 800937a:	ab1d      	add	r3, sp, #116	; 0x74
 800937c:	9002      	str	r0, [sp, #8]
 800937e:	9006      	str	r0, [sp, #24]
 8009380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009384:	4809      	ldr	r0, [pc, #36]	; (80093ac <siprintf+0x38>)
 8009386:	9107      	str	r1, [sp, #28]
 8009388:	9104      	str	r1, [sp, #16]
 800938a:	4909      	ldr	r1, [pc, #36]	; (80093b0 <siprintf+0x3c>)
 800938c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009390:	9105      	str	r1, [sp, #20]
 8009392:	6800      	ldr	r0, [r0, #0]
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	a902      	add	r1, sp, #8
 8009398:	f002 fe98 	bl	800c0cc <_svfiprintf_r>
 800939c:	9b02      	ldr	r3, [sp, #8]
 800939e:	2200      	movs	r2, #0
 80093a0:	701a      	strb	r2, [r3, #0]
 80093a2:	b01c      	add	sp, #112	; 0x70
 80093a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093a8:	b003      	add	sp, #12
 80093aa:	4770      	bx	lr
 80093ac:	2000001c 	.word	0x2000001c
 80093b0:	ffff0208 	.word	0xffff0208

080093b4 <sulp>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	4604      	mov	r4, r0
 80093b8:	460d      	mov	r5, r1
 80093ba:	ec45 4b10 	vmov	d0, r4, r5
 80093be:	4616      	mov	r6, r2
 80093c0:	f002 fc20 	bl	800bc04 <__ulp>
 80093c4:	ec51 0b10 	vmov	r0, r1, d0
 80093c8:	b17e      	cbz	r6, 80093ea <sulp+0x36>
 80093ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	dd09      	ble.n	80093ea <sulp+0x36>
 80093d6:	051b      	lsls	r3, r3, #20
 80093d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80093dc:	2400      	movs	r4, #0
 80093de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80093e2:	4622      	mov	r2, r4
 80093e4:	462b      	mov	r3, r5
 80093e6:	f7f7 f907 	bl	80005f8 <__aeabi_dmul>
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	0000      	movs	r0, r0
	...

080093f0 <_strtod_l>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	b0a3      	sub	sp, #140	; 0x8c
 80093f6:	461f      	mov	r7, r3
 80093f8:	2300      	movs	r3, #0
 80093fa:	931e      	str	r3, [sp, #120]	; 0x78
 80093fc:	4ba4      	ldr	r3, [pc, #656]	; (8009690 <_strtod_l+0x2a0>)
 80093fe:	9219      	str	r2, [sp, #100]	; 0x64
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	9307      	str	r3, [sp, #28]
 8009404:	4604      	mov	r4, r0
 8009406:	4618      	mov	r0, r3
 8009408:	4688      	mov	r8, r1
 800940a:	f7f6 fee1 	bl	80001d0 <strlen>
 800940e:	f04f 0a00 	mov.w	sl, #0
 8009412:	4605      	mov	r5, r0
 8009414:	f04f 0b00 	mov.w	fp, #0
 8009418:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800941c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800941e:	781a      	ldrb	r2, [r3, #0]
 8009420:	2a2b      	cmp	r2, #43	; 0x2b
 8009422:	d04c      	beq.n	80094be <_strtod_l+0xce>
 8009424:	d839      	bhi.n	800949a <_strtod_l+0xaa>
 8009426:	2a0d      	cmp	r2, #13
 8009428:	d832      	bhi.n	8009490 <_strtod_l+0xa0>
 800942a:	2a08      	cmp	r2, #8
 800942c:	d832      	bhi.n	8009494 <_strtod_l+0xa4>
 800942e:	2a00      	cmp	r2, #0
 8009430:	d03c      	beq.n	80094ac <_strtod_l+0xbc>
 8009432:	2300      	movs	r3, #0
 8009434:	930e      	str	r3, [sp, #56]	; 0x38
 8009436:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009438:	7833      	ldrb	r3, [r6, #0]
 800943a:	2b30      	cmp	r3, #48	; 0x30
 800943c:	f040 80b4 	bne.w	80095a8 <_strtod_l+0x1b8>
 8009440:	7873      	ldrb	r3, [r6, #1]
 8009442:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009446:	2b58      	cmp	r3, #88	; 0x58
 8009448:	d16c      	bne.n	8009524 <_strtod_l+0x134>
 800944a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	ab1e      	add	r3, sp, #120	; 0x78
 8009450:	9702      	str	r7, [sp, #8]
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	4a8f      	ldr	r2, [pc, #572]	; (8009694 <_strtod_l+0x2a4>)
 8009456:	ab1f      	add	r3, sp, #124	; 0x7c
 8009458:	a91d      	add	r1, sp, #116	; 0x74
 800945a:	4620      	mov	r0, r4
 800945c:	f001 fd40 	bl	800aee0 <__gethex>
 8009460:	f010 0707 	ands.w	r7, r0, #7
 8009464:	4605      	mov	r5, r0
 8009466:	d005      	beq.n	8009474 <_strtod_l+0x84>
 8009468:	2f06      	cmp	r7, #6
 800946a:	d12a      	bne.n	80094c2 <_strtod_l+0xd2>
 800946c:	3601      	adds	r6, #1
 800946e:	2300      	movs	r3, #0
 8009470:	961d      	str	r6, [sp, #116]	; 0x74
 8009472:	930e      	str	r3, [sp, #56]	; 0x38
 8009474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009476:	2b00      	cmp	r3, #0
 8009478:	f040 8596 	bne.w	8009fa8 <_strtod_l+0xbb8>
 800947c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800947e:	b1db      	cbz	r3, 80094b8 <_strtod_l+0xc8>
 8009480:	4652      	mov	r2, sl
 8009482:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009486:	ec43 2b10 	vmov	d0, r2, r3
 800948a:	b023      	add	sp, #140	; 0x8c
 800948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009490:	2a20      	cmp	r2, #32
 8009492:	d1ce      	bne.n	8009432 <_strtod_l+0x42>
 8009494:	3301      	adds	r3, #1
 8009496:	931d      	str	r3, [sp, #116]	; 0x74
 8009498:	e7c0      	b.n	800941c <_strtod_l+0x2c>
 800949a:	2a2d      	cmp	r2, #45	; 0x2d
 800949c:	d1c9      	bne.n	8009432 <_strtod_l+0x42>
 800949e:	2201      	movs	r2, #1
 80094a0:	920e      	str	r2, [sp, #56]	; 0x38
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	921d      	str	r2, [sp, #116]	; 0x74
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1c4      	bne.n	8009436 <_strtod_l+0x46>
 80094ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 8576 	bne.w	8009fa4 <_strtod_l+0xbb4>
 80094b8:	4652      	mov	r2, sl
 80094ba:	465b      	mov	r3, fp
 80094bc:	e7e3      	b.n	8009486 <_strtod_l+0x96>
 80094be:	2200      	movs	r2, #0
 80094c0:	e7ee      	b.n	80094a0 <_strtod_l+0xb0>
 80094c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80094c4:	b13a      	cbz	r2, 80094d6 <_strtod_l+0xe6>
 80094c6:	2135      	movs	r1, #53	; 0x35
 80094c8:	a820      	add	r0, sp, #128	; 0x80
 80094ca:	f002 fca6 	bl	800be1a <__copybits>
 80094ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094d0:	4620      	mov	r0, r4
 80094d2:	f002 f86b 	bl	800b5ac <_Bfree>
 80094d6:	3f01      	subs	r7, #1
 80094d8:	2f05      	cmp	r7, #5
 80094da:	d807      	bhi.n	80094ec <_strtod_l+0xfc>
 80094dc:	e8df f007 	tbb	[pc, r7]
 80094e0:	1d180b0e 	.word	0x1d180b0e
 80094e4:	030e      	.short	0x030e
 80094e6:	f04f 0b00 	mov.w	fp, #0
 80094ea:	46da      	mov	sl, fp
 80094ec:	0728      	lsls	r0, r5, #28
 80094ee:	d5c1      	bpl.n	8009474 <_strtod_l+0x84>
 80094f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80094f4:	e7be      	b.n	8009474 <_strtod_l+0x84>
 80094f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80094fa:	e7f7      	b.n	80094ec <_strtod_l+0xfc>
 80094fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009500:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009502:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009506:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800950a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800950e:	e7ed      	b.n	80094ec <_strtod_l+0xfc>
 8009510:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009698 <_strtod_l+0x2a8>
 8009514:	f04f 0a00 	mov.w	sl, #0
 8009518:	e7e8      	b.n	80094ec <_strtod_l+0xfc>
 800951a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800951e:	f04f 3aff 	mov.w	sl, #4294967295
 8009522:	e7e3      	b.n	80094ec <_strtod_l+0xfc>
 8009524:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	921d      	str	r2, [sp, #116]	; 0x74
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	2b30      	cmp	r3, #48	; 0x30
 800952e:	d0f9      	beq.n	8009524 <_strtod_l+0x134>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d09f      	beq.n	8009474 <_strtod_l+0x84>
 8009534:	2301      	movs	r3, #1
 8009536:	f04f 0900 	mov.w	r9, #0
 800953a:	9304      	str	r3, [sp, #16]
 800953c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800953e:	930a      	str	r3, [sp, #40]	; 0x28
 8009540:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009544:	464f      	mov	r7, r9
 8009546:	220a      	movs	r2, #10
 8009548:	981d      	ldr	r0, [sp, #116]	; 0x74
 800954a:	7806      	ldrb	r6, [r0, #0]
 800954c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009550:	b2d9      	uxtb	r1, r3
 8009552:	2909      	cmp	r1, #9
 8009554:	d92a      	bls.n	80095ac <_strtod_l+0x1bc>
 8009556:	9907      	ldr	r1, [sp, #28]
 8009558:	462a      	mov	r2, r5
 800955a:	f002 fed1 	bl	800c300 <strncmp>
 800955e:	b398      	cbz	r0, 80095c8 <_strtod_l+0x1d8>
 8009560:	2000      	movs	r0, #0
 8009562:	4633      	mov	r3, r6
 8009564:	463d      	mov	r5, r7
 8009566:	9007      	str	r0, [sp, #28]
 8009568:	4602      	mov	r2, r0
 800956a:	2b65      	cmp	r3, #101	; 0x65
 800956c:	d001      	beq.n	8009572 <_strtod_l+0x182>
 800956e:	2b45      	cmp	r3, #69	; 0x45
 8009570:	d118      	bne.n	80095a4 <_strtod_l+0x1b4>
 8009572:	b91d      	cbnz	r5, 800957c <_strtod_l+0x18c>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	4303      	orrs	r3, r0
 8009578:	d098      	beq.n	80094ac <_strtod_l+0xbc>
 800957a:	2500      	movs	r5, #0
 800957c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009580:	f108 0301 	add.w	r3, r8, #1
 8009584:	931d      	str	r3, [sp, #116]	; 0x74
 8009586:	f898 3001 	ldrb.w	r3, [r8, #1]
 800958a:	2b2b      	cmp	r3, #43	; 0x2b
 800958c:	d075      	beq.n	800967a <_strtod_l+0x28a>
 800958e:	2b2d      	cmp	r3, #45	; 0x2d
 8009590:	d07b      	beq.n	800968a <_strtod_l+0x29a>
 8009592:	f04f 0c00 	mov.w	ip, #0
 8009596:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800959a:	2909      	cmp	r1, #9
 800959c:	f240 8082 	bls.w	80096a4 <_strtod_l+0x2b4>
 80095a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80095a4:	2600      	movs	r6, #0
 80095a6:	e09d      	b.n	80096e4 <_strtod_l+0x2f4>
 80095a8:	2300      	movs	r3, #0
 80095aa:	e7c4      	b.n	8009536 <_strtod_l+0x146>
 80095ac:	2f08      	cmp	r7, #8
 80095ae:	bfd8      	it	le
 80095b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80095b2:	f100 0001 	add.w	r0, r0, #1
 80095b6:	bfda      	itte	le
 80095b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80095bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80095be:	fb02 3909 	mlagt	r9, r2, r9, r3
 80095c2:	3701      	adds	r7, #1
 80095c4:	901d      	str	r0, [sp, #116]	; 0x74
 80095c6:	e7bf      	b.n	8009548 <_strtod_l+0x158>
 80095c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095ca:	195a      	adds	r2, r3, r5
 80095cc:	921d      	str	r2, [sp, #116]	; 0x74
 80095ce:	5d5b      	ldrb	r3, [r3, r5]
 80095d0:	2f00      	cmp	r7, #0
 80095d2:	d037      	beq.n	8009644 <_strtod_l+0x254>
 80095d4:	9007      	str	r0, [sp, #28]
 80095d6:	463d      	mov	r5, r7
 80095d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80095dc:	2a09      	cmp	r2, #9
 80095de:	d912      	bls.n	8009606 <_strtod_l+0x216>
 80095e0:	2201      	movs	r2, #1
 80095e2:	e7c2      	b.n	800956a <_strtod_l+0x17a>
 80095e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	921d      	str	r2, [sp, #116]	; 0x74
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	3001      	adds	r0, #1
 80095ee:	2b30      	cmp	r3, #48	; 0x30
 80095f0:	d0f8      	beq.n	80095e4 <_strtod_l+0x1f4>
 80095f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80095f6:	2a08      	cmp	r2, #8
 80095f8:	f200 84db 	bhi.w	8009fb2 <_strtod_l+0xbc2>
 80095fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80095fe:	9007      	str	r0, [sp, #28]
 8009600:	2000      	movs	r0, #0
 8009602:	920a      	str	r2, [sp, #40]	; 0x28
 8009604:	4605      	mov	r5, r0
 8009606:	3b30      	subs	r3, #48	; 0x30
 8009608:	f100 0201 	add.w	r2, r0, #1
 800960c:	d014      	beq.n	8009638 <_strtod_l+0x248>
 800960e:	9907      	ldr	r1, [sp, #28]
 8009610:	4411      	add	r1, r2
 8009612:	9107      	str	r1, [sp, #28]
 8009614:	462a      	mov	r2, r5
 8009616:	eb00 0e05 	add.w	lr, r0, r5
 800961a:	210a      	movs	r1, #10
 800961c:	4572      	cmp	r2, lr
 800961e:	d113      	bne.n	8009648 <_strtod_l+0x258>
 8009620:	182a      	adds	r2, r5, r0
 8009622:	2a08      	cmp	r2, #8
 8009624:	f105 0501 	add.w	r5, r5, #1
 8009628:	4405      	add	r5, r0
 800962a:	dc1c      	bgt.n	8009666 <_strtod_l+0x276>
 800962c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800962e:	220a      	movs	r2, #10
 8009630:	fb02 3301 	mla	r3, r2, r1, r3
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
 8009636:	2200      	movs	r2, #0
 8009638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800963a:	1c59      	adds	r1, r3, #1
 800963c:	911d      	str	r1, [sp, #116]	; 0x74
 800963e:	785b      	ldrb	r3, [r3, #1]
 8009640:	4610      	mov	r0, r2
 8009642:	e7c9      	b.n	80095d8 <_strtod_l+0x1e8>
 8009644:	4638      	mov	r0, r7
 8009646:	e7d2      	b.n	80095ee <_strtod_l+0x1fe>
 8009648:	2a08      	cmp	r2, #8
 800964a:	dc04      	bgt.n	8009656 <_strtod_l+0x266>
 800964c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800964e:	434e      	muls	r6, r1
 8009650:	9609      	str	r6, [sp, #36]	; 0x24
 8009652:	3201      	adds	r2, #1
 8009654:	e7e2      	b.n	800961c <_strtod_l+0x22c>
 8009656:	f102 0c01 	add.w	ip, r2, #1
 800965a:	f1bc 0f10 	cmp.w	ip, #16
 800965e:	bfd8      	it	le
 8009660:	fb01 f909 	mulle.w	r9, r1, r9
 8009664:	e7f5      	b.n	8009652 <_strtod_l+0x262>
 8009666:	2d10      	cmp	r5, #16
 8009668:	bfdc      	itt	le
 800966a:	220a      	movle	r2, #10
 800966c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009670:	e7e1      	b.n	8009636 <_strtod_l+0x246>
 8009672:	2300      	movs	r3, #0
 8009674:	9307      	str	r3, [sp, #28]
 8009676:	2201      	movs	r2, #1
 8009678:	e77c      	b.n	8009574 <_strtod_l+0x184>
 800967a:	f04f 0c00 	mov.w	ip, #0
 800967e:	f108 0302 	add.w	r3, r8, #2
 8009682:	931d      	str	r3, [sp, #116]	; 0x74
 8009684:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009688:	e785      	b.n	8009596 <_strtod_l+0x1a6>
 800968a:	f04f 0c01 	mov.w	ip, #1
 800968e:	e7f6      	b.n	800967e <_strtod_l+0x28e>
 8009690:	0800d2e0 	.word	0x0800d2e0
 8009694:	0800d090 	.word	0x0800d090
 8009698:	7ff00000 	.word	0x7ff00000
 800969c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800969e:	1c59      	adds	r1, r3, #1
 80096a0:	911d      	str	r1, [sp, #116]	; 0x74
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b30      	cmp	r3, #48	; 0x30
 80096a6:	d0f9      	beq.n	800969c <_strtod_l+0x2ac>
 80096a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80096ac:	2908      	cmp	r1, #8
 80096ae:	f63f af79 	bhi.w	80095a4 <_strtod_l+0x1b4>
 80096b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80096b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096b8:	9308      	str	r3, [sp, #32]
 80096ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096bc:	1c59      	adds	r1, r3, #1
 80096be:	911d      	str	r1, [sp, #116]	; 0x74
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80096c6:	2e09      	cmp	r6, #9
 80096c8:	d937      	bls.n	800973a <_strtod_l+0x34a>
 80096ca:	9e08      	ldr	r6, [sp, #32]
 80096cc:	1b89      	subs	r1, r1, r6
 80096ce:	2908      	cmp	r1, #8
 80096d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80096d4:	dc02      	bgt.n	80096dc <_strtod_l+0x2ec>
 80096d6:	4576      	cmp	r6, lr
 80096d8:	bfa8      	it	ge
 80096da:	4676      	movge	r6, lr
 80096dc:	f1bc 0f00 	cmp.w	ip, #0
 80096e0:	d000      	beq.n	80096e4 <_strtod_l+0x2f4>
 80096e2:	4276      	negs	r6, r6
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	d14f      	bne.n	8009788 <_strtod_l+0x398>
 80096e8:	9904      	ldr	r1, [sp, #16]
 80096ea:	4301      	orrs	r1, r0
 80096ec:	f47f aec2 	bne.w	8009474 <_strtod_l+0x84>
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	f47f aedb 	bne.w	80094ac <_strtod_l+0xbc>
 80096f6:	2b69      	cmp	r3, #105	; 0x69
 80096f8:	d027      	beq.n	800974a <_strtod_l+0x35a>
 80096fa:	dc24      	bgt.n	8009746 <_strtod_l+0x356>
 80096fc:	2b49      	cmp	r3, #73	; 0x49
 80096fe:	d024      	beq.n	800974a <_strtod_l+0x35a>
 8009700:	2b4e      	cmp	r3, #78	; 0x4e
 8009702:	f47f aed3 	bne.w	80094ac <_strtod_l+0xbc>
 8009706:	499e      	ldr	r1, [pc, #632]	; (8009980 <_strtod_l+0x590>)
 8009708:	a81d      	add	r0, sp, #116	; 0x74
 800970a:	f001 fe41 	bl	800b390 <__match>
 800970e:	2800      	cmp	r0, #0
 8009710:	f43f aecc 	beq.w	80094ac <_strtod_l+0xbc>
 8009714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b28      	cmp	r3, #40	; 0x28
 800971a:	d12d      	bne.n	8009778 <_strtod_l+0x388>
 800971c:	4999      	ldr	r1, [pc, #612]	; (8009984 <_strtod_l+0x594>)
 800971e:	aa20      	add	r2, sp, #128	; 0x80
 8009720:	a81d      	add	r0, sp, #116	; 0x74
 8009722:	f001 fe49 	bl	800b3b8 <__hexnan>
 8009726:	2805      	cmp	r0, #5
 8009728:	d126      	bne.n	8009778 <_strtod_l+0x388>
 800972a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800972c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009730:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009734:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009738:	e69c      	b.n	8009474 <_strtod_l+0x84>
 800973a:	210a      	movs	r1, #10
 800973c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009740:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009744:	e7b9      	b.n	80096ba <_strtod_l+0x2ca>
 8009746:	2b6e      	cmp	r3, #110	; 0x6e
 8009748:	e7db      	b.n	8009702 <_strtod_l+0x312>
 800974a:	498f      	ldr	r1, [pc, #572]	; (8009988 <_strtod_l+0x598>)
 800974c:	a81d      	add	r0, sp, #116	; 0x74
 800974e:	f001 fe1f 	bl	800b390 <__match>
 8009752:	2800      	cmp	r0, #0
 8009754:	f43f aeaa 	beq.w	80094ac <_strtod_l+0xbc>
 8009758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800975a:	498c      	ldr	r1, [pc, #560]	; (800998c <_strtod_l+0x59c>)
 800975c:	3b01      	subs	r3, #1
 800975e:	a81d      	add	r0, sp, #116	; 0x74
 8009760:	931d      	str	r3, [sp, #116]	; 0x74
 8009762:	f001 fe15 	bl	800b390 <__match>
 8009766:	b910      	cbnz	r0, 800976e <_strtod_l+0x37e>
 8009768:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800976a:	3301      	adds	r3, #1
 800976c:	931d      	str	r3, [sp, #116]	; 0x74
 800976e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800999c <_strtod_l+0x5ac>
 8009772:	f04f 0a00 	mov.w	sl, #0
 8009776:	e67d      	b.n	8009474 <_strtod_l+0x84>
 8009778:	4885      	ldr	r0, [pc, #532]	; (8009990 <_strtod_l+0x5a0>)
 800977a:	f002 fda9 	bl	800c2d0 <nan>
 800977e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009782:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009786:	e675      	b.n	8009474 <_strtod_l+0x84>
 8009788:	9b07      	ldr	r3, [sp, #28]
 800978a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800978c:	1af3      	subs	r3, r6, r3
 800978e:	2f00      	cmp	r7, #0
 8009790:	bf08      	it	eq
 8009792:	462f      	moveq	r7, r5
 8009794:	2d10      	cmp	r5, #16
 8009796:	9308      	str	r3, [sp, #32]
 8009798:	46a8      	mov	r8, r5
 800979a:	bfa8      	it	ge
 800979c:	f04f 0810 	movge.w	r8, #16
 80097a0:	f7f6 feb0 	bl	8000504 <__aeabi_ui2d>
 80097a4:	2d09      	cmp	r5, #9
 80097a6:	4682      	mov	sl, r0
 80097a8:	468b      	mov	fp, r1
 80097aa:	dd13      	ble.n	80097d4 <_strtod_l+0x3e4>
 80097ac:	4b79      	ldr	r3, [pc, #484]	; (8009994 <_strtod_l+0x5a4>)
 80097ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80097b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80097b6:	f7f6 ff1f 	bl	80005f8 <__aeabi_dmul>
 80097ba:	4682      	mov	sl, r0
 80097bc:	4648      	mov	r0, r9
 80097be:	468b      	mov	fp, r1
 80097c0:	f7f6 fea0 	bl	8000504 <__aeabi_ui2d>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4650      	mov	r0, sl
 80097ca:	4659      	mov	r1, fp
 80097cc:	f7f6 fd5e 	bl	800028c <__adddf3>
 80097d0:	4682      	mov	sl, r0
 80097d2:	468b      	mov	fp, r1
 80097d4:	2d0f      	cmp	r5, #15
 80097d6:	dc38      	bgt.n	800984a <_strtod_l+0x45a>
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f43f ae4a 	beq.w	8009474 <_strtod_l+0x84>
 80097e0:	dd24      	ble.n	800982c <_strtod_l+0x43c>
 80097e2:	2b16      	cmp	r3, #22
 80097e4:	dc0b      	bgt.n	80097fe <_strtod_l+0x40e>
 80097e6:	4d6b      	ldr	r5, [pc, #428]	; (8009994 <_strtod_l+0x5a4>)
 80097e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80097ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80097f0:	4652      	mov	r2, sl
 80097f2:	465b      	mov	r3, fp
 80097f4:	f7f6 ff00 	bl	80005f8 <__aeabi_dmul>
 80097f8:	4682      	mov	sl, r0
 80097fa:	468b      	mov	fp, r1
 80097fc:	e63a      	b.n	8009474 <_strtod_l+0x84>
 80097fe:	9a08      	ldr	r2, [sp, #32]
 8009800:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009804:	4293      	cmp	r3, r2
 8009806:	db20      	blt.n	800984a <_strtod_l+0x45a>
 8009808:	4c62      	ldr	r4, [pc, #392]	; (8009994 <_strtod_l+0x5a4>)
 800980a:	f1c5 050f 	rsb	r5, r5, #15
 800980e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009812:	4652      	mov	r2, sl
 8009814:	465b      	mov	r3, fp
 8009816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800981a:	f7f6 feed 	bl	80005f8 <__aeabi_dmul>
 800981e:	9b08      	ldr	r3, [sp, #32]
 8009820:	1b5d      	subs	r5, r3, r5
 8009822:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009826:	e9d4 2300 	ldrd	r2, r3, [r4]
 800982a:	e7e3      	b.n	80097f4 <_strtod_l+0x404>
 800982c:	9b08      	ldr	r3, [sp, #32]
 800982e:	3316      	adds	r3, #22
 8009830:	db0b      	blt.n	800984a <_strtod_l+0x45a>
 8009832:	9b07      	ldr	r3, [sp, #28]
 8009834:	4a57      	ldr	r2, [pc, #348]	; (8009994 <_strtod_l+0x5a4>)
 8009836:	1b9e      	subs	r6, r3, r6
 8009838:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800983c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009840:	4650      	mov	r0, sl
 8009842:	4659      	mov	r1, fp
 8009844:	f7f7 f802 	bl	800084c <__aeabi_ddiv>
 8009848:	e7d6      	b.n	80097f8 <_strtod_l+0x408>
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	eba5 0808 	sub.w	r8, r5, r8
 8009850:	4498      	add	r8, r3
 8009852:	f1b8 0f00 	cmp.w	r8, #0
 8009856:	dd71      	ble.n	800993c <_strtod_l+0x54c>
 8009858:	f018 030f 	ands.w	r3, r8, #15
 800985c:	d00a      	beq.n	8009874 <_strtod_l+0x484>
 800985e:	494d      	ldr	r1, [pc, #308]	; (8009994 <_strtod_l+0x5a4>)
 8009860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009864:	4652      	mov	r2, sl
 8009866:	465b      	mov	r3, fp
 8009868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800986c:	f7f6 fec4 	bl	80005f8 <__aeabi_dmul>
 8009870:	4682      	mov	sl, r0
 8009872:	468b      	mov	fp, r1
 8009874:	f038 080f 	bics.w	r8, r8, #15
 8009878:	d04d      	beq.n	8009916 <_strtod_l+0x526>
 800987a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800987e:	dd22      	ble.n	80098c6 <_strtod_l+0x4d6>
 8009880:	2500      	movs	r5, #0
 8009882:	462e      	mov	r6, r5
 8009884:	9509      	str	r5, [sp, #36]	; 0x24
 8009886:	9507      	str	r5, [sp, #28]
 8009888:	2322      	movs	r3, #34	; 0x22
 800988a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800999c <_strtod_l+0x5ac>
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	f04f 0a00 	mov.w	sl, #0
 8009894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009896:	2b00      	cmp	r3, #0
 8009898:	f43f adec 	beq.w	8009474 <_strtod_l+0x84>
 800989c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800989e:	4620      	mov	r0, r4
 80098a0:	f001 fe84 	bl	800b5ac <_Bfree>
 80098a4:	9907      	ldr	r1, [sp, #28]
 80098a6:	4620      	mov	r0, r4
 80098a8:	f001 fe80 	bl	800b5ac <_Bfree>
 80098ac:	4631      	mov	r1, r6
 80098ae:	4620      	mov	r0, r4
 80098b0:	f001 fe7c 	bl	800b5ac <_Bfree>
 80098b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098b6:	4620      	mov	r0, r4
 80098b8:	f001 fe78 	bl	800b5ac <_Bfree>
 80098bc:	4629      	mov	r1, r5
 80098be:	4620      	mov	r0, r4
 80098c0:	f001 fe74 	bl	800b5ac <_Bfree>
 80098c4:	e5d6      	b.n	8009474 <_strtod_l+0x84>
 80098c6:	2300      	movs	r3, #0
 80098c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80098cc:	4650      	mov	r0, sl
 80098ce:	4659      	mov	r1, fp
 80098d0:	4699      	mov	r9, r3
 80098d2:	f1b8 0f01 	cmp.w	r8, #1
 80098d6:	dc21      	bgt.n	800991c <_strtod_l+0x52c>
 80098d8:	b10b      	cbz	r3, 80098de <_strtod_l+0x4ee>
 80098da:	4682      	mov	sl, r0
 80098dc:	468b      	mov	fp, r1
 80098de:	4b2e      	ldr	r3, [pc, #184]	; (8009998 <_strtod_l+0x5a8>)
 80098e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80098e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80098e8:	4652      	mov	r2, sl
 80098ea:	465b      	mov	r3, fp
 80098ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 80098f0:	f7f6 fe82 	bl	80005f8 <__aeabi_dmul>
 80098f4:	4b29      	ldr	r3, [pc, #164]	; (800999c <_strtod_l+0x5ac>)
 80098f6:	460a      	mov	r2, r1
 80098f8:	400b      	ands	r3, r1
 80098fa:	4929      	ldr	r1, [pc, #164]	; (80099a0 <_strtod_l+0x5b0>)
 80098fc:	428b      	cmp	r3, r1
 80098fe:	4682      	mov	sl, r0
 8009900:	d8be      	bhi.n	8009880 <_strtod_l+0x490>
 8009902:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009906:	428b      	cmp	r3, r1
 8009908:	bf86      	itte	hi
 800990a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80099a4 <_strtod_l+0x5b4>
 800990e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009912:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009916:	2300      	movs	r3, #0
 8009918:	9304      	str	r3, [sp, #16]
 800991a:	e081      	b.n	8009a20 <_strtod_l+0x630>
 800991c:	f018 0f01 	tst.w	r8, #1
 8009920:	d007      	beq.n	8009932 <_strtod_l+0x542>
 8009922:	4b1d      	ldr	r3, [pc, #116]	; (8009998 <_strtod_l+0x5a8>)
 8009924:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f7f6 fe64 	bl	80005f8 <__aeabi_dmul>
 8009930:	2301      	movs	r3, #1
 8009932:	f109 0901 	add.w	r9, r9, #1
 8009936:	ea4f 0868 	mov.w	r8, r8, asr #1
 800993a:	e7ca      	b.n	80098d2 <_strtod_l+0x4e2>
 800993c:	d0eb      	beq.n	8009916 <_strtod_l+0x526>
 800993e:	f1c8 0800 	rsb	r8, r8, #0
 8009942:	f018 020f 	ands.w	r2, r8, #15
 8009946:	d00a      	beq.n	800995e <_strtod_l+0x56e>
 8009948:	4b12      	ldr	r3, [pc, #72]	; (8009994 <_strtod_l+0x5a4>)
 800994a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800994e:	4650      	mov	r0, sl
 8009950:	4659      	mov	r1, fp
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f7f6 ff79 	bl	800084c <__aeabi_ddiv>
 800995a:	4682      	mov	sl, r0
 800995c:	468b      	mov	fp, r1
 800995e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009962:	d0d8      	beq.n	8009916 <_strtod_l+0x526>
 8009964:	f1b8 0f1f 	cmp.w	r8, #31
 8009968:	dd1e      	ble.n	80099a8 <_strtod_l+0x5b8>
 800996a:	2500      	movs	r5, #0
 800996c:	462e      	mov	r6, r5
 800996e:	9509      	str	r5, [sp, #36]	; 0x24
 8009970:	9507      	str	r5, [sp, #28]
 8009972:	2322      	movs	r3, #34	; 0x22
 8009974:	f04f 0a00 	mov.w	sl, #0
 8009978:	f04f 0b00 	mov.w	fp, #0
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	e789      	b.n	8009894 <_strtod_l+0x4a4>
 8009980:	0800d061 	.word	0x0800d061
 8009984:	0800d0a4 	.word	0x0800d0a4
 8009988:	0800d059 	.word	0x0800d059
 800998c:	0800d1e4 	.word	0x0800d1e4
 8009990:	0800d4a0 	.word	0x0800d4a0
 8009994:	0800d380 	.word	0x0800d380
 8009998:	0800d358 	.word	0x0800d358
 800999c:	7ff00000 	.word	0x7ff00000
 80099a0:	7ca00000 	.word	0x7ca00000
 80099a4:	7fefffff 	.word	0x7fefffff
 80099a8:	f018 0310 	ands.w	r3, r8, #16
 80099ac:	bf18      	it	ne
 80099ae:	236a      	movne	r3, #106	; 0x6a
 80099b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009d68 <_strtod_l+0x978>
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	4650      	mov	r0, sl
 80099b8:	4659      	mov	r1, fp
 80099ba:	2300      	movs	r3, #0
 80099bc:	f018 0f01 	tst.w	r8, #1
 80099c0:	d004      	beq.n	80099cc <_strtod_l+0x5dc>
 80099c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80099c6:	f7f6 fe17 	bl	80005f8 <__aeabi_dmul>
 80099ca:	2301      	movs	r3, #1
 80099cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80099d0:	f109 0908 	add.w	r9, r9, #8
 80099d4:	d1f2      	bne.n	80099bc <_strtod_l+0x5cc>
 80099d6:	b10b      	cbz	r3, 80099dc <_strtod_l+0x5ec>
 80099d8:	4682      	mov	sl, r0
 80099da:	468b      	mov	fp, r1
 80099dc:	9b04      	ldr	r3, [sp, #16]
 80099de:	b1bb      	cbz	r3, 8009a10 <_strtod_l+0x620>
 80099e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80099e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	4659      	mov	r1, fp
 80099ec:	dd10      	ble.n	8009a10 <_strtod_l+0x620>
 80099ee:	2b1f      	cmp	r3, #31
 80099f0:	f340 8128 	ble.w	8009c44 <_strtod_l+0x854>
 80099f4:	2b34      	cmp	r3, #52	; 0x34
 80099f6:	bfde      	ittt	le
 80099f8:	3b20      	suble	r3, #32
 80099fa:	f04f 32ff 	movle.w	r2, #4294967295
 80099fe:	fa02 f303 	lslle.w	r3, r2, r3
 8009a02:	f04f 0a00 	mov.w	sl, #0
 8009a06:	bfcc      	ite	gt
 8009a08:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009a0c:	ea03 0b01 	andle.w	fp, r3, r1
 8009a10:	2200      	movs	r2, #0
 8009a12:	2300      	movs	r3, #0
 8009a14:	4650      	mov	r0, sl
 8009a16:	4659      	mov	r1, fp
 8009a18:	f7f7 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1a4      	bne.n	800996a <_strtod_l+0x57a>
 8009a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a26:	462b      	mov	r3, r5
 8009a28:	463a      	mov	r2, r7
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f001 fe2a 	bl	800b684 <__s2b>
 8009a30:	9009      	str	r0, [sp, #36]	; 0x24
 8009a32:	2800      	cmp	r0, #0
 8009a34:	f43f af24 	beq.w	8009880 <_strtod_l+0x490>
 8009a38:	9b07      	ldr	r3, [sp, #28]
 8009a3a:	1b9e      	subs	r6, r3, r6
 8009a3c:	9b08      	ldr	r3, [sp, #32]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfb4      	ite	lt
 8009a42:	4633      	movlt	r3, r6
 8009a44:	2300      	movge	r3, #0
 8009a46:	9310      	str	r3, [sp, #64]	; 0x40
 8009a48:	9b08      	ldr	r3, [sp, #32]
 8009a4a:	2500      	movs	r5, #0
 8009a4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a50:	9318      	str	r3, [sp, #96]	; 0x60
 8009a52:	462e      	mov	r6, r5
 8009a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a56:	4620      	mov	r0, r4
 8009a58:	6859      	ldr	r1, [r3, #4]
 8009a5a:	f001 fd67 	bl	800b52c <_Balloc>
 8009a5e:	9007      	str	r0, [sp, #28]
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f43f af11 	beq.w	8009888 <_strtod_l+0x498>
 8009a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a68:	691a      	ldr	r2, [r3, #16]
 8009a6a:	3202      	adds	r2, #2
 8009a6c:	f103 010c 	add.w	r1, r3, #12
 8009a70:	0092      	lsls	r2, r2, #2
 8009a72:	300c      	adds	r0, #12
 8009a74:	f7fe fde8 	bl	8008648 <memcpy>
 8009a78:	ec4b ab10 	vmov	d0, sl, fp
 8009a7c:	aa20      	add	r2, sp, #128	; 0x80
 8009a7e:	a91f      	add	r1, sp, #124	; 0x7c
 8009a80:	4620      	mov	r0, r4
 8009a82:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009a86:	f002 f939 	bl	800bcfc <__d2b>
 8009a8a:	901e      	str	r0, [sp, #120]	; 0x78
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	f43f aefb 	beq.w	8009888 <_strtod_l+0x498>
 8009a92:	2101      	movs	r1, #1
 8009a94:	4620      	mov	r0, r4
 8009a96:	f001 fe8f 	bl	800b7b8 <__i2b>
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f43f aef3 	beq.w	8009888 <_strtod_l+0x498>
 8009aa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009aa4:	9904      	ldr	r1, [sp, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfab      	itete	ge
 8009aaa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009aac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009aae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009ab0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009ab4:	bfac      	ite	ge
 8009ab6:	eb03 0902 	addge.w	r9, r3, r2
 8009aba:	1ad7      	sublt	r7, r2, r3
 8009abc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009abe:	eba3 0801 	sub.w	r8, r3, r1
 8009ac2:	4490      	add	r8, r2
 8009ac4:	4ba3      	ldr	r3, [pc, #652]	; (8009d54 <_strtod_l+0x964>)
 8009ac6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009aca:	4598      	cmp	r8, r3
 8009acc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ad0:	f280 80cc 	bge.w	8009c6c <_strtod_l+0x87c>
 8009ad4:	eba3 0308 	sub.w	r3, r3, r8
 8009ad8:	2b1f      	cmp	r3, #31
 8009ada:	eba2 0203 	sub.w	r2, r2, r3
 8009ade:	f04f 0101 	mov.w	r1, #1
 8009ae2:	f300 80b6 	bgt.w	8009c52 <_strtod_l+0x862>
 8009ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aea:	9311      	str	r3, [sp, #68]	; 0x44
 8009aec:	2300      	movs	r3, #0
 8009aee:	930c      	str	r3, [sp, #48]	; 0x30
 8009af0:	eb09 0802 	add.w	r8, r9, r2
 8009af4:	9b04      	ldr	r3, [sp, #16]
 8009af6:	45c1      	cmp	r9, r8
 8009af8:	4417      	add	r7, r2
 8009afa:	441f      	add	r7, r3
 8009afc:	464b      	mov	r3, r9
 8009afe:	bfa8      	it	ge
 8009b00:	4643      	movge	r3, r8
 8009b02:	42bb      	cmp	r3, r7
 8009b04:	bfa8      	it	ge
 8009b06:	463b      	movge	r3, r7
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bfc2      	ittt	gt
 8009b0c:	eba8 0803 	subgt.w	r8, r8, r3
 8009b10:	1aff      	subgt	r7, r7, r3
 8009b12:	eba9 0903 	subgt.w	r9, r9, r3
 8009b16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	dd17      	ble.n	8009b4c <_strtod_l+0x75c>
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4620      	mov	r0, r4
 8009b22:	f001 ff05 	bl	800b930 <__pow5mult>
 8009b26:	4606      	mov	r6, r0
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	f43f aead 	beq.w	8009888 <_strtod_l+0x498>
 8009b2e:	4601      	mov	r1, r0
 8009b30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009b32:	4620      	mov	r0, r4
 8009b34:	f001 fe56 	bl	800b7e4 <__multiply>
 8009b38:	900f      	str	r0, [sp, #60]	; 0x3c
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	f43f aea4 	beq.w	8009888 <_strtod_l+0x498>
 8009b40:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b42:	4620      	mov	r0, r4
 8009b44:	f001 fd32 	bl	800b5ac <_Bfree>
 8009b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b4a:	931e      	str	r3, [sp, #120]	; 0x78
 8009b4c:	f1b8 0f00 	cmp.w	r8, #0
 8009b50:	f300 8091 	bgt.w	8009c76 <_strtod_l+0x886>
 8009b54:	9b08      	ldr	r3, [sp, #32]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dd08      	ble.n	8009b6c <_strtod_l+0x77c>
 8009b5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b5c:	9907      	ldr	r1, [sp, #28]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f001 fee6 	bl	800b930 <__pow5mult>
 8009b64:	9007      	str	r0, [sp, #28]
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f43f ae8e 	beq.w	8009888 <_strtod_l+0x498>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	dd08      	ble.n	8009b82 <_strtod_l+0x792>
 8009b70:	9907      	ldr	r1, [sp, #28]
 8009b72:	463a      	mov	r2, r7
 8009b74:	4620      	mov	r0, r4
 8009b76:	f001 ff35 	bl	800b9e4 <__lshift>
 8009b7a:	9007      	str	r0, [sp, #28]
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f43f ae83 	beq.w	8009888 <_strtod_l+0x498>
 8009b82:	f1b9 0f00 	cmp.w	r9, #0
 8009b86:	dd08      	ble.n	8009b9a <_strtod_l+0x7aa>
 8009b88:	4631      	mov	r1, r6
 8009b8a:	464a      	mov	r2, r9
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f001 ff29 	bl	800b9e4 <__lshift>
 8009b92:	4606      	mov	r6, r0
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f43f ae77 	beq.w	8009888 <_strtod_l+0x498>
 8009b9a:	9a07      	ldr	r2, [sp, #28]
 8009b9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f001 ffa8 	bl	800baf4 <__mdiff>
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f43f ae6e 	beq.w	8009888 <_strtod_l+0x498>
 8009bac:	68c3      	ldr	r3, [r0, #12]
 8009bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60c3      	str	r3, [r0, #12]
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	f001 ff81 	bl	800babc <__mcmp>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	da65      	bge.n	8009c8a <_strtod_l+0x89a>
 8009bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bc0:	ea53 030a 	orrs.w	r3, r3, sl
 8009bc4:	f040 8087 	bne.w	8009cd6 <_strtod_l+0x8e6>
 8009bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f040 8082 	bne.w	8009cd6 <_strtod_l+0x8e6>
 8009bd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bd6:	0d1b      	lsrs	r3, r3, #20
 8009bd8:	051b      	lsls	r3, r3, #20
 8009bda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009bde:	d97a      	bls.n	8009cd6 <_strtod_l+0x8e6>
 8009be0:	696b      	ldr	r3, [r5, #20]
 8009be2:	b913      	cbnz	r3, 8009bea <_strtod_l+0x7fa>
 8009be4:	692b      	ldr	r3, [r5, #16]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	dd75      	ble.n	8009cd6 <_strtod_l+0x8e6>
 8009bea:	4629      	mov	r1, r5
 8009bec:	2201      	movs	r2, #1
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f001 fef8 	bl	800b9e4 <__lshift>
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	f001 ff60 	bl	800babc <__mcmp>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	dd6a      	ble.n	8009cd6 <_strtod_l+0x8e6>
 8009c00:	9904      	ldr	r1, [sp, #16]
 8009c02:	4a55      	ldr	r2, [pc, #340]	; (8009d58 <_strtod_l+0x968>)
 8009c04:	465b      	mov	r3, fp
 8009c06:	2900      	cmp	r1, #0
 8009c08:	f000 8085 	beq.w	8009d16 <_strtod_l+0x926>
 8009c0c:	ea02 010b 	and.w	r1, r2, fp
 8009c10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c14:	dc7f      	bgt.n	8009d16 <_strtod_l+0x926>
 8009c16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c1a:	f77f aeaa 	ble.w	8009972 <_strtod_l+0x582>
 8009c1e:	4a4f      	ldr	r2, [pc, #316]	; (8009d5c <_strtod_l+0x96c>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009c26:	4650      	mov	r0, sl
 8009c28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009c2c:	4659      	mov	r1, fp
 8009c2e:	f7f6 fce3 	bl	80005f8 <__aeabi_dmul>
 8009c32:	460b      	mov	r3, r1
 8009c34:	4303      	orrs	r3, r0
 8009c36:	bf08      	it	eq
 8009c38:	2322      	moveq	r3, #34	; 0x22
 8009c3a:	4682      	mov	sl, r0
 8009c3c:	468b      	mov	fp, r1
 8009c3e:	bf08      	it	eq
 8009c40:	6023      	streq	r3, [r4, #0]
 8009c42:	e62b      	b.n	800989c <_strtod_l+0x4ac>
 8009c44:	f04f 32ff 	mov.w	r2, #4294967295
 8009c48:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4c:	ea03 0a0a 	and.w	sl, r3, sl
 8009c50:	e6de      	b.n	8009a10 <_strtod_l+0x620>
 8009c52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009c56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009c5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009c5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009c62:	fa01 f308 	lsl.w	r3, r1, r8
 8009c66:	930c      	str	r3, [sp, #48]	; 0x30
 8009c68:	9111      	str	r1, [sp, #68]	; 0x44
 8009c6a:	e741      	b.n	8009af0 <_strtod_l+0x700>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c70:	2301      	movs	r3, #1
 8009c72:	9311      	str	r3, [sp, #68]	; 0x44
 8009c74:	e73c      	b.n	8009af0 <_strtod_l+0x700>
 8009c76:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c78:	4642      	mov	r2, r8
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f001 feb2 	bl	800b9e4 <__lshift>
 8009c80:	901e      	str	r0, [sp, #120]	; 0x78
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f47f af66 	bne.w	8009b54 <_strtod_l+0x764>
 8009c88:	e5fe      	b.n	8009888 <_strtod_l+0x498>
 8009c8a:	465f      	mov	r7, fp
 8009c8c:	d16e      	bne.n	8009d6c <_strtod_l+0x97c>
 8009c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c94:	b342      	cbz	r2, 8009ce8 <_strtod_l+0x8f8>
 8009c96:	4a32      	ldr	r2, [pc, #200]	; (8009d60 <_strtod_l+0x970>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d128      	bne.n	8009cee <_strtod_l+0x8fe>
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	b1eb      	cbz	r3, 8009cde <_strtod_l+0x8ee>
 8009ca2:	4a2d      	ldr	r2, [pc, #180]	; (8009d58 <_strtod_l+0x968>)
 8009ca4:	403a      	ands	r2, r7
 8009ca6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009caa:	f04f 31ff 	mov.w	r1, #4294967295
 8009cae:	d819      	bhi.n	8009ce4 <_strtod_l+0x8f4>
 8009cb0:	0d12      	lsrs	r2, r2, #20
 8009cb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cba:	4298      	cmp	r0, r3
 8009cbc:	d117      	bne.n	8009cee <_strtod_l+0x8fe>
 8009cbe:	4b29      	ldr	r3, [pc, #164]	; (8009d64 <_strtod_l+0x974>)
 8009cc0:	429f      	cmp	r7, r3
 8009cc2:	d102      	bne.n	8009cca <_strtod_l+0x8da>
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f43f addf 	beq.w	8009888 <_strtod_l+0x498>
 8009cca:	4b23      	ldr	r3, [pc, #140]	; (8009d58 <_strtod_l+0x968>)
 8009ccc:	403b      	ands	r3, r7
 8009cce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009cd2:	f04f 0a00 	mov.w	sl, #0
 8009cd6:	9b04      	ldr	r3, [sp, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1a0      	bne.n	8009c1e <_strtod_l+0x82e>
 8009cdc:	e5de      	b.n	800989c <_strtod_l+0x4ac>
 8009cde:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce2:	e7ea      	b.n	8009cba <_strtod_l+0x8ca>
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	e7e8      	b.n	8009cba <_strtod_l+0x8ca>
 8009ce8:	ea53 030a 	orrs.w	r3, r3, sl
 8009cec:	d088      	beq.n	8009c00 <_strtod_l+0x810>
 8009cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cf0:	b1db      	cbz	r3, 8009d2a <_strtod_l+0x93a>
 8009cf2:	423b      	tst	r3, r7
 8009cf4:	d0ef      	beq.n	8009cd6 <_strtod_l+0x8e6>
 8009cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cf8:	9a04      	ldr	r2, [sp, #16]
 8009cfa:	4650      	mov	r0, sl
 8009cfc:	4659      	mov	r1, fp
 8009cfe:	b1c3      	cbz	r3, 8009d32 <_strtod_l+0x942>
 8009d00:	f7ff fb58 	bl	80093b4 <sulp>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d0c:	f7f6 fabe 	bl	800028c <__adddf3>
 8009d10:	4682      	mov	sl, r0
 8009d12:	468b      	mov	fp, r1
 8009d14:	e7df      	b.n	8009cd6 <_strtod_l+0x8e6>
 8009d16:	4013      	ands	r3, r2
 8009d18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d24:	f04f 3aff 	mov.w	sl, #4294967295
 8009d28:	e7d5      	b.n	8009cd6 <_strtod_l+0x8e6>
 8009d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d2c:	ea13 0f0a 	tst.w	r3, sl
 8009d30:	e7e0      	b.n	8009cf4 <_strtod_l+0x904>
 8009d32:	f7ff fb3f 	bl	80093b4 <sulp>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d3e:	f7f6 faa3 	bl	8000288 <__aeabi_dsub>
 8009d42:	2200      	movs	r2, #0
 8009d44:	2300      	movs	r3, #0
 8009d46:	4682      	mov	sl, r0
 8009d48:	468b      	mov	fp, r1
 8009d4a:	f7f6 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d0c1      	beq.n	8009cd6 <_strtod_l+0x8e6>
 8009d52:	e60e      	b.n	8009972 <_strtod_l+0x582>
 8009d54:	fffffc02 	.word	0xfffffc02
 8009d58:	7ff00000 	.word	0x7ff00000
 8009d5c:	39500000 	.word	0x39500000
 8009d60:	000fffff 	.word	0x000fffff
 8009d64:	7fefffff 	.word	0x7fefffff
 8009d68:	0800d0b8 	.word	0x0800d0b8
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f002 f820 	bl	800bdb4 <__ratio>
 8009d74:	ec59 8b10 	vmov	r8, r9, d0
 8009d78:	ee10 0a10 	vmov	r0, s0
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d82:	4649      	mov	r1, r9
 8009d84:	f7f6 feb4 	bl	8000af0 <__aeabi_dcmple>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d07c      	beq.n	8009e86 <_strtod_l+0xa96>
 8009d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d04c      	beq.n	8009e2c <_strtod_l+0xa3c>
 8009d92:	4b95      	ldr	r3, [pc, #596]	; (8009fe8 <_strtod_l+0xbf8>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009d9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009fe8 <_strtod_l+0xbf8>
 8009d9e:	f04f 0800 	mov.w	r8, #0
 8009da2:	4b92      	ldr	r3, [pc, #584]	; (8009fec <_strtod_l+0xbfc>)
 8009da4:	403b      	ands	r3, r7
 8009da6:	9311      	str	r3, [sp, #68]	; 0x44
 8009da8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009daa:	4b91      	ldr	r3, [pc, #580]	; (8009ff0 <_strtod_l+0xc00>)
 8009dac:	429a      	cmp	r2, r3
 8009dae:	f040 80b2 	bne.w	8009f16 <_strtod_l+0xb26>
 8009db2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009dbe:	ec4b ab10 	vmov	d0, sl, fp
 8009dc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009dc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009dca:	f001 ff1b 	bl	800bc04 <__ulp>
 8009dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dd2:	ec53 2b10 	vmov	r2, r3, d0
 8009dd6:	f7f6 fc0f 	bl	80005f8 <__aeabi_dmul>
 8009dda:	4652      	mov	r2, sl
 8009ddc:	465b      	mov	r3, fp
 8009dde:	f7f6 fa55 	bl	800028c <__adddf3>
 8009de2:	460b      	mov	r3, r1
 8009de4:	4981      	ldr	r1, [pc, #516]	; (8009fec <_strtod_l+0xbfc>)
 8009de6:	4a83      	ldr	r2, [pc, #524]	; (8009ff4 <_strtod_l+0xc04>)
 8009de8:	4019      	ands	r1, r3
 8009dea:	4291      	cmp	r1, r2
 8009dec:	4682      	mov	sl, r0
 8009dee:	d95e      	bls.n	8009eae <_strtod_l+0xabe>
 8009df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009df2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d103      	bne.n	8009e02 <_strtod_l+0xa12>
 8009dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	f43f ad43 	beq.w	8009888 <_strtod_l+0x498>
 8009e02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a000 <_strtod_l+0xc10>
 8009e06:	f04f 3aff 	mov.w	sl, #4294967295
 8009e0a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f001 fbcd 	bl	800b5ac <_Bfree>
 8009e12:	9907      	ldr	r1, [sp, #28]
 8009e14:	4620      	mov	r0, r4
 8009e16:	f001 fbc9 	bl	800b5ac <_Bfree>
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f001 fbc5 	bl	800b5ac <_Bfree>
 8009e22:	4629      	mov	r1, r5
 8009e24:	4620      	mov	r0, r4
 8009e26:	f001 fbc1 	bl	800b5ac <_Bfree>
 8009e2a:	e613      	b.n	8009a54 <_strtod_l+0x664>
 8009e2c:	f1ba 0f00 	cmp.w	sl, #0
 8009e30:	d11b      	bne.n	8009e6a <_strtod_l+0xa7a>
 8009e32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e36:	b9f3      	cbnz	r3, 8009e76 <_strtod_l+0xa86>
 8009e38:	4b6b      	ldr	r3, [pc, #428]	; (8009fe8 <_strtod_l+0xbf8>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	4649      	mov	r1, r9
 8009e40:	f7f6 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8009e44:	b9d0      	cbnz	r0, 8009e7c <_strtod_l+0xa8c>
 8009e46:	4640      	mov	r0, r8
 8009e48:	4649      	mov	r1, r9
 8009e4a:	4b6b      	ldr	r3, [pc, #428]	; (8009ff8 <_strtod_l+0xc08>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f7f6 fbd3 	bl	80005f8 <__aeabi_dmul>
 8009e52:	4680      	mov	r8, r0
 8009e54:	4689      	mov	r9, r1
 8009e56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009e5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009e64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009e68:	e79b      	b.n	8009da2 <_strtod_l+0x9b2>
 8009e6a:	f1ba 0f01 	cmp.w	sl, #1
 8009e6e:	d102      	bne.n	8009e76 <_strtod_l+0xa86>
 8009e70:	2f00      	cmp	r7, #0
 8009e72:	f43f ad7e 	beq.w	8009972 <_strtod_l+0x582>
 8009e76:	4b61      	ldr	r3, [pc, #388]	; (8009ffc <_strtod_l+0xc0c>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	e78c      	b.n	8009d96 <_strtod_l+0x9a6>
 8009e7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ff8 <_strtod_l+0xc08>
 8009e80:	f04f 0800 	mov.w	r8, #0
 8009e84:	e7e7      	b.n	8009e56 <_strtod_l+0xa66>
 8009e86:	4b5c      	ldr	r3, [pc, #368]	; (8009ff8 <_strtod_l+0xc08>)
 8009e88:	4640      	mov	r0, r8
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f7f6 fbb3 	bl	80005f8 <__aeabi_dmul>
 8009e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e94:	4680      	mov	r8, r0
 8009e96:	4689      	mov	r9, r1
 8009e98:	b933      	cbnz	r3, 8009ea8 <_strtod_l+0xab8>
 8009e9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e9e:	9012      	str	r0, [sp, #72]	; 0x48
 8009ea0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ea2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009ea6:	e7dd      	b.n	8009e64 <_strtod_l+0xa74>
 8009ea8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009eac:	e7f9      	b.n	8009ea2 <_strtod_l+0xab2>
 8009eae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009eb2:	9b04      	ldr	r3, [sp, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1a8      	bne.n	8009e0a <_strtod_l+0xa1a>
 8009eb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ebc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ebe:	0d1b      	lsrs	r3, r3, #20
 8009ec0:	051b      	lsls	r3, r3, #20
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d1a1      	bne.n	8009e0a <_strtod_l+0xa1a>
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	4649      	mov	r1, r9
 8009eca:	f7f6 fedd 	bl	8000c88 <__aeabi_d2lz>
 8009ece:	f7f6 fb65 	bl	800059c <__aeabi_l2d>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4649      	mov	r1, r9
 8009eda:	f7f6 f9d5 	bl	8000288 <__aeabi_dsub>
 8009ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ee4:	ea43 030a 	orr.w	r3, r3, sl
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	4680      	mov	r8, r0
 8009eec:	4689      	mov	r9, r1
 8009eee:	d053      	beq.n	8009f98 <_strtod_l+0xba8>
 8009ef0:	a335      	add	r3, pc, #212	; (adr r3, 8009fc8 <_strtod_l+0xbd8>)
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f7f6 fdf1 	bl	8000adc <__aeabi_dcmplt>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	f47f acce 	bne.w	800989c <_strtod_l+0x4ac>
 8009f00:	a333      	add	r3, pc, #204	; (adr r3, 8009fd0 <_strtod_l+0xbe0>)
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	4640      	mov	r0, r8
 8009f08:	4649      	mov	r1, r9
 8009f0a:	f7f6 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f43f af7b 	beq.w	8009e0a <_strtod_l+0xa1a>
 8009f14:	e4c2      	b.n	800989c <_strtod_l+0x4ac>
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	b333      	cbz	r3, 8009f68 <_strtod_l+0xb78>
 8009f1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f20:	d822      	bhi.n	8009f68 <_strtod_l+0xb78>
 8009f22:	a32d      	add	r3, pc, #180	; (adr r3, 8009fd8 <_strtod_l+0xbe8>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	f7f6 fde0 	bl	8000af0 <__aeabi_dcmple>
 8009f30:	b1a0      	cbz	r0, 8009f5c <_strtod_l+0xb6c>
 8009f32:	4649      	mov	r1, r9
 8009f34:	4640      	mov	r0, r8
 8009f36:	f7f6 fe37 	bl	8000ba8 <__aeabi_d2uiz>
 8009f3a:	2801      	cmp	r0, #1
 8009f3c:	bf38      	it	cc
 8009f3e:	2001      	movcc	r0, #1
 8009f40:	f7f6 fae0 	bl	8000504 <__aeabi_ui2d>
 8009f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f46:	4680      	mov	r8, r0
 8009f48:	4689      	mov	r9, r1
 8009f4a:	bb13      	cbnz	r3, 8009f92 <_strtod_l+0xba2>
 8009f4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f50:	9014      	str	r0, [sp, #80]	; 0x50
 8009f52:	9315      	str	r3, [sp, #84]	; 0x54
 8009f54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009f58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	930d      	str	r3, [sp, #52]	; 0x34
 8009f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f6c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009f70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009f74:	f001 fe46 	bl	800bc04 <__ulp>
 8009f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f7c:	ec53 2b10 	vmov	r2, r3, d0
 8009f80:	f7f6 fb3a 	bl	80005f8 <__aeabi_dmul>
 8009f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f88:	f7f6 f980 	bl	800028c <__adddf3>
 8009f8c:	4682      	mov	sl, r0
 8009f8e:	468b      	mov	fp, r1
 8009f90:	e78f      	b.n	8009eb2 <_strtod_l+0xac2>
 8009f92:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009f96:	e7dd      	b.n	8009f54 <_strtod_l+0xb64>
 8009f98:	a311      	add	r3, pc, #68	; (adr r3, 8009fe0 <_strtod_l+0xbf0>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 fd9d 	bl	8000adc <__aeabi_dcmplt>
 8009fa2:	e7b4      	b.n	8009f0e <_strtod_l+0xb1e>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	930e      	str	r3, [sp, #56]	; 0x38
 8009fa8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009faa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	f7ff ba65 	b.w	800947c <_strtod_l+0x8c>
 8009fb2:	2b65      	cmp	r3, #101	; 0x65
 8009fb4:	f43f ab5d 	beq.w	8009672 <_strtod_l+0x282>
 8009fb8:	2b45      	cmp	r3, #69	; 0x45
 8009fba:	f43f ab5a 	beq.w	8009672 <_strtod_l+0x282>
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f7ff bb92 	b.w	80096e8 <_strtod_l+0x2f8>
 8009fc4:	f3af 8000 	nop.w
 8009fc8:	94a03595 	.word	0x94a03595
 8009fcc:	3fdfffff 	.word	0x3fdfffff
 8009fd0:	35afe535 	.word	0x35afe535
 8009fd4:	3fe00000 	.word	0x3fe00000
 8009fd8:	ffc00000 	.word	0xffc00000
 8009fdc:	41dfffff 	.word	0x41dfffff
 8009fe0:	94a03595 	.word	0x94a03595
 8009fe4:	3fcfffff 	.word	0x3fcfffff
 8009fe8:	3ff00000 	.word	0x3ff00000
 8009fec:	7ff00000 	.word	0x7ff00000
 8009ff0:	7fe00000 	.word	0x7fe00000
 8009ff4:	7c9fffff 	.word	0x7c9fffff
 8009ff8:	3fe00000 	.word	0x3fe00000
 8009ffc:	bff00000 	.word	0xbff00000
 800a000:	7fefffff 	.word	0x7fefffff

0800a004 <_strtod_r>:
 800a004:	4b01      	ldr	r3, [pc, #4]	; (800a00c <_strtod_r+0x8>)
 800a006:	f7ff b9f3 	b.w	80093f0 <_strtod_l>
 800a00a:	bf00      	nop
 800a00c:	20000084 	.word	0x20000084

0800a010 <_strtol_l.isra.0>:
 800a010:	2b01      	cmp	r3, #1
 800a012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a016:	d001      	beq.n	800a01c <_strtol_l.isra.0+0xc>
 800a018:	2b24      	cmp	r3, #36	; 0x24
 800a01a:	d906      	bls.n	800a02a <_strtol_l.isra.0+0x1a>
 800a01c:	f7fe faea 	bl	80085f4 <__errno>
 800a020:	2316      	movs	r3, #22
 800a022:	6003      	str	r3, [r0, #0]
 800a024:	2000      	movs	r0, #0
 800a026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02a:	4f3a      	ldr	r7, [pc, #232]	; (800a114 <_strtol_l.isra.0+0x104>)
 800a02c:	468e      	mov	lr, r1
 800a02e:	4676      	mov	r6, lr
 800a030:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a034:	5de5      	ldrb	r5, [r4, r7]
 800a036:	f015 0508 	ands.w	r5, r5, #8
 800a03a:	d1f8      	bne.n	800a02e <_strtol_l.isra.0+0x1e>
 800a03c:	2c2d      	cmp	r4, #45	; 0x2d
 800a03e:	d134      	bne.n	800a0aa <_strtol_l.isra.0+0x9a>
 800a040:	f89e 4000 	ldrb.w	r4, [lr]
 800a044:	f04f 0801 	mov.w	r8, #1
 800a048:	f106 0e02 	add.w	lr, r6, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d05c      	beq.n	800a10a <_strtol_l.isra.0+0xfa>
 800a050:	2b10      	cmp	r3, #16
 800a052:	d10c      	bne.n	800a06e <_strtol_l.isra.0+0x5e>
 800a054:	2c30      	cmp	r4, #48	; 0x30
 800a056:	d10a      	bne.n	800a06e <_strtol_l.isra.0+0x5e>
 800a058:	f89e 4000 	ldrb.w	r4, [lr]
 800a05c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a060:	2c58      	cmp	r4, #88	; 0x58
 800a062:	d14d      	bne.n	800a100 <_strtol_l.isra.0+0xf0>
 800a064:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a068:	2310      	movs	r3, #16
 800a06a:	f10e 0e02 	add.w	lr, lr, #2
 800a06e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a072:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a076:	2600      	movs	r6, #0
 800a078:	fbbc f9f3 	udiv	r9, ip, r3
 800a07c:	4635      	mov	r5, r6
 800a07e:	fb03 ca19 	mls	sl, r3, r9, ip
 800a082:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a086:	2f09      	cmp	r7, #9
 800a088:	d818      	bhi.n	800a0bc <_strtol_l.isra.0+0xac>
 800a08a:	463c      	mov	r4, r7
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	dd24      	ble.n	800a0da <_strtol_l.isra.0+0xca>
 800a090:	2e00      	cmp	r6, #0
 800a092:	db1f      	blt.n	800a0d4 <_strtol_l.isra.0+0xc4>
 800a094:	45a9      	cmp	r9, r5
 800a096:	d31d      	bcc.n	800a0d4 <_strtol_l.isra.0+0xc4>
 800a098:	d101      	bne.n	800a09e <_strtol_l.isra.0+0x8e>
 800a09a:	45a2      	cmp	sl, r4
 800a09c:	db1a      	blt.n	800a0d4 <_strtol_l.isra.0+0xc4>
 800a09e:	fb05 4503 	mla	r5, r5, r3, r4
 800a0a2:	2601      	movs	r6, #1
 800a0a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a0a8:	e7eb      	b.n	800a082 <_strtol_l.isra.0+0x72>
 800a0aa:	2c2b      	cmp	r4, #43	; 0x2b
 800a0ac:	bf08      	it	eq
 800a0ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a0b2:	46a8      	mov	r8, r5
 800a0b4:	bf08      	it	eq
 800a0b6:	f106 0e02 	addeq.w	lr, r6, #2
 800a0ba:	e7c7      	b.n	800a04c <_strtol_l.isra.0+0x3c>
 800a0bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a0c0:	2f19      	cmp	r7, #25
 800a0c2:	d801      	bhi.n	800a0c8 <_strtol_l.isra.0+0xb8>
 800a0c4:	3c37      	subs	r4, #55	; 0x37
 800a0c6:	e7e1      	b.n	800a08c <_strtol_l.isra.0+0x7c>
 800a0c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a0cc:	2f19      	cmp	r7, #25
 800a0ce:	d804      	bhi.n	800a0da <_strtol_l.isra.0+0xca>
 800a0d0:	3c57      	subs	r4, #87	; 0x57
 800a0d2:	e7db      	b.n	800a08c <_strtol_l.isra.0+0x7c>
 800a0d4:	f04f 36ff 	mov.w	r6, #4294967295
 800a0d8:	e7e4      	b.n	800a0a4 <_strtol_l.isra.0+0x94>
 800a0da:	2e00      	cmp	r6, #0
 800a0dc:	da05      	bge.n	800a0ea <_strtol_l.isra.0+0xda>
 800a0de:	2322      	movs	r3, #34	; 0x22
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	4665      	mov	r5, ip
 800a0e4:	b942      	cbnz	r2, 800a0f8 <_strtol_l.isra.0+0xe8>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	e79d      	b.n	800a026 <_strtol_l.isra.0+0x16>
 800a0ea:	f1b8 0f00 	cmp.w	r8, #0
 800a0ee:	d000      	beq.n	800a0f2 <_strtol_l.isra.0+0xe2>
 800a0f0:	426d      	negs	r5, r5
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	d0f7      	beq.n	800a0e6 <_strtol_l.isra.0+0xd6>
 800a0f6:	b10e      	cbz	r6, 800a0fc <_strtol_l.isra.0+0xec>
 800a0f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a0fc:	6011      	str	r1, [r2, #0]
 800a0fe:	e7f2      	b.n	800a0e6 <_strtol_l.isra.0+0xd6>
 800a100:	2430      	movs	r4, #48	; 0x30
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1b3      	bne.n	800a06e <_strtol_l.isra.0+0x5e>
 800a106:	2308      	movs	r3, #8
 800a108:	e7b1      	b.n	800a06e <_strtol_l.isra.0+0x5e>
 800a10a:	2c30      	cmp	r4, #48	; 0x30
 800a10c:	d0a4      	beq.n	800a058 <_strtol_l.isra.0+0x48>
 800a10e:	230a      	movs	r3, #10
 800a110:	e7ad      	b.n	800a06e <_strtol_l.isra.0+0x5e>
 800a112:	bf00      	nop
 800a114:	0800d0e1 	.word	0x0800d0e1

0800a118 <_strtol_r>:
 800a118:	f7ff bf7a 	b.w	800a010 <_strtol_l.isra.0>

0800a11c <quorem>:
 800a11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	6903      	ldr	r3, [r0, #16]
 800a122:	690c      	ldr	r4, [r1, #16]
 800a124:	42a3      	cmp	r3, r4
 800a126:	4607      	mov	r7, r0
 800a128:	f2c0 8081 	blt.w	800a22e <quorem+0x112>
 800a12c:	3c01      	subs	r4, #1
 800a12e:	f101 0814 	add.w	r8, r1, #20
 800a132:	f100 0514 	add.w	r5, r0, #20
 800a136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a144:	3301      	adds	r3, #1
 800a146:	429a      	cmp	r2, r3
 800a148:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a14c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a150:	fbb2 f6f3 	udiv	r6, r2, r3
 800a154:	d331      	bcc.n	800a1ba <quorem+0x9e>
 800a156:	f04f 0e00 	mov.w	lr, #0
 800a15a:	4640      	mov	r0, r8
 800a15c:	46ac      	mov	ip, r5
 800a15e:	46f2      	mov	sl, lr
 800a160:	f850 2b04 	ldr.w	r2, [r0], #4
 800a164:	b293      	uxth	r3, r2
 800a166:	fb06 e303 	mla	r3, r6, r3, lr
 800a16a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a16e:	b29b      	uxth	r3, r3
 800a170:	ebaa 0303 	sub.w	r3, sl, r3
 800a174:	0c12      	lsrs	r2, r2, #16
 800a176:	f8dc a000 	ldr.w	sl, [ip]
 800a17a:	fb06 e202 	mla	r2, r6, r2, lr
 800a17e:	fa13 f38a 	uxtah	r3, r3, sl
 800a182:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a186:	fa1f fa82 	uxth.w	sl, r2
 800a18a:	f8dc 2000 	ldr.w	r2, [ip]
 800a18e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a192:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a196:	b29b      	uxth	r3, r3
 800a198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a19c:	4581      	cmp	r9, r0
 800a19e:	f84c 3b04 	str.w	r3, [ip], #4
 800a1a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1a6:	d2db      	bcs.n	800a160 <quorem+0x44>
 800a1a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1ac:	b92b      	cbnz	r3, 800a1ba <quorem+0x9e>
 800a1ae:	9b01      	ldr	r3, [sp, #4]
 800a1b0:	3b04      	subs	r3, #4
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	d32e      	bcc.n	800a216 <quorem+0xfa>
 800a1b8:	613c      	str	r4, [r7, #16]
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	f001 fc7e 	bl	800babc <__mcmp>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	db24      	blt.n	800a20e <quorem+0xf2>
 800a1c4:	3601      	adds	r6, #1
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f04f 0c00 	mov.w	ip, #0
 800a1cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1d0:	f8d0 e000 	ldr.w	lr, [r0]
 800a1d4:	b293      	uxth	r3, r2
 800a1d6:	ebac 0303 	sub.w	r3, ip, r3
 800a1da:	0c12      	lsrs	r2, r2, #16
 800a1dc:	fa13 f38e 	uxtah	r3, r3, lr
 800a1e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1ee:	45c1      	cmp	r9, r8
 800a1f0:	f840 3b04 	str.w	r3, [r0], #4
 800a1f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1f8:	d2e8      	bcs.n	800a1cc <quorem+0xb0>
 800a1fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a202:	b922      	cbnz	r2, 800a20e <quorem+0xf2>
 800a204:	3b04      	subs	r3, #4
 800a206:	429d      	cmp	r5, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	d30a      	bcc.n	800a222 <quorem+0x106>
 800a20c:	613c      	str	r4, [r7, #16]
 800a20e:	4630      	mov	r0, r6
 800a210:	b003      	add	sp, #12
 800a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	3b04      	subs	r3, #4
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	d1cc      	bne.n	800a1b8 <quorem+0x9c>
 800a21e:	3c01      	subs	r4, #1
 800a220:	e7c7      	b.n	800a1b2 <quorem+0x96>
 800a222:	6812      	ldr	r2, [r2, #0]
 800a224:	3b04      	subs	r3, #4
 800a226:	2a00      	cmp	r2, #0
 800a228:	d1f0      	bne.n	800a20c <quorem+0xf0>
 800a22a:	3c01      	subs	r4, #1
 800a22c:	e7eb      	b.n	800a206 <quorem+0xea>
 800a22e:	2000      	movs	r0, #0
 800a230:	e7ee      	b.n	800a210 <quorem+0xf4>
 800a232:	0000      	movs	r0, r0
 800a234:	0000      	movs	r0, r0
	...

0800a238 <_dtoa_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	ed2d 8b02 	vpush	{d8}
 800a240:	ec57 6b10 	vmov	r6, r7, d0
 800a244:	b095      	sub	sp, #84	; 0x54
 800a246:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a248:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a24c:	9105      	str	r1, [sp, #20]
 800a24e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a252:	4604      	mov	r4, r0
 800a254:	9209      	str	r2, [sp, #36]	; 0x24
 800a256:	930f      	str	r3, [sp, #60]	; 0x3c
 800a258:	b975      	cbnz	r5, 800a278 <_dtoa_r+0x40>
 800a25a:	2010      	movs	r0, #16
 800a25c:	f001 f94c 	bl	800b4f8 <malloc>
 800a260:	4602      	mov	r2, r0
 800a262:	6260      	str	r0, [r4, #36]	; 0x24
 800a264:	b920      	cbnz	r0, 800a270 <_dtoa_r+0x38>
 800a266:	4bb2      	ldr	r3, [pc, #712]	; (800a530 <_dtoa_r+0x2f8>)
 800a268:	21ea      	movs	r1, #234	; 0xea
 800a26a:	48b2      	ldr	r0, [pc, #712]	; (800a534 <_dtoa_r+0x2fc>)
 800a26c:	f002 f868 	bl	800c340 <__assert_func>
 800a270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a274:	6005      	str	r5, [r0, #0]
 800a276:	60c5      	str	r5, [r0, #12]
 800a278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27a:	6819      	ldr	r1, [r3, #0]
 800a27c:	b151      	cbz	r1, 800a294 <_dtoa_r+0x5c>
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	604a      	str	r2, [r1, #4]
 800a282:	2301      	movs	r3, #1
 800a284:	4093      	lsls	r3, r2
 800a286:	608b      	str	r3, [r1, #8]
 800a288:	4620      	mov	r0, r4
 800a28a:	f001 f98f 	bl	800b5ac <_Bfree>
 800a28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	1e3b      	subs	r3, r7, #0
 800a296:	bfb9      	ittee	lt
 800a298:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a29c:	9303      	strlt	r3, [sp, #12]
 800a29e:	2300      	movge	r3, #0
 800a2a0:	f8c8 3000 	strge.w	r3, [r8]
 800a2a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a2a8:	4ba3      	ldr	r3, [pc, #652]	; (800a538 <_dtoa_r+0x300>)
 800a2aa:	bfbc      	itt	lt
 800a2ac:	2201      	movlt	r2, #1
 800a2ae:	f8c8 2000 	strlt.w	r2, [r8]
 800a2b2:	ea33 0309 	bics.w	r3, r3, r9
 800a2b6:	d11b      	bne.n	800a2f0 <_dtoa_r+0xb8>
 800a2b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2c4:	4333      	orrs	r3, r6
 800a2c6:	f000 857a 	beq.w	800adbe <_dtoa_r+0xb86>
 800a2ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2cc:	b963      	cbnz	r3, 800a2e8 <_dtoa_r+0xb0>
 800a2ce:	4b9b      	ldr	r3, [pc, #620]	; (800a53c <_dtoa_r+0x304>)
 800a2d0:	e024      	b.n	800a31c <_dtoa_r+0xe4>
 800a2d2:	4b9b      	ldr	r3, [pc, #620]	; (800a540 <_dtoa_r+0x308>)
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	9800      	ldr	r0, [sp, #0]
 800a2de:	b015      	add	sp, #84	; 0x54
 800a2e0:	ecbd 8b02 	vpop	{d8}
 800a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e8:	4b94      	ldr	r3, [pc, #592]	; (800a53c <_dtoa_r+0x304>)
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	3303      	adds	r3, #3
 800a2ee:	e7f3      	b.n	800a2d8 <_dtoa_r+0xa0>
 800a2f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	ec51 0b17 	vmov	r0, r1, d7
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a300:	f7f6 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a304:	4680      	mov	r8, r0
 800a306:	b158      	cbz	r0, 800a320 <_dtoa_r+0xe8>
 800a308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a30a:	2301      	movs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 8551 	beq.w	800adb8 <_dtoa_r+0xb80>
 800a316:	488b      	ldr	r0, [pc, #556]	; (800a544 <_dtoa_r+0x30c>)
 800a318:	6018      	str	r0, [r3, #0]
 800a31a:	1e43      	subs	r3, r0, #1
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	e7dd      	b.n	800a2dc <_dtoa_r+0xa4>
 800a320:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a324:	aa12      	add	r2, sp, #72	; 0x48
 800a326:	a913      	add	r1, sp, #76	; 0x4c
 800a328:	4620      	mov	r0, r4
 800a32a:	f001 fce7 	bl	800bcfc <__d2b>
 800a32e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a332:	4683      	mov	fp, r0
 800a334:	2d00      	cmp	r5, #0
 800a336:	d07c      	beq.n	800a432 <_dtoa_r+0x1fa>
 800a338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a33a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a33e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a342:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a346:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a34a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a352:	4b7d      	ldr	r3, [pc, #500]	; (800a548 <_dtoa_r+0x310>)
 800a354:	2200      	movs	r2, #0
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	f7f5 ff95 	bl	8000288 <__aeabi_dsub>
 800a35e:	a36e      	add	r3, pc, #440	; (adr r3, 800a518 <_dtoa_r+0x2e0>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f6 f948 	bl	80005f8 <__aeabi_dmul>
 800a368:	a36d      	add	r3, pc, #436	; (adr r3, 800a520 <_dtoa_r+0x2e8>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f5 ff8d 	bl	800028c <__adddf3>
 800a372:	4606      	mov	r6, r0
 800a374:	4628      	mov	r0, r5
 800a376:	460f      	mov	r7, r1
 800a378:	f7f6 f8d4 	bl	8000524 <__aeabi_i2d>
 800a37c:	a36a      	add	r3, pc, #424	; (adr r3, 800a528 <_dtoa_r+0x2f0>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f7f6 f939 	bl	80005f8 <__aeabi_dmul>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f5 ff7d 	bl	800028c <__adddf3>
 800a392:	4606      	mov	r6, r0
 800a394:	460f      	mov	r7, r1
 800a396:	f7f6 fbdf 	bl	8000b58 <__aeabi_d2iz>
 800a39a:	2200      	movs	r2, #0
 800a39c:	4682      	mov	sl, r0
 800a39e:	2300      	movs	r3, #0
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f6 fb9a 	bl	8000adc <__aeabi_dcmplt>
 800a3a8:	b148      	cbz	r0, 800a3be <_dtoa_r+0x186>
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	f7f6 f8ba 	bl	8000524 <__aeabi_i2d>
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	f7f6 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3b8:	b908      	cbnz	r0, 800a3be <_dtoa_r+0x186>
 800a3ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3be:	f1ba 0f16 	cmp.w	sl, #22
 800a3c2:	d854      	bhi.n	800a46e <_dtoa_r+0x236>
 800a3c4:	4b61      	ldr	r3, [pc, #388]	; (800a54c <_dtoa_r+0x314>)
 800a3c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3d2:	f7f6 fb83 	bl	8000adc <__aeabi_dcmplt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d04b      	beq.n	800a472 <_dtoa_r+0x23a>
 800a3da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3de:	2300      	movs	r3, #0
 800a3e0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3e4:	1b5d      	subs	r5, r3, r5
 800a3e6:	1e6b      	subs	r3, r5, #1
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	bf43      	ittte	mi
 800a3ec:	2300      	movmi	r3, #0
 800a3ee:	f1c5 0801 	rsbmi	r8, r5, #1
 800a3f2:	9304      	strmi	r3, [sp, #16]
 800a3f4:	f04f 0800 	movpl.w	r8, #0
 800a3f8:	f1ba 0f00 	cmp.w	sl, #0
 800a3fc:	db3b      	blt.n	800a476 <_dtoa_r+0x23e>
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a404:	4453      	add	r3, sl
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	2300      	movs	r3, #0
 800a40a:	9306      	str	r3, [sp, #24]
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	2b09      	cmp	r3, #9
 800a410:	d869      	bhi.n	800a4e6 <_dtoa_r+0x2ae>
 800a412:	2b05      	cmp	r3, #5
 800a414:	bfc4      	itt	gt
 800a416:	3b04      	subgt	r3, #4
 800a418:	9305      	strgt	r3, [sp, #20]
 800a41a:	9b05      	ldr	r3, [sp, #20]
 800a41c:	f1a3 0302 	sub.w	r3, r3, #2
 800a420:	bfcc      	ite	gt
 800a422:	2500      	movgt	r5, #0
 800a424:	2501      	movle	r5, #1
 800a426:	2b03      	cmp	r3, #3
 800a428:	d869      	bhi.n	800a4fe <_dtoa_r+0x2c6>
 800a42a:	e8df f003 	tbb	[pc, r3]
 800a42e:	4e2c      	.short	0x4e2c
 800a430:	5a4c      	.short	0x5a4c
 800a432:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a436:	441d      	add	r5, r3
 800a438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	bfc1      	itttt	gt
 800a440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a444:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a448:	fa09 f303 	lslgt.w	r3, r9, r3
 800a44c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a450:	bfda      	itte	le
 800a452:	f1c3 0320 	rsble	r3, r3, #32
 800a456:	fa06 f003 	lslle.w	r0, r6, r3
 800a45a:	4318      	orrgt	r0, r3
 800a45c:	f7f6 f852 	bl	8000504 <__aeabi_ui2d>
 800a460:	2301      	movs	r3, #1
 800a462:	4606      	mov	r6, r0
 800a464:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a468:	3d01      	subs	r5, #1
 800a46a:	9310      	str	r3, [sp, #64]	; 0x40
 800a46c:	e771      	b.n	800a352 <_dtoa_r+0x11a>
 800a46e:	2301      	movs	r3, #1
 800a470:	e7b6      	b.n	800a3e0 <_dtoa_r+0x1a8>
 800a472:	900e      	str	r0, [sp, #56]	; 0x38
 800a474:	e7b5      	b.n	800a3e2 <_dtoa_r+0x1aa>
 800a476:	f1ca 0300 	rsb	r3, sl, #0
 800a47a:	9306      	str	r3, [sp, #24]
 800a47c:	2300      	movs	r3, #0
 800a47e:	eba8 080a 	sub.w	r8, r8, sl
 800a482:	930d      	str	r3, [sp, #52]	; 0x34
 800a484:	e7c2      	b.n	800a40c <_dtoa_r+0x1d4>
 800a486:	2300      	movs	r3, #0
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dc39      	bgt.n	800a504 <_dtoa_r+0x2cc>
 800a490:	f04f 0901 	mov.w	r9, #1
 800a494:	f8cd 9004 	str.w	r9, [sp, #4]
 800a498:	464b      	mov	r3, r9
 800a49a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a49e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	6042      	str	r2, [r0, #4]
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	f102 0614 	add.w	r6, r2, #20
 800a4aa:	429e      	cmp	r6, r3
 800a4ac:	6841      	ldr	r1, [r0, #4]
 800a4ae:	d92f      	bls.n	800a510 <_dtoa_r+0x2d8>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f001 f83b 	bl	800b52c <_Balloc>
 800a4b6:	9000      	str	r0, [sp, #0]
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d14b      	bne.n	800a554 <_dtoa_r+0x31c>
 800a4bc:	4b24      	ldr	r3, [pc, #144]	; (800a550 <_dtoa_r+0x318>)
 800a4be:	4602      	mov	r2, r0
 800a4c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4c4:	e6d1      	b.n	800a26a <_dtoa_r+0x32>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e7de      	b.n	800a488 <_dtoa_r+0x250>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9308      	str	r3, [sp, #32]
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	eb0a 0903 	add.w	r9, sl, r3
 800a4d4:	f109 0301 	add.w	r3, r9, #1
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	9301      	str	r3, [sp, #4]
 800a4dc:	bfb8      	it	lt
 800a4de:	2301      	movlt	r3, #1
 800a4e0:	e7dd      	b.n	800a49e <_dtoa_r+0x266>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e7f2      	b.n	800a4cc <_dtoa_r+0x294>
 800a4e6:	2501      	movs	r5, #1
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	9508      	str	r5, [sp, #32]
 800a4ee:	f04f 39ff 	mov.w	r9, #4294967295
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4f8:	2312      	movs	r3, #18
 800a4fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a4fc:	e7cf      	b.n	800a49e <_dtoa_r+0x266>
 800a4fe:	2301      	movs	r3, #1
 800a500:	9308      	str	r3, [sp, #32]
 800a502:	e7f4      	b.n	800a4ee <_dtoa_r+0x2b6>
 800a504:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a508:	f8cd 9004 	str.w	r9, [sp, #4]
 800a50c:	464b      	mov	r3, r9
 800a50e:	e7c6      	b.n	800a49e <_dtoa_r+0x266>
 800a510:	3101      	adds	r1, #1
 800a512:	6041      	str	r1, [r0, #4]
 800a514:	0052      	lsls	r2, r2, #1
 800a516:	e7c6      	b.n	800a4a6 <_dtoa_r+0x26e>
 800a518:	636f4361 	.word	0x636f4361
 800a51c:	3fd287a7 	.word	0x3fd287a7
 800a520:	8b60c8b3 	.word	0x8b60c8b3
 800a524:	3fc68a28 	.word	0x3fc68a28
 800a528:	509f79fb 	.word	0x509f79fb
 800a52c:	3fd34413 	.word	0x3fd34413
 800a530:	0800d1ee 	.word	0x0800d1ee
 800a534:	0800d205 	.word	0x0800d205
 800a538:	7ff00000 	.word	0x7ff00000
 800a53c:	0800d1ea 	.word	0x0800d1ea
 800a540:	0800d1e1 	.word	0x0800d1e1
 800a544:	0800d065 	.word	0x0800d065
 800a548:	3ff80000 	.word	0x3ff80000
 800a54c:	0800d380 	.word	0x0800d380
 800a550:	0800d264 	.word	0x0800d264
 800a554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a556:	9a00      	ldr	r2, [sp, #0]
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	2b0e      	cmp	r3, #14
 800a55e:	f200 80ad 	bhi.w	800a6bc <_dtoa_r+0x484>
 800a562:	2d00      	cmp	r5, #0
 800a564:	f000 80aa 	beq.w	800a6bc <_dtoa_r+0x484>
 800a568:	f1ba 0f00 	cmp.w	sl, #0
 800a56c:	dd36      	ble.n	800a5dc <_dtoa_r+0x3a4>
 800a56e:	4ac3      	ldr	r2, [pc, #780]	; (800a87c <_dtoa_r+0x644>)
 800a570:	f00a 030f 	and.w	r3, sl, #15
 800a574:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a578:	ed93 7b00 	vldr	d7, [r3]
 800a57c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a580:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a584:	eeb0 8a47 	vmov.f32	s16, s14
 800a588:	eef0 8a67 	vmov.f32	s17, s15
 800a58c:	d016      	beq.n	800a5bc <_dtoa_r+0x384>
 800a58e:	4bbc      	ldr	r3, [pc, #752]	; (800a880 <_dtoa_r+0x648>)
 800a590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a598:	f7f6 f958 	bl	800084c <__aeabi_ddiv>
 800a59c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a0:	f007 070f 	and.w	r7, r7, #15
 800a5a4:	2503      	movs	r5, #3
 800a5a6:	4eb6      	ldr	r6, [pc, #728]	; (800a880 <_dtoa_r+0x648>)
 800a5a8:	b957      	cbnz	r7, 800a5c0 <_dtoa_r+0x388>
 800a5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ae:	ec53 2b18 	vmov	r2, r3, d8
 800a5b2:	f7f6 f94b 	bl	800084c <__aeabi_ddiv>
 800a5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ba:	e029      	b.n	800a610 <_dtoa_r+0x3d8>
 800a5bc:	2502      	movs	r5, #2
 800a5be:	e7f2      	b.n	800a5a6 <_dtoa_r+0x36e>
 800a5c0:	07f9      	lsls	r1, r7, #31
 800a5c2:	d508      	bpl.n	800a5d6 <_dtoa_r+0x39e>
 800a5c4:	ec51 0b18 	vmov	r0, r1, d8
 800a5c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5cc:	f7f6 f814 	bl	80005f8 <__aeabi_dmul>
 800a5d0:	ec41 0b18 	vmov	d8, r0, r1
 800a5d4:	3501      	adds	r5, #1
 800a5d6:	107f      	asrs	r7, r7, #1
 800a5d8:	3608      	adds	r6, #8
 800a5da:	e7e5      	b.n	800a5a8 <_dtoa_r+0x370>
 800a5dc:	f000 80a6 	beq.w	800a72c <_dtoa_r+0x4f4>
 800a5e0:	f1ca 0600 	rsb	r6, sl, #0
 800a5e4:	4ba5      	ldr	r3, [pc, #660]	; (800a87c <_dtoa_r+0x644>)
 800a5e6:	4fa6      	ldr	r7, [pc, #664]	; (800a880 <_dtoa_r+0x648>)
 800a5e8:	f006 020f 	and.w	r2, r6, #15
 800a5ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5f8:	f7f5 fffe 	bl	80005f8 <__aeabi_dmul>
 800a5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a600:	1136      	asrs	r6, r6, #4
 800a602:	2300      	movs	r3, #0
 800a604:	2502      	movs	r5, #2
 800a606:	2e00      	cmp	r6, #0
 800a608:	f040 8085 	bne.w	800a716 <_dtoa_r+0x4de>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1d2      	bne.n	800a5b6 <_dtoa_r+0x37e>
 800a610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 808c 	beq.w	800a730 <_dtoa_r+0x4f8>
 800a618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a61c:	4b99      	ldr	r3, [pc, #612]	; (800a884 <_dtoa_r+0x64c>)
 800a61e:	2200      	movs	r2, #0
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f7f6 fa5a 	bl	8000adc <__aeabi_dcmplt>
 800a628:	2800      	cmp	r0, #0
 800a62a:	f000 8081 	beq.w	800a730 <_dtoa_r+0x4f8>
 800a62e:	9b01      	ldr	r3, [sp, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d07d      	beq.n	800a730 <_dtoa_r+0x4f8>
 800a634:	f1b9 0f00 	cmp.w	r9, #0
 800a638:	dd3c      	ble.n	800a6b4 <_dtoa_r+0x47c>
 800a63a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a63e:	9307      	str	r3, [sp, #28]
 800a640:	2200      	movs	r2, #0
 800a642:	4b91      	ldr	r3, [pc, #580]	; (800a888 <_dtoa_r+0x650>)
 800a644:	4630      	mov	r0, r6
 800a646:	4639      	mov	r1, r7
 800a648:	f7f5 ffd6 	bl	80005f8 <__aeabi_dmul>
 800a64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a650:	3501      	adds	r5, #1
 800a652:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a656:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a65a:	4628      	mov	r0, r5
 800a65c:	f7f5 ff62 	bl	8000524 <__aeabi_i2d>
 800a660:	4632      	mov	r2, r6
 800a662:	463b      	mov	r3, r7
 800a664:	f7f5 ffc8 	bl	80005f8 <__aeabi_dmul>
 800a668:	4b88      	ldr	r3, [pc, #544]	; (800a88c <_dtoa_r+0x654>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	f7f5 fe0e 	bl	800028c <__adddf3>
 800a670:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d15c      	bne.n	800a73a <_dtoa_r+0x502>
 800a680:	4b83      	ldr	r3, [pc, #524]	; (800a890 <_dtoa_r+0x658>)
 800a682:	2200      	movs	r2, #0
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 fdfe 	bl	8000288 <__aeabi_dsub>
 800a68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a690:	4606      	mov	r6, r0
 800a692:	460f      	mov	r7, r1
 800a694:	f7f6 fa40 	bl	8000b18 <__aeabi_dcmpgt>
 800a698:	2800      	cmp	r0, #0
 800a69a:	f040 8296 	bne.w	800abca <_dtoa_r+0x992>
 800a69e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f6 fa17 	bl	8000adc <__aeabi_dcmplt>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f040 8288 	bne.w	800abc4 <_dtoa_r+0x98c>
 800a6b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f2c0 8158 	blt.w	800a974 <_dtoa_r+0x73c>
 800a6c4:	f1ba 0f0e 	cmp.w	sl, #14
 800a6c8:	f300 8154 	bgt.w	800a974 <_dtoa_r+0x73c>
 800a6cc:	4b6b      	ldr	r3, [pc, #428]	; (800a87c <_dtoa_r+0x644>)
 800a6ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f280 80e3 	bge.w	800a8a4 <_dtoa_r+0x66c>
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f300 80df 	bgt.w	800a8a4 <_dtoa_r+0x66c>
 800a6e6:	f040 826d 	bne.w	800abc4 <_dtoa_r+0x98c>
 800a6ea:	4b69      	ldr	r3, [pc, #420]	; (800a890 <_dtoa_r+0x658>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	f7f5 ff81 	bl	80005f8 <__aeabi_dmul>
 800a6f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6fa:	f7f6 fa03 	bl	8000b04 <__aeabi_dcmpge>
 800a6fe:	9e01      	ldr	r6, [sp, #4]
 800a700:	4637      	mov	r7, r6
 800a702:	2800      	cmp	r0, #0
 800a704:	f040 8243 	bne.w	800ab8e <_dtoa_r+0x956>
 800a708:	9d00      	ldr	r5, [sp, #0]
 800a70a:	2331      	movs	r3, #49	; 0x31
 800a70c:	f805 3b01 	strb.w	r3, [r5], #1
 800a710:	f10a 0a01 	add.w	sl, sl, #1
 800a714:	e23f      	b.n	800ab96 <_dtoa_r+0x95e>
 800a716:	07f2      	lsls	r2, r6, #31
 800a718:	d505      	bpl.n	800a726 <_dtoa_r+0x4ee>
 800a71a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71e:	f7f5 ff6b 	bl	80005f8 <__aeabi_dmul>
 800a722:	3501      	adds	r5, #1
 800a724:	2301      	movs	r3, #1
 800a726:	1076      	asrs	r6, r6, #1
 800a728:	3708      	adds	r7, #8
 800a72a:	e76c      	b.n	800a606 <_dtoa_r+0x3ce>
 800a72c:	2502      	movs	r5, #2
 800a72e:	e76f      	b.n	800a610 <_dtoa_r+0x3d8>
 800a730:	9b01      	ldr	r3, [sp, #4]
 800a732:	f8cd a01c 	str.w	sl, [sp, #28]
 800a736:	930c      	str	r3, [sp, #48]	; 0x30
 800a738:	e78d      	b.n	800a656 <_dtoa_r+0x41e>
 800a73a:	9900      	ldr	r1, [sp, #0]
 800a73c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a73e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a740:	4b4e      	ldr	r3, [pc, #312]	; (800a87c <_dtoa_r+0x644>)
 800a742:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a746:	4401      	add	r1, r0
 800a748:	9102      	str	r1, [sp, #8]
 800a74a:	9908      	ldr	r1, [sp, #32]
 800a74c:	eeb0 8a47 	vmov.f32	s16, s14
 800a750:	eef0 8a67 	vmov.f32	s17, s15
 800a754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a758:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a75c:	2900      	cmp	r1, #0
 800a75e:	d045      	beq.n	800a7ec <_dtoa_r+0x5b4>
 800a760:	494c      	ldr	r1, [pc, #304]	; (800a894 <_dtoa_r+0x65c>)
 800a762:	2000      	movs	r0, #0
 800a764:	f7f6 f872 	bl	800084c <__aeabi_ddiv>
 800a768:	ec53 2b18 	vmov	r2, r3, d8
 800a76c:	f7f5 fd8c 	bl	8000288 <__aeabi_dsub>
 800a770:	9d00      	ldr	r5, [sp, #0]
 800a772:	ec41 0b18 	vmov	d8, r0, r1
 800a776:	4639      	mov	r1, r7
 800a778:	4630      	mov	r0, r6
 800a77a:	f7f6 f9ed 	bl	8000b58 <__aeabi_d2iz>
 800a77e:	900c      	str	r0, [sp, #48]	; 0x30
 800a780:	f7f5 fed0 	bl	8000524 <__aeabi_i2d>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f5 fd7c 	bl	8000288 <__aeabi_dsub>
 800a790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a792:	3330      	adds	r3, #48	; 0x30
 800a794:	f805 3b01 	strb.w	r3, [r5], #1
 800a798:	ec53 2b18 	vmov	r2, r3, d8
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	f7f6 f99c 	bl	8000adc <__aeabi_dcmplt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d165      	bne.n	800a874 <_dtoa_r+0x63c>
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	463b      	mov	r3, r7
 800a7ac:	4935      	ldr	r1, [pc, #212]	; (800a884 <_dtoa_r+0x64c>)
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f7f5 fd6a 	bl	8000288 <__aeabi_dsub>
 800a7b4:	ec53 2b18 	vmov	r2, r3, d8
 800a7b8:	f7f6 f990 	bl	8000adc <__aeabi_dcmplt>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f040 80b9 	bne.w	800a934 <_dtoa_r+0x6fc>
 800a7c2:	9b02      	ldr	r3, [sp, #8]
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	f43f af75 	beq.w	800a6b4 <_dtoa_r+0x47c>
 800a7ca:	4b2f      	ldr	r3, [pc, #188]	; (800a888 <_dtoa_r+0x650>)
 800a7cc:	ec51 0b18 	vmov	r0, r1, d8
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f7f5 ff11 	bl	80005f8 <__aeabi_dmul>
 800a7d6:	4b2c      	ldr	r3, [pc, #176]	; (800a888 <_dtoa_r+0x650>)
 800a7d8:	ec41 0b18 	vmov	d8, r0, r1
 800a7dc:	2200      	movs	r2, #0
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	f7f5 ff09 	bl	80005f8 <__aeabi_dmul>
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	e7c4      	b.n	800a776 <_dtoa_r+0x53e>
 800a7ec:	ec51 0b17 	vmov	r0, r1, d7
 800a7f0:	f7f5 ff02 	bl	80005f8 <__aeabi_dmul>
 800a7f4:	9b02      	ldr	r3, [sp, #8]
 800a7f6:	9d00      	ldr	r5, [sp, #0]
 800a7f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a7fa:	ec41 0b18 	vmov	d8, r0, r1
 800a7fe:	4639      	mov	r1, r7
 800a800:	4630      	mov	r0, r6
 800a802:	f7f6 f9a9 	bl	8000b58 <__aeabi_d2iz>
 800a806:	9011      	str	r0, [sp, #68]	; 0x44
 800a808:	f7f5 fe8c 	bl	8000524 <__aeabi_i2d>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f5 fd38 	bl	8000288 <__aeabi_dsub>
 800a818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a81a:	3330      	adds	r3, #48	; 0x30
 800a81c:	f805 3b01 	strb.w	r3, [r5], #1
 800a820:	9b02      	ldr	r3, [sp, #8]
 800a822:	429d      	cmp	r5, r3
 800a824:	4606      	mov	r6, r0
 800a826:	460f      	mov	r7, r1
 800a828:	f04f 0200 	mov.w	r2, #0
 800a82c:	d134      	bne.n	800a898 <_dtoa_r+0x660>
 800a82e:	4b19      	ldr	r3, [pc, #100]	; (800a894 <_dtoa_r+0x65c>)
 800a830:	ec51 0b18 	vmov	r0, r1, d8
 800a834:	f7f5 fd2a 	bl	800028c <__adddf3>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4630      	mov	r0, r6
 800a83e:	4639      	mov	r1, r7
 800a840:	f7f6 f96a 	bl	8000b18 <__aeabi_dcmpgt>
 800a844:	2800      	cmp	r0, #0
 800a846:	d175      	bne.n	800a934 <_dtoa_r+0x6fc>
 800a848:	ec53 2b18 	vmov	r2, r3, d8
 800a84c:	4911      	ldr	r1, [pc, #68]	; (800a894 <_dtoa_r+0x65c>)
 800a84e:	2000      	movs	r0, #0
 800a850:	f7f5 fd1a 	bl	8000288 <__aeabi_dsub>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f7f6 f93e 	bl	8000adc <__aeabi_dcmplt>
 800a860:	2800      	cmp	r0, #0
 800a862:	f43f af27 	beq.w	800a6b4 <_dtoa_r+0x47c>
 800a866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a868:	1e6b      	subs	r3, r5, #1
 800a86a:	930c      	str	r3, [sp, #48]	; 0x30
 800a86c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a870:	2b30      	cmp	r3, #48	; 0x30
 800a872:	d0f8      	beq.n	800a866 <_dtoa_r+0x62e>
 800a874:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a878:	e04a      	b.n	800a910 <_dtoa_r+0x6d8>
 800a87a:	bf00      	nop
 800a87c:	0800d380 	.word	0x0800d380
 800a880:	0800d358 	.word	0x0800d358
 800a884:	3ff00000 	.word	0x3ff00000
 800a888:	40240000 	.word	0x40240000
 800a88c:	401c0000 	.word	0x401c0000
 800a890:	40140000 	.word	0x40140000
 800a894:	3fe00000 	.word	0x3fe00000
 800a898:	4baf      	ldr	r3, [pc, #700]	; (800ab58 <_dtoa_r+0x920>)
 800a89a:	f7f5 fead 	bl	80005f8 <__aeabi_dmul>
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460f      	mov	r7, r1
 800a8a2:	e7ac      	b.n	800a7fe <_dtoa_r+0x5c6>
 800a8a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8a8:	9d00      	ldr	r5, [sp, #0]
 800a8aa:	4642      	mov	r2, r8
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f5 ffcb 	bl	800084c <__aeabi_ddiv>
 800a8b6:	f7f6 f94f 	bl	8000b58 <__aeabi_d2iz>
 800a8ba:	9002      	str	r0, [sp, #8]
 800a8bc:	f7f5 fe32 	bl	8000524 <__aeabi_i2d>
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	f7f5 fe98 	bl	80005f8 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f5 fcda 	bl	8000288 <__aeabi_dsub>
 800a8d4:	9e02      	ldr	r6, [sp, #8]
 800a8d6:	9f01      	ldr	r7, [sp, #4]
 800a8d8:	3630      	adds	r6, #48	; 0x30
 800a8da:	f805 6b01 	strb.w	r6, [r5], #1
 800a8de:	9e00      	ldr	r6, [sp, #0]
 800a8e0:	1bae      	subs	r6, r5, r6
 800a8e2:	42b7      	cmp	r7, r6
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	d137      	bne.n	800a95a <_dtoa_r+0x722>
 800a8ea:	f7f5 fccf 	bl	800028c <__adddf3>
 800a8ee:	4642      	mov	r2, r8
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	f7f6 f90f 	bl	8000b18 <__aeabi_dcmpgt>
 800a8fa:	b9c8      	cbnz	r0, 800a930 <_dtoa_r+0x6f8>
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	464b      	mov	r3, r9
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f6 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a908:	b110      	cbz	r0, 800a910 <_dtoa_r+0x6d8>
 800a90a:	9b02      	ldr	r3, [sp, #8]
 800a90c:	07d9      	lsls	r1, r3, #31
 800a90e:	d40f      	bmi.n	800a930 <_dtoa_r+0x6f8>
 800a910:	4620      	mov	r0, r4
 800a912:	4659      	mov	r1, fp
 800a914:	f000 fe4a 	bl	800b5ac <_Bfree>
 800a918:	2300      	movs	r3, #0
 800a91a:	702b      	strb	r3, [r5, #0]
 800a91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a91e:	f10a 0001 	add.w	r0, sl, #1
 800a922:	6018      	str	r0, [r3, #0]
 800a924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a926:	2b00      	cmp	r3, #0
 800a928:	f43f acd8 	beq.w	800a2dc <_dtoa_r+0xa4>
 800a92c:	601d      	str	r5, [r3, #0]
 800a92e:	e4d5      	b.n	800a2dc <_dtoa_r+0xa4>
 800a930:	f8cd a01c 	str.w	sl, [sp, #28]
 800a934:	462b      	mov	r3, r5
 800a936:	461d      	mov	r5, r3
 800a938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a93c:	2a39      	cmp	r2, #57	; 0x39
 800a93e:	d108      	bne.n	800a952 <_dtoa_r+0x71a>
 800a940:	9a00      	ldr	r2, [sp, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d1f7      	bne.n	800a936 <_dtoa_r+0x6fe>
 800a946:	9a07      	ldr	r2, [sp, #28]
 800a948:	9900      	ldr	r1, [sp, #0]
 800a94a:	3201      	adds	r2, #1
 800a94c:	9207      	str	r2, [sp, #28]
 800a94e:	2230      	movs	r2, #48	; 0x30
 800a950:	700a      	strb	r2, [r1, #0]
 800a952:	781a      	ldrb	r2, [r3, #0]
 800a954:	3201      	adds	r2, #1
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e78c      	b.n	800a874 <_dtoa_r+0x63c>
 800a95a:	4b7f      	ldr	r3, [pc, #508]	; (800ab58 <_dtoa_r+0x920>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	f7f5 fe4b 	bl	80005f8 <__aeabi_dmul>
 800a962:	2200      	movs	r2, #0
 800a964:	2300      	movs	r3, #0
 800a966:	4606      	mov	r6, r0
 800a968:	460f      	mov	r7, r1
 800a96a:	f7f6 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d09b      	beq.n	800a8aa <_dtoa_r+0x672>
 800a972:	e7cd      	b.n	800a910 <_dtoa_r+0x6d8>
 800a974:	9a08      	ldr	r2, [sp, #32]
 800a976:	2a00      	cmp	r2, #0
 800a978:	f000 80c4 	beq.w	800ab04 <_dtoa_r+0x8cc>
 800a97c:	9a05      	ldr	r2, [sp, #20]
 800a97e:	2a01      	cmp	r2, #1
 800a980:	f300 80a8 	bgt.w	800aad4 <_dtoa_r+0x89c>
 800a984:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a986:	2a00      	cmp	r2, #0
 800a988:	f000 80a0 	beq.w	800aacc <_dtoa_r+0x894>
 800a98c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a990:	9e06      	ldr	r6, [sp, #24]
 800a992:	4645      	mov	r5, r8
 800a994:	9a04      	ldr	r2, [sp, #16]
 800a996:	2101      	movs	r1, #1
 800a998:	441a      	add	r2, r3
 800a99a:	4620      	mov	r0, r4
 800a99c:	4498      	add	r8, r3
 800a99e:	9204      	str	r2, [sp, #16]
 800a9a0:	f000 ff0a 	bl	800b7b8 <__i2b>
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	dd0b      	ble.n	800a9c2 <_dtoa_r+0x78a>
 800a9aa:	9b04      	ldr	r3, [sp, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd08      	ble.n	800a9c2 <_dtoa_r+0x78a>
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	9a04      	ldr	r2, [sp, #16]
 800a9b4:	bfa8      	it	ge
 800a9b6:	462b      	movge	r3, r5
 800a9b8:	eba8 0803 	sub.w	r8, r8, r3
 800a9bc:	1aed      	subs	r5, r5, r3
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	9b06      	ldr	r3, [sp, #24]
 800a9c4:	b1fb      	cbz	r3, 800aa06 <_dtoa_r+0x7ce>
 800a9c6:	9b08      	ldr	r3, [sp, #32]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 809f 	beq.w	800ab0c <_dtoa_r+0x8d4>
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	dd11      	ble.n	800a9f6 <_dtoa_r+0x7be>
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 ffaa 	bl	800b930 <__pow5mult>
 800a9dc:	465a      	mov	r2, fp
 800a9de:	4601      	mov	r1, r0
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fefe 	bl	800b7e4 <__multiply>
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	9007      	str	r0, [sp, #28]
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 fddd 	bl	800b5ac <_Bfree>
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	469b      	mov	fp, r3
 800a9f6:	9b06      	ldr	r3, [sp, #24]
 800a9f8:	1b9a      	subs	r2, r3, r6
 800a9fa:	d004      	beq.n	800aa06 <_dtoa_r+0x7ce>
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 ff96 	bl	800b930 <__pow5mult>
 800aa04:	4683      	mov	fp, r0
 800aa06:	2101      	movs	r1, #1
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fed5 	bl	800b7b8 <__i2b>
 800aa0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	4606      	mov	r6, r0
 800aa14:	dd7c      	ble.n	800ab10 <_dtoa_r+0x8d8>
 800aa16:	461a      	mov	r2, r3
 800aa18:	4601      	mov	r1, r0
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 ff88 	bl	800b930 <__pow5mult>
 800aa20:	9b05      	ldr	r3, [sp, #20]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	4606      	mov	r6, r0
 800aa26:	dd76      	ble.n	800ab16 <_dtoa_r+0x8de>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	9306      	str	r3, [sp, #24]
 800aa2c:	6933      	ldr	r3, [r6, #16]
 800aa2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa32:	6918      	ldr	r0, [r3, #16]
 800aa34:	f000 fe70 	bl	800b718 <__hi0bits>
 800aa38:	f1c0 0020 	rsb	r0, r0, #32
 800aa3c:	9b04      	ldr	r3, [sp, #16]
 800aa3e:	4418      	add	r0, r3
 800aa40:	f010 001f 	ands.w	r0, r0, #31
 800aa44:	f000 8086 	beq.w	800ab54 <_dtoa_r+0x91c>
 800aa48:	f1c0 0320 	rsb	r3, r0, #32
 800aa4c:	2b04      	cmp	r3, #4
 800aa4e:	dd7f      	ble.n	800ab50 <_dtoa_r+0x918>
 800aa50:	f1c0 001c 	rsb	r0, r0, #28
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	4403      	add	r3, r0
 800aa58:	4480      	add	r8, r0
 800aa5a:	4405      	add	r5, r0
 800aa5c:	9304      	str	r3, [sp, #16]
 800aa5e:	f1b8 0f00 	cmp.w	r8, #0
 800aa62:	dd05      	ble.n	800aa70 <_dtoa_r+0x838>
 800aa64:	4659      	mov	r1, fp
 800aa66:	4642      	mov	r2, r8
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 ffbb 	bl	800b9e4 <__lshift>
 800aa6e:	4683      	mov	fp, r0
 800aa70:	9b04      	ldr	r3, [sp, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dd05      	ble.n	800aa82 <_dtoa_r+0x84a>
 800aa76:	4631      	mov	r1, r6
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 ffb2 	bl	800b9e4 <__lshift>
 800aa80:	4606      	mov	r6, r0
 800aa82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d069      	beq.n	800ab5c <_dtoa_r+0x924>
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4658      	mov	r0, fp
 800aa8c:	f001 f816 	bl	800babc <__mcmp>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	da63      	bge.n	800ab5c <_dtoa_r+0x924>
 800aa94:	2300      	movs	r3, #0
 800aa96:	4659      	mov	r1, fp
 800aa98:	220a      	movs	r2, #10
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 fda8 	bl	800b5f0 <__multadd>
 800aaa0:	9b08      	ldr	r3, [sp, #32]
 800aaa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaa6:	4683      	mov	fp, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 818f 	beq.w	800adcc <_dtoa_r+0xb94>
 800aaae:	4639      	mov	r1, r7
 800aab0:	2300      	movs	r3, #0
 800aab2:	220a      	movs	r2, #10
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fd9b 	bl	800b5f0 <__multadd>
 800aaba:	f1b9 0f00 	cmp.w	r9, #0
 800aabe:	4607      	mov	r7, r0
 800aac0:	f300 808e 	bgt.w	800abe0 <_dtoa_r+0x9a8>
 800aac4:	9b05      	ldr	r3, [sp, #20]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	dc50      	bgt.n	800ab6c <_dtoa_r+0x934>
 800aaca:	e089      	b.n	800abe0 <_dtoa_r+0x9a8>
 800aacc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aad2:	e75d      	b.n	800a990 <_dtoa_r+0x758>
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	1e5e      	subs	r6, r3, #1
 800aad8:	9b06      	ldr	r3, [sp, #24]
 800aada:	42b3      	cmp	r3, r6
 800aadc:	bfbf      	itttt	lt
 800aade:	9b06      	ldrlt	r3, [sp, #24]
 800aae0:	9606      	strlt	r6, [sp, #24]
 800aae2:	1af2      	sublt	r2, r6, r3
 800aae4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800aae6:	bfb6      	itet	lt
 800aae8:	189b      	addlt	r3, r3, r2
 800aaea:	1b9e      	subge	r6, r3, r6
 800aaec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	bfb8      	it	lt
 800aaf2:	2600      	movlt	r6, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfb5      	itete	lt
 800aaf8:	eba8 0503 	sublt.w	r5, r8, r3
 800aafc:	9b01      	ldrge	r3, [sp, #4]
 800aafe:	2300      	movlt	r3, #0
 800ab00:	4645      	movge	r5, r8
 800ab02:	e747      	b.n	800a994 <_dtoa_r+0x75c>
 800ab04:	9e06      	ldr	r6, [sp, #24]
 800ab06:	9f08      	ldr	r7, [sp, #32]
 800ab08:	4645      	mov	r5, r8
 800ab0a:	e74c      	b.n	800a9a6 <_dtoa_r+0x76e>
 800ab0c:	9a06      	ldr	r2, [sp, #24]
 800ab0e:	e775      	b.n	800a9fc <_dtoa_r+0x7c4>
 800ab10:	9b05      	ldr	r3, [sp, #20]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	dc18      	bgt.n	800ab48 <_dtoa_r+0x910>
 800ab16:	9b02      	ldr	r3, [sp, #8]
 800ab18:	b9b3      	cbnz	r3, 800ab48 <_dtoa_r+0x910>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab20:	b9a3      	cbnz	r3, 800ab4c <_dtoa_r+0x914>
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab28:	0d1b      	lsrs	r3, r3, #20
 800ab2a:	051b      	lsls	r3, r3, #20
 800ab2c:	b12b      	cbz	r3, 800ab3a <_dtoa_r+0x902>
 800ab2e:	9b04      	ldr	r3, [sp, #16]
 800ab30:	3301      	adds	r3, #1
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	f108 0801 	add.w	r8, r8, #1
 800ab38:	2301      	movs	r3, #1
 800ab3a:	9306      	str	r3, [sp, #24]
 800ab3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f47f af74 	bne.w	800aa2c <_dtoa_r+0x7f4>
 800ab44:	2001      	movs	r0, #1
 800ab46:	e779      	b.n	800aa3c <_dtoa_r+0x804>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e7f6      	b.n	800ab3a <_dtoa_r+0x902>
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	e7f4      	b.n	800ab3a <_dtoa_r+0x902>
 800ab50:	d085      	beq.n	800aa5e <_dtoa_r+0x826>
 800ab52:	4618      	mov	r0, r3
 800ab54:	301c      	adds	r0, #28
 800ab56:	e77d      	b.n	800aa54 <_dtoa_r+0x81c>
 800ab58:	40240000 	.word	0x40240000
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dc38      	bgt.n	800abd4 <_dtoa_r+0x99c>
 800ab62:	9b05      	ldr	r3, [sp, #20]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	dd35      	ble.n	800abd4 <_dtoa_r+0x99c>
 800ab68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab6c:	f1b9 0f00 	cmp.w	r9, #0
 800ab70:	d10d      	bne.n	800ab8e <_dtoa_r+0x956>
 800ab72:	4631      	mov	r1, r6
 800ab74:	464b      	mov	r3, r9
 800ab76:	2205      	movs	r2, #5
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 fd39 	bl	800b5f0 <__multadd>
 800ab7e:	4601      	mov	r1, r0
 800ab80:	4606      	mov	r6, r0
 800ab82:	4658      	mov	r0, fp
 800ab84:	f000 ff9a 	bl	800babc <__mcmp>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	f73f adbd 	bgt.w	800a708 <_dtoa_r+0x4d0>
 800ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab90:	9d00      	ldr	r5, [sp, #0]
 800ab92:	ea6f 0a03 	mvn.w	sl, r3
 800ab96:	f04f 0800 	mov.w	r8, #0
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fd05 	bl	800b5ac <_Bfree>
 800aba2:	2f00      	cmp	r7, #0
 800aba4:	f43f aeb4 	beq.w	800a910 <_dtoa_r+0x6d8>
 800aba8:	f1b8 0f00 	cmp.w	r8, #0
 800abac:	d005      	beq.n	800abba <_dtoa_r+0x982>
 800abae:	45b8      	cmp	r8, r7
 800abb0:	d003      	beq.n	800abba <_dtoa_r+0x982>
 800abb2:	4641      	mov	r1, r8
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fcf9 	bl	800b5ac <_Bfree>
 800abba:	4639      	mov	r1, r7
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fcf5 	bl	800b5ac <_Bfree>
 800abc2:	e6a5      	b.n	800a910 <_dtoa_r+0x6d8>
 800abc4:	2600      	movs	r6, #0
 800abc6:	4637      	mov	r7, r6
 800abc8:	e7e1      	b.n	800ab8e <_dtoa_r+0x956>
 800abca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800abcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800abd0:	4637      	mov	r7, r6
 800abd2:	e599      	b.n	800a708 <_dtoa_r+0x4d0>
 800abd4:	9b08      	ldr	r3, [sp, #32]
 800abd6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 80fd 	beq.w	800adda <_dtoa_r+0xba2>
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	dd05      	ble.n	800abf0 <_dtoa_r+0x9b8>
 800abe4:	4639      	mov	r1, r7
 800abe6:	462a      	mov	r2, r5
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fefb 	bl	800b9e4 <__lshift>
 800abee:	4607      	mov	r7, r0
 800abf0:	9b06      	ldr	r3, [sp, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d05c      	beq.n	800acb0 <_dtoa_r+0xa78>
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fc97 	bl	800b52c <_Balloc>
 800abfe:	4605      	mov	r5, r0
 800ac00:	b928      	cbnz	r0, 800ac0e <_dtoa_r+0x9d6>
 800ac02:	4b80      	ldr	r3, [pc, #512]	; (800ae04 <_dtoa_r+0xbcc>)
 800ac04:	4602      	mov	r2, r0
 800ac06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac0a:	f7ff bb2e 	b.w	800a26a <_dtoa_r+0x32>
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	3202      	adds	r2, #2
 800ac12:	0092      	lsls	r2, r2, #2
 800ac14:	f107 010c 	add.w	r1, r7, #12
 800ac18:	300c      	adds	r0, #12
 800ac1a:	f7fd fd15 	bl	8008648 <memcpy>
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4629      	mov	r1, r5
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 fede 	bl	800b9e4 <__lshift>
 800ac28:	9b00      	ldr	r3, [sp, #0]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	9301      	str	r3, [sp, #4]
 800ac2e:	9b00      	ldr	r3, [sp, #0]
 800ac30:	444b      	add	r3, r9
 800ac32:	9307      	str	r3, [sp, #28]
 800ac34:	9b02      	ldr	r3, [sp, #8]
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	46b8      	mov	r8, r7
 800ac3c:	9306      	str	r3, [sp, #24]
 800ac3e:	4607      	mov	r7, r0
 800ac40:	9b01      	ldr	r3, [sp, #4]
 800ac42:	4631      	mov	r1, r6
 800ac44:	3b01      	subs	r3, #1
 800ac46:	4658      	mov	r0, fp
 800ac48:	9302      	str	r3, [sp, #8]
 800ac4a:	f7ff fa67 	bl	800a11c <quorem>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	3330      	adds	r3, #48	; 0x30
 800ac52:	9004      	str	r0, [sp, #16]
 800ac54:	4641      	mov	r1, r8
 800ac56:	4658      	mov	r0, fp
 800ac58:	9308      	str	r3, [sp, #32]
 800ac5a:	f000 ff2f 	bl	800babc <__mcmp>
 800ac5e:	463a      	mov	r2, r7
 800ac60:	4681      	mov	r9, r0
 800ac62:	4631      	mov	r1, r6
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 ff45 	bl	800baf4 <__mdiff>
 800ac6a:	68c2      	ldr	r2, [r0, #12]
 800ac6c:	9b08      	ldr	r3, [sp, #32]
 800ac6e:	4605      	mov	r5, r0
 800ac70:	bb02      	cbnz	r2, 800acb4 <_dtoa_r+0xa7c>
 800ac72:	4601      	mov	r1, r0
 800ac74:	4658      	mov	r0, fp
 800ac76:	f000 ff21 	bl	800babc <__mcmp>
 800ac7a:	9b08      	ldr	r3, [sp, #32]
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4620      	mov	r0, r4
 800ac82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ac86:	f000 fc91 	bl	800b5ac <_Bfree>
 800ac8a:	9b05      	ldr	r3, [sp, #20]
 800ac8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac8e:	9d01      	ldr	r5, [sp, #4]
 800ac90:	ea43 0102 	orr.w	r1, r3, r2
 800ac94:	9b06      	ldr	r3, [sp, #24]
 800ac96:	430b      	orrs	r3, r1
 800ac98:	9b08      	ldr	r3, [sp, #32]
 800ac9a:	d10d      	bne.n	800acb8 <_dtoa_r+0xa80>
 800ac9c:	2b39      	cmp	r3, #57	; 0x39
 800ac9e:	d029      	beq.n	800acf4 <_dtoa_r+0xabc>
 800aca0:	f1b9 0f00 	cmp.w	r9, #0
 800aca4:	dd01      	ble.n	800acaa <_dtoa_r+0xa72>
 800aca6:	9b04      	ldr	r3, [sp, #16]
 800aca8:	3331      	adds	r3, #49	; 0x31
 800acaa:	9a02      	ldr	r2, [sp, #8]
 800acac:	7013      	strb	r3, [r2, #0]
 800acae:	e774      	b.n	800ab9a <_dtoa_r+0x962>
 800acb0:	4638      	mov	r0, r7
 800acb2:	e7b9      	b.n	800ac28 <_dtoa_r+0x9f0>
 800acb4:	2201      	movs	r2, #1
 800acb6:	e7e2      	b.n	800ac7e <_dtoa_r+0xa46>
 800acb8:	f1b9 0f00 	cmp.w	r9, #0
 800acbc:	db06      	blt.n	800accc <_dtoa_r+0xa94>
 800acbe:	9905      	ldr	r1, [sp, #20]
 800acc0:	ea41 0909 	orr.w	r9, r1, r9
 800acc4:	9906      	ldr	r1, [sp, #24]
 800acc6:	ea59 0101 	orrs.w	r1, r9, r1
 800acca:	d120      	bne.n	800ad0e <_dtoa_r+0xad6>
 800accc:	2a00      	cmp	r2, #0
 800acce:	ddec      	ble.n	800acaa <_dtoa_r+0xa72>
 800acd0:	4659      	mov	r1, fp
 800acd2:	2201      	movs	r2, #1
 800acd4:	4620      	mov	r0, r4
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	f000 fe84 	bl	800b9e4 <__lshift>
 800acdc:	4631      	mov	r1, r6
 800acde:	4683      	mov	fp, r0
 800ace0:	f000 feec 	bl	800babc <__mcmp>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	dc02      	bgt.n	800acf0 <_dtoa_r+0xab8>
 800acea:	d1de      	bne.n	800acaa <_dtoa_r+0xa72>
 800acec:	07da      	lsls	r2, r3, #31
 800acee:	d5dc      	bpl.n	800acaa <_dtoa_r+0xa72>
 800acf0:	2b39      	cmp	r3, #57	; 0x39
 800acf2:	d1d8      	bne.n	800aca6 <_dtoa_r+0xa6e>
 800acf4:	9a02      	ldr	r2, [sp, #8]
 800acf6:	2339      	movs	r3, #57	; 0x39
 800acf8:	7013      	strb	r3, [r2, #0]
 800acfa:	462b      	mov	r3, r5
 800acfc:	461d      	mov	r5, r3
 800acfe:	3b01      	subs	r3, #1
 800ad00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad04:	2a39      	cmp	r2, #57	; 0x39
 800ad06:	d050      	beq.n	800adaa <_dtoa_r+0xb72>
 800ad08:	3201      	adds	r2, #1
 800ad0a:	701a      	strb	r2, [r3, #0]
 800ad0c:	e745      	b.n	800ab9a <_dtoa_r+0x962>
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	dd03      	ble.n	800ad1a <_dtoa_r+0xae2>
 800ad12:	2b39      	cmp	r3, #57	; 0x39
 800ad14:	d0ee      	beq.n	800acf4 <_dtoa_r+0xabc>
 800ad16:	3301      	adds	r3, #1
 800ad18:	e7c7      	b.n	800acaa <_dtoa_r+0xa72>
 800ad1a:	9a01      	ldr	r2, [sp, #4]
 800ad1c:	9907      	ldr	r1, [sp, #28]
 800ad1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad22:	428a      	cmp	r2, r1
 800ad24:	d02a      	beq.n	800ad7c <_dtoa_r+0xb44>
 800ad26:	4659      	mov	r1, fp
 800ad28:	2300      	movs	r3, #0
 800ad2a:	220a      	movs	r2, #10
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f000 fc5f 	bl	800b5f0 <__multadd>
 800ad32:	45b8      	cmp	r8, r7
 800ad34:	4683      	mov	fp, r0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	f04f 020a 	mov.w	r2, #10
 800ad3e:	4641      	mov	r1, r8
 800ad40:	4620      	mov	r0, r4
 800ad42:	d107      	bne.n	800ad54 <_dtoa_r+0xb1c>
 800ad44:	f000 fc54 	bl	800b5f0 <__multadd>
 800ad48:	4680      	mov	r8, r0
 800ad4a:	4607      	mov	r7, r0
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	e775      	b.n	800ac40 <_dtoa_r+0xa08>
 800ad54:	f000 fc4c 	bl	800b5f0 <__multadd>
 800ad58:	4639      	mov	r1, r7
 800ad5a:	4680      	mov	r8, r0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	220a      	movs	r2, #10
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 fc45 	bl	800b5f0 <__multadd>
 800ad66:	4607      	mov	r7, r0
 800ad68:	e7f0      	b.n	800ad4c <_dtoa_r+0xb14>
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	9a00      	ldr	r2, [sp, #0]
 800ad70:	bfcc      	ite	gt
 800ad72:	464d      	movgt	r5, r9
 800ad74:	2501      	movle	r5, #1
 800ad76:	4415      	add	r5, r2
 800ad78:	f04f 0800 	mov.w	r8, #0
 800ad7c:	4659      	mov	r1, fp
 800ad7e:	2201      	movs	r2, #1
 800ad80:	4620      	mov	r0, r4
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	f000 fe2e 	bl	800b9e4 <__lshift>
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4683      	mov	fp, r0
 800ad8c:	f000 fe96 	bl	800babc <__mcmp>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	dcb2      	bgt.n	800acfa <_dtoa_r+0xac2>
 800ad94:	d102      	bne.n	800ad9c <_dtoa_r+0xb64>
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	07db      	lsls	r3, r3, #31
 800ad9a:	d4ae      	bmi.n	800acfa <_dtoa_r+0xac2>
 800ad9c:	462b      	mov	r3, r5
 800ad9e:	461d      	mov	r5, r3
 800ada0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ada4:	2a30      	cmp	r2, #48	; 0x30
 800ada6:	d0fa      	beq.n	800ad9e <_dtoa_r+0xb66>
 800ada8:	e6f7      	b.n	800ab9a <_dtoa_r+0x962>
 800adaa:	9a00      	ldr	r2, [sp, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d1a5      	bne.n	800acfc <_dtoa_r+0xac4>
 800adb0:	f10a 0a01 	add.w	sl, sl, #1
 800adb4:	2331      	movs	r3, #49	; 0x31
 800adb6:	e779      	b.n	800acac <_dtoa_r+0xa74>
 800adb8:	4b13      	ldr	r3, [pc, #76]	; (800ae08 <_dtoa_r+0xbd0>)
 800adba:	f7ff baaf 	b.w	800a31c <_dtoa_r+0xe4>
 800adbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f47f aa86 	bne.w	800a2d2 <_dtoa_r+0x9a>
 800adc6:	4b11      	ldr	r3, [pc, #68]	; (800ae0c <_dtoa_r+0xbd4>)
 800adc8:	f7ff baa8 	b.w	800a31c <_dtoa_r+0xe4>
 800adcc:	f1b9 0f00 	cmp.w	r9, #0
 800add0:	dc03      	bgt.n	800adda <_dtoa_r+0xba2>
 800add2:	9b05      	ldr	r3, [sp, #20]
 800add4:	2b02      	cmp	r3, #2
 800add6:	f73f aec9 	bgt.w	800ab6c <_dtoa_r+0x934>
 800adda:	9d00      	ldr	r5, [sp, #0]
 800addc:	4631      	mov	r1, r6
 800adde:	4658      	mov	r0, fp
 800ade0:	f7ff f99c 	bl	800a11c <quorem>
 800ade4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ade8:	f805 3b01 	strb.w	r3, [r5], #1
 800adec:	9a00      	ldr	r2, [sp, #0]
 800adee:	1aaa      	subs	r2, r5, r2
 800adf0:	4591      	cmp	r9, r2
 800adf2:	ddba      	ble.n	800ad6a <_dtoa_r+0xb32>
 800adf4:	4659      	mov	r1, fp
 800adf6:	2300      	movs	r3, #0
 800adf8:	220a      	movs	r2, #10
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fbf8 	bl	800b5f0 <__multadd>
 800ae00:	4683      	mov	fp, r0
 800ae02:	e7eb      	b.n	800addc <_dtoa_r+0xba4>
 800ae04:	0800d264 	.word	0x0800d264
 800ae08:	0800d064 	.word	0x0800d064
 800ae0c:	0800d1e1 	.word	0x0800d1e1

0800ae10 <rshift>:
 800ae10:	6903      	ldr	r3, [r0, #16]
 800ae12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae1e:	f100 0414 	add.w	r4, r0, #20
 800ae22:	dd45      	ble.n	800aeb0 <rshift+0xa0>
 800ae24:	f011 011f 	ands.w	r1, r1, #31
 800ae28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae30:	d10c      	bne.n	800ae4c <rshift+0x3c>
 800ae32:	f100 0710 	add.w	r7, r0, #16
 800ae36:	4629      	mov	r1, r5
 800ae38:	42b1      	cmp	r1, r6
 800ae3a:	d334      	bcc.n	800aea6 <rshift+0x96>
 800ae3c:	1a9b      	subs	r3, r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	1eea      	subs	r2, r5, #3
 800ae42:	4296      	cmp	r6, r2
 800ae44:	bf38      	it	cc
 800ae46:	2300      	movcc	r3, #0
 800ae48:	4423      	add	r3, r4
 800ae4a:	e015      	b.n	800ae78 <rshift+0x68>
 800ae4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae50:	f1c1 0820 	rsb	r8, r1, #32
 800ae54:	40cf      	lsrs	r7, r1
 800ae56:	f105 0e04 	add.w	lr, r5, #4
 800ae5a:	46a1      	mov	r9, r4
 800ae5c:	4576      	cmp	r6, lr
 800ae5e:	46f4      	mov	ip, lr
 800ae60:	d815      	bhi.n	800ae8e <rshift+0x7e>
 800ae62:	1a9b      	subs	r3, r3, r2
 800ae64:	009a      	lsls	r2, r3, #2
 800ae66:	3a04      	subs	r2, #4
 800ae68:	3501      	adds	r5, #1
 800ae6a:	42ae      	cmp	r6, r5
 800ae6c:	bf38      	it	cc
 800ae6e:	2200      	movcc	r2, #0
 800ae70:	18a3      	adds	r3, r4, r2
 800ae72:	50a7      	str	r7, [r4, r2]
 800ae74:	b107      	cbz	r7, 800ae78 <rshift+0x68>
 800ae76:	3304      	adds	r3, #4
 800ae78:	1b1a      	subs	r2, r3, r4
 800ae7a:	42a3      	cmp	r3, r4
 800ae7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae80:	bf08      	it	eq
 800ae82:	2300      	moveq	r3, #0
 800ae84:	6102      	str	r2, [r0, #16]
 800ae86:	bf08      	it	eq
 800ae88:	6143      	streq	r3, [r0, #20]
 800ae8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae8e:	f8dc c000 	ldr.w	ip, [ip]
 800ae92:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae96:	ea4c 0707 	orr.w	r7, ip, r7
 800ae9a:	f849 7b04 	str.w	r7, [r9], #4
 800ae9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aea2:	40cf      	lsrs	r7, r1
 800aea4:	e7da      	b.n	800ae5c <rshift+0x4c>
 800aea6:	f851 cb04 	ldr.w	ip, [r1], #4
 800aeaa:	f847 cf04 	str.w	ip, [r7, #4]!
 800aeae:	e7c3      	b.n	800ae38 <rshift+0x28>
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	e7e1      	b.n	800ae78 <rshift+0x68>

0800aeb4 <__hexdig_fun>:
 800aeb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aeb8:	2b09      	cmp	r3, #9
 800aeba:	d802      	bhi.n	800aec2 <__hexdig_fun+0xe>
 800aebc:	3820      	subs	r0, #32
 800aebe:	b2c0      	uxtb	r0, r0
 800aec0:	4770      	bx	lr
 800aec2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aec6:	2b05      	cmp	r3, #5
 800aec8:	d801      	bhi.n	800aece <__hexdig_fun+0x1a>
 800aeca:	3847      	subs	r0, #71	; 0x47
 800aecc:	e7f7      	b.n	800aebe <__hexdig_fun+0xa>
 800aece:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aed2:	2b05      	cmp	r3, #5
 800aed4:	d801      	bhi.n	800aeda <__hexdig_fun+0x26>
 800aed6:	3827      	subs	r0, #39	; 0x27
 800aed8:	e7f1      	b.n	800aebe <__hexdig_fun+0xa>
 800aeda:	2000      	movs	r0, #0
 800aedc:	4770      	bx	lr
	...

0800aee0 <__gethex>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	ed2d 8b02 	vpush	{d8}
 800aee8:	b089      	sub	sp, #36	; 0x24
 800aeea:	ee08 0a10 	vmov	s16, r0
 800aeee:	9304      	str	r3, [sp, #16]
 800aef0:	4bbc      	ldr	r3, [pc, #752]	; (800b1e4 <__gethex+0x304>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	4618      	mov	r0, r3
 800aef8:	468b      	mov	fp, r1
 800aefa:	4690      	mov	r8, r2
 800aefc:	f7f5 f968 	bl	80001d0 <strlen>
 800af00:	9b01      	ldr	r3, [sp, #4]
 800af02:	f8db 2000 	ldr.w	r2, [fp]
 800af06:	4403      	add	r3, r0
 800af08:	4682      	mov	sl, r0
 800af0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af0e:	9305      	str	r3, [sp, #20]
 800af10:	1c93      	adds	r3, r2, #2
 800af12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af1a:	32fe      	adds	r2, #254	; 0xfe
 800af1c:	18d1      	adds	r1, r2, r3
 800af1e:	461f      	mov	r7, r3
 800af20:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af24:	9100      	str	r1, [sp, #0]
 800af26:	2830      	cmp	r0, #48	; 0x30
 800af28:	d0f8      	beq.n	800af1c <__gethex+0x3c>
 800af2a:	f7ff ffc3 	bl	800aeb4 <__hexdig_fun>
 800af2e:	4604      	mov	r4, r0
 800af30:	2800      	cmp	r0, #0
 800af32:	d13a      	bne.n	800afaa <__gethex+0xca>
 800af34:	9901      	ldr	r1, [sp, #4]
 800af36:	4652      	mov	r2, sl
 800af38:	4638      	mov	r0, r7
 800af3a:	f001 f9e1 	bl	800c300 <strncmp>
 800af3e:	4605      	mov	r5, r0
 800af40:	2800      	cmp	r0, #0
 800af42:	d168      	bne.n	800b016 <__gethex+0x136>
 800af44:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af48:	eb07 060a 	add.w	r6, r7, sl
 800af4c:	f7ff ffb2 	bl	800aeb4 <__hexdig_fun>
 800af50:	2800      	cmp	r0, #0
 800af52:	d062      	beq.n	800b01a <__gethex+0x13a>
 800af54:	4633      	mov	r3, r6
 800af56:	7818      	ldrb	r0, [r3, #0]
 800af58:	2830      	cmp	r0, #48	; 0x30
 800af5a:	461f      	mov	r7, r3
 800af5c:	f103 0301 	add.w	r3, r3, #1
 800af60:	d0f9      	beq.n	800af56 <__gethex+0x76>
 800af62:	f7ff ffa7 	bl	800aeb4 <__hexdig_fun>
 800af66:	2301      	movs	r3, #1
 800af68:	fab0 f480 	clz	r4, r0
 800af6c:	0964      	lsrs	r4, r4, #5
 800af6e:	4635      	mov	r5, r6
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	463a      	mov	r2, r7
 800af74:	4616      	mov	r6, r2
 800af76:	3201      	adds	r2, #1
 800af78:	7830      	ldrb	r0, [r6, #0]
 800af7a:	f7ff ff9b 	bl	800aeb4 <__hexdig_fun>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d1f8      	bne.n	800af74 <__gethex+0x94>
 800af82:	9901      	ldr	r1, [sp, #4]
 800af84:	4652      	mov	r2, sl
 800af86:	4630      	mov	r0, r6
 800af88:	f001 f9ba 	bl	800c300 <strncmp>
 800af8c:	b980      	cbnz	r0, 800afb0 <__gethex+0xd0>
 800af8e:	b94d      	cbnz	r5, 800afa4 <__gethex+0xc4>
 800af90:	eb06 050a 	add.w	r5, r6, sl
 800af94:	462a      	mov	r2, r5
 800af96:	4616      	mov	r6, r2
 800af98:	3201      	adds	r2, #1
 800af9a:	7830      	ldrb	r0, [r6, #0]
 800af9c:	f7ff ff8a 	bl	800aeb4 <__hexdig_fun>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d1f8      	bne.n	800af96 <__gethex+0xb6>
 800afa4:	1bad      	subs	r5, r5, r6
 800afa6:	00ad      	lsls	r5, r5, #2
 800afa8:	e004      	b.n	800afb4 <__gethex+0xd4>
 800afaa:	2400      	movs	r4, #0
 800afac:	4625      	mov	r5, r4
 800afae:	e7e0      	b.n	800af72 <__gethex+0x92>
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	d1f7      	bne.n	800afa4 <__gethex+0xc4>
 800afb4:	7833      	ldrb	r3, [r6, #0]
 800afb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afba:	2b50      	cmp	r3, #80	; 0x50
 800afbc:	d13b      	bne.n	800b036 <__gethex+0x156>
 800afbe:	7873      	ldrb	r3, [r6, #1]
 800afc0:	2b2b      	cmp	r3, #43	; 0x2b
 800afc2:	d02c      	beq.n	800b01e <__gethex+0x13e>
 800afc4:	2b2d      	cmp	r3, #45	; 0x2d
 800afc6:	d02e      	beq.n	800b026 <__gethex+0x146>
 800afc8:	1c71      	adds	r1, r6, #1
 800afca:	f04f 0900 	mov.w	r9, #0
 800afce:	7808      	ldrb	r0, [r1, #0]
 800afd0:	f7ff ff70 	bl	800aeb4 <__hexdig_fun>
 800afd4:	1e43      	subs	r3, r0, #1
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b18      	cmp	r3, #24
 800afda:	d82c      	bhi.n	800b036 <__gethex+0x156>
 800afdc:	f1a0 0210 	sub.w	r2, r0, #16
 800afe0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afe4:	f7ff ff66 	bl	800aeb4 <__hexdig_fun>
 800afe8:	1e43      	subs	r3, r0, #1
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b18      	cmp	r3, #24
 800afee:	d91d      	bls.n	800b02c <__gethex+0x14c>
 800aff0:	f1b9 0f00 	cmp.w	r9, #0
 800aff4:	d000      	beq.n	800aff8 <__gethex+0x118>
 800aff6:	4252      	negs	r2, r2
 800aff8:	4415      	add	r5, r2
 800affa:	f8cb 1000 	str.w	r1, [fp]
 800affe:	b1e4      	cbz	r4, 800b03a <__gethex+0x15a>
 800b000:	9b00      	ldr	r3, [sp, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	bf14      	ite	ne
 800b006:	2700      	movne	r7, #0
 800b008:	2706      	moveq	r7, #6
 800b00a:	4638      	mov	r0, r7
 800b00c:	b009      	add	sp, #36	; 0x24
 800b00e:	ecbd 8b02 	vpop	{d8}
 800b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b016:	463e      	mov	r6, r7
 800b018:	4625      	mov	r5, r4
 800b01a:	2401      	movs	r4, #1
 800b01c:	e7ca      	b.n	800afb4 <__gethex+0xd4>
 800b01e:	f04f 0900 	mov.w	r9, #0
 800b022:	1cb1      	adds	r1, r6, #2
 800b024:	e7d3      	b.n	800afce <__gethex+0xee>
 800b026:	f04f 0901 	mov.w	r9, #1
 800b02a:	e7fa      	b.n	800b022 <__gethex+0x142>
 800b02c:	230a      	movs	r3, #10
 800b02e:	fb03 0202 	mla	r2, r3, r2, r0
 800b032:	3a10      	subs	r2, #16
 800b034:	e7d4      	b.n	800afe0 <__gethex+0x100>
 800b036:	4631      	mov	r1, r6
 800b038:	e7df      	b.n	800affa <__gethex+0x11a>
 800b03a:	1bf3      	subs	r3, r6, r7
 800b03c:	3b01      	subs	r3, #1
 800b03e:	4621      	mov	r1, r4
 800b040:	2b07      	cmp	r3, #7
 800b042:	dc0b      	bgt.n	800b05c <__gethex+0x17c>
 800b044:	ee18 0a10 	vmov	r0, s16
 800b048:	f000 fa70 	bl	800b52c <_Balloc>
 800b04c:	4604      	mov	r4, r0
 800b04e:	b940      	cbnz	r0, 800b062 <__gethex+0x182>
 800b050:	4b65      	ldr	r3, [pc, #404]	; (800b1e8 <__gethex+0x308>)
 800b052:	4602      	mov	r2, r0
 800b054:	21de      	movs	r1, #222	; 0xde
 800b056:	4865      	ldr	r0, [pc, #404]	; (800b1ec <__gethex+0x30c>)
 800b058:	f001 f972 	bl	800c340 <__assert_func>
 800b05c:	3101      	adds	r1, #1
 800b05e:	105b      	asrs	r3, r3, #1
 800b060:	e7ee      	b.n	800b040 <__gethex+0x160>
 800b062:	f100 0914 	add.w	r9, r0, #20
 800b066:	f04f 0b00 	mov.w	fp, #0
 800b06a:	f1ca 0301 	rsb	r3, sl, #1
 800b06e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b072:	f8cd b000 	str.w	fp, [sp]
 800b076:	9306      	str	r3, [sp, #24]
 800b078:	42b7      	cmp	r7, r6
 800b07a:	d340      	bcc.n	800b0fe <__gethex+0x21e>
 800b07c:	9802      	ldr	r0, [sp, #8]
 800b07e:	9b00      	ldr	r3, [sp, #0]
 800b080:	f840 3b04 	str.w	r3, [r0], #4
 800b084:	eba0 0009 	sub.w	r0, r0, r9
 800b088:	1080      	asrs	r0, r0, #2
 800b08a:	0146      	lsls	r6, r0, #5
 800b08c:	6120      	str	r0, [r4, #16]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 fb42 	bl	800b718 <__hi0bits>
 800b094:	1a30      	subs	r0, r6, r0
 800b096:	f8d8 6000 	ldr.w	r6, [r8]
 800b09a:	42b0      	cmp	r0, r6
 800b09c:	dd63      	ble.n	800b166 <__gethex+0x286>
 800b09e:	1b87      	subs	r7, r0, r6
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fedc 	bl	800be60 <__any_on>
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	b1a8      	cbz	r0, 800b0d8 <__gethex+0x1f8>
 800b0ac:	1e7b      	subs	r3, r7, #1
 800b0ae:	1159      	asrs	r1, r3, #5
 800b0b0:	f003 021f 	and.w	r2, r3, #31
 800b0b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b0b8:	f04f 0a01 	mov.w	sl, #1
 800b0bc:	fa0a f202 	lsl.w	r2, sl, r2
 800b0c0:	420a      	tst	r2, r1
 800b0c2:	d009      	beq.n	800b0d8 <__gethex+0x1f8>
 800b0c4:	4553      	cmp	r3, sl
 800b0c6:	dd05      	ble.n	800b0d4 <__gethex+0x1f4>
 800b0c8:	1eb9      	subs	r1, r7, #2
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 fec8 	bl	800be60 <__any_on>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d145      	bne.n	800b160 <__gethex+0x280>
 800b0d4:	f04f 0a02 	mov.w	sl, #2
 800b0d8:	4639      	mov	r1, r7
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f7ff fe98 	bl	800ae10 <rshift>
 800b0e0:	443d      	add	r5, r7
 800b0e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0e6:	42ab      	cmp	r3, r5
 800b0e8:	da4c      	bge.n	800b184 <__gethex+0x2a4>
 800b0ea:	ee18 0a10 	vmov	r0, s16
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	f000 fa5c 	bl	800b5ac <_Bfree>
 800b0f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	27a3      	movs	r7, #163	; 0xa3
 800b0fc:	e785      	b.n	800b00a <__gethex+0x12a>
 800b0fe:	1e73      	subs	r3, r6, #1
 800b100:	9a05      	ldr	r2, [sp, #20]
 800b102:	9303      	str	r3, [sp, #12]
 800b104:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b108:	4293      	cmp	r3, r2
 800b10a:	d019      	beq.n	800b140 <__gethex+0x260>
 800b10c:	f1bb 0f20 	cmp.w	fp, #32
 800b110:	d107      	bne.n	800b122 <__gethex+0x242>
 800b112:	9b02      	ldr	r3, [sp, #8]
 800b114:	9a00      	ldr	r2, [sp, #0]
 800b116:	f843 2b04 	str.w	r2, [r3], #4
 800b11a:	9302      	str	r3, [sp, #8]
 800b11c:	2300      	movs	r3, #0
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	469b      	mov	fp, r3
 800b122:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b126:	f7ff fec5 	bl	800aeb4 <__hexdig_fun>
 800b12a:	9b00      	ldr	r3, [sp, #0]
 800b12c:	f000 000f 	and.w	r0, r0, #15
 800b130:	fa00 f00b 	lsl.w	r0, r0, fp
 800b134:	4303      	orrs	r3, r0
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	f10b 0b04 	add.w	fp, fp, #4
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	e00d      	b.n	800b15c <__gethex+0x27c>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	9a06      	ldr	r2, [sp, #24]
 800b144:	4413      	add	r3, r2
 800b146:	42bb      	cmp	r3, r7
 800b148:	d3e0      	bcc.n	800b10c <__gethex+0x22c>
 800b14a:	4618      	mov	r0, r3
 800b14c:	9901      	ldr	r1, [sp, #4]
 800b14e:	9307      	str	r3, [sp, #28]
 800b150:	4652      	mov	r2, sl
 800b152:	f001 f8d5 	bl	800c300 <strncmp>
 800b156:	9b07      	ldr	r3, [sp, #28]
 800b158:	2800      	cmp	r0, #0
 800b15a:	d1d7      	bne.n	800b10c <__gethex+0x22c>
 800b15c:	461e      	mov	r6, r3
 800b15e:	e78b      	b.n	800b078 <__gethex+0x198>
 800b160:	f04f 0a03 	mov.w	sl, #3
 800b164:	e7b8      	b.n	800b0d8 <__gethex+0x1f8>
 800b166:	da0a      	bge.n	800b17e <__gethex+0x29e>
 800b168:	1a37      	subs	r7, r6, r0
 800b16a:	4621      	mov	r1, r4
 800b16c:	ee18 0a10 	vmov	r0, s16
 800b170:	463a      	mov	r2, r7
 800b172:	f000 fc37 	bl	800b9e4 <__lshift>
 800b176:	1bed      	subs	r5, r5, r7
 800b178:	4604      	mov	r4, r0
 800b17a:	f100 0914 	add.w	r9, r0, #20
 800b17e:	f04f 0a00 	mov.w	sl, #0
 800b182:	e7ae      	b.n	800b0e2 <__gethex+0x202>
 800b184:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b188:	42a8      	cmp	r0, r5
 800b18a:	dd72      	ble.n	800b272 <__gethex+0x392>
 800b18c:	1b45      	subs	r5, r0, r5
 800b18e:	42ae      	cmp	r6, r5
 800b190:	dc36      	bgt.n	800b200 <__gethex+0x320>
 800b192:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d02a      	beq.n	800b1f0 <__gethex+0x310>
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d02c      	beq.n	800b1f8 <__gethex+0x318>
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d115      	bne.n	800b1ce <__gethex+0x2ee>
 800b1a2:	42ae      	cmp	r6, r5
 800b1a4:	d113      	bne.n	800b1ce <__gethex+0x2ee>
 800b1a6:	2e01      	cmp	r6, #1
 800b1a8:	d10b      	bne.n	800b1c2 <__gethex+0x2e2>
 800b1aa:	9a04      	ldr	r2, [sp, #16]
 800b1ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	6123      	str	r3, [r4, #16]
 800b1b6:	f8c9 3000 	str.w	r3, [r9]
 800b1ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1bc:	2762      	movs	r7, #98	; 0x62
 800b1be:	601c      	str	r4, [r3, #0]
 800b1c0:	e723      	b.n	800b00a <__gethex+0x12a>
 800b1c2:	1e71      	subs	r1, r6, #1
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 fe4b 	bl	800be60 <__any_on>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d1ed      	bne.n	800b1aa <__gethex+0x2ca>
 800b1ce:	ee18 0a10 	vmov	r0, s16
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	f000 f9ea 	bl	800b5ac <_Bfree>
 800b1d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1da:	2300      	movs	r3, #0
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	2750      	movs	r7, #80	; 0x50
 800b1e0:	e713      	b.n	800b00a <__gethex+0x12a>
 800b1e2:	bf00      	nop
 800b1e4:	0800d2e0 	.word	0x0800d2e0
 800b1e8:	0800d264 	.word	0x0800d264
 800b1ec:	0800d275 	.word	0x0800d275
 800b1f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1eb      	bne.n	800b1ce <__gethex+0x2ee>
 800b1f6:	e7d8      	b.n	800b1aa <__gethex+0x2ca>
 800b1f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1d5      	bne.n	800b1aa <__gethex+0x2ca>
 800b1fe:	e7e6      	b.n	800b1ce <__gethex+0x2ee>
 800b200:	1e6f      	subs	r7, r5, #1
 800b202:	f1ba 0f00 	cmp.w	sl, #0
 800b206:	d131      	bne.n	800b26c <__gethex+0x38c>
 800b208:	b127      	cbz	r7, 800b214 <__gethex+0x334>
 800b20a:	4639      	mov	r1, r7
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 fe27 	bl	800be60 <__any_on>
 800b212:	4682      	mov	sl, r0
 800b214:	117b      	asrs	r3, r7, #5
 800b216:	2101      	movs	r1, #1
 800b218:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b21c:	f007 071f 	and.w	r7, r7, #31
 800b220:	fa01 f707 	lsl.w	r7, r1, r7
 800b224:	421f      	tst	r7, r3
 800b226:	4629      	mov	r1, r5
 800b228:	4620      	mov	r0, r4
 800b22a:	bf18      	it	ne
 800b22c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b230:	1b76      	subs	r6, r6, r5
 800b232:	f7ff fded 	bl	800ae10 <rshift>
 800b236:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b23a:	2702      	movs	r7, #2
 800b23c:	f1ba 0f00 	cmp.w	sl, #0
 800b240:	d048      	beq.n	800b2d4 <__gethex+0x3f4>
 800b242:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d015      	beq.n	800b276 <__gethex+0x396>
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d017      	beq.n	800b27e <__gethex+0x39e>
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d109      	bne.n	800b266 <__gethex+0x386>
 800b252:	f01a 0f02 	tst.w	sl, #2
 800b256:	d006      	beq.n	800b266 <__gethex+0x386>
 800b258:	f8d9 0000 	ldr.w	r0, [r9]
 800b25c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b260:	f01a 0f01 	tst.w	sl, #1
 800b264:	d10e      	bne.n	800b284 <__gethex+0x3a4>
 800b266:	f047 0710 	orr.w	r7, r7, #16
 800b26a:	e033      	b.n	800b2d4 <__gethex+0x3f4>
 800b26c:	f04f 0a01 	mov.w	sl, #1
 800b270:	e7d0      	b.n	800b214 <__gethex+0x334>
 800b272:	2701      	movs	r7, #1
 800b274:	e7e2      	b.n	800b23c <__gethex+0x35c>
 800b276:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b278:	f1c3 0301 	rsb	r3, r3, #1
 800b27c:	9315      	str	r3, [sp, #84]	; 0x54
 800b27e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b280:	2b00      	cmp	r3, #0
 800b282:	d0f0      	beq.n	800b266 <__gethex+0x386>
 800b284:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b288:	f104 0314 	add.w	r3, r4, #20
 800b28c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b290:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b294:	f04f 0c00 	mov.w	ip, #0
 800b298:	4618      	mov	r0, r3
 800b29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2a2:	d01c      	beq.n	800b2de <__gethex+0x3fe>
 800b2a4:	3201      	adds	r2, #1
 800b2a6:	6002      	str	r2, [r0, #0]
 800b2a8:	2f02      	cmp	r7, #2
 800b2aa:	f104 0314 	add.w	r3, r4, #20
 800b2ae:	d13f      	bne.n	800b330 <__gethex+0x450>
 800b2b0:	f8d8 2000 	ldr.w	r2, [r8]
 800b2b4:	3a01      	subs	r2, #1
 800b2b6:	42b2      	cmp	r2, r6
 800b2b8:	d10a      	bne.n	800b2d0 <__gethex+0x3f0>
 800b2ba:	1171      	asrs	r1, r6, #5
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2c2:	f006 061f 	and.w	r6, r6, #31
 800b2c6:	fa02 f606 	lsl.w	r6, r2, r6
 800b2ca:	421e      	tst	r6, r3
 800b2cc:	bf18      	it	ne
 800b2ce:	4617      	movne	r7, r2
 800b2d0:	f047 0720 	orr.w	r7, r7, #32
 800b2d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2d6:	601c      	str	r4, [r3, #0]
 800b2d8:	9b04      	ldr	r3, [sp, #16]
 800b2da:	601d      	str	r5, [r3, #0]
 800b2dc:	e695      	b.n	800b00a <__gethex+0x12a>
 800b2de:	4299      	cmp	r1, r3
 800b2e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2e4:	d8d8      	bhi.n	800b298 <__gethex+0x3b8>
 800b2e6:	68a3      	ldr	r3, [r4, #8]
 800b2e8:	459b      	cmp	fp, r3
 800b2ea:	db19      	blt.n	800b320 <__gethex+0x440>
 800b2ec:	6861      	ldr	r1, [r4, #4]
 800b2ee:	ee18 0a10 	vmov	r0, s16
 800b2f2:	3101      	adds	r1, #1
 800b2f4:	f000 f91a 	bl	800b52c <_Balloc>
 800b2f8:	4681      	mov	r9, r0
 800b2fa:	b918      	cbnz	r0, 800b304 <__gethex+0x424>
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <__gethex+0x488>)
 800b2fe:	4602      	mov	r2, r0
 800b300:	2184      	movs	r1, #132	; 0x84
 800b302:	e6a8      	b.n	800b056 <__gethex+0x176>
 800b304:	6922      	ldr	r2, [r4, #16]
 800b306:	3202      	adds	r2, #2
 800b308:	f104 010c 	add.w	r1, r4, #12
 800b30c:	0092      	lsls	r2, r2, #2
 800b30e:	300c      	adds	r0, #12
 800b310:	f7fd f99a 	bl	8008648 <memcpy>
 800b314:	4621      	mov	r1, r4
 800b316:	ee18 0a10 	vmov	r0, s16
 800b31a:	f000 f947 	bl	800b5ac <_Bfree>
 800b31e:	464c      	mov	r4, r9
 800b320:	6923      	ldr	r3, [r4, #16]
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b328:	6122      	str	r2, [r4, #16]
 800b32a:	2201      	movs	r2, #1
 800b32c:	615a      	str	r2, [r3, #20]
 800b32e:	e7bb      	b.n	800b2a8 <__gethex+0x3c8>
 800b330:	6922      	ldr	r2, [r4, #16]
 800b332:	455a      	cmp	r2, fp
 800b334:	dd0b      	ble.n	800b34e <__gethex+0x46e>
 800b336:	2101      	movs	r1, #1
 800b338:	4620      	mov	r0, r4
 800b33a:	f7ff fd69 	bl	800ae10 <rshift>
 800b33e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b342:	3501      	adds	r5, #1
 800b344:	42ab      	cmp	r3, r5
 800b346:	f6ff aed0 	blt.w	800b0ea <__gethex+0x20a>
 800b34a:	2701      	movs	r7, #1
 800b34c:	e7c0      	b.n	800b2d0 <__gethex+0x3f0>
 800b34e:	f016 061f 	ands.w	r6, r6, #31
 800b352:	d0fa      	beq.n	800b34a <__gethex+0x46a>
 800b354:	449a      	add	sl, r3
 800b356:	f1c6 0620 	rsb	r6, r6, #32
 800b35a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b35e:	f000 f9db 	bl	800b718 <__hi0bits>
 800b362:	42b0      	cmp	r0, r6
 800b364:	dbe7      	blt.n	800b336 <__gethex+0x456>
 800b366:	e7f0      	b.n	800b34a <__gethex+0x46a>
 800b368:	0800d264 	.word	0x0800d264

0800b36c <L_shift>:
 800b36c:	f1c2 0208 	rsb	r2, r2, #8
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	b570      	push	{r4, r5, r6, lr}
 800b374:	f1c2 0620 	rsb	r6, r2, #32
 800b378:	6843      	ldr	r3, [r0, #4]
 800b37a:	6804      	ldr	r4, [r0, #0]
 800b37c:	fa03 f506 	lsl.w	r5, r3, r6
 800b380:	432c      	orrs	r4, r5
 800b382:	40d3      	lsrs	r3, r2
 800b384:	6004      	str	r4, [r0, #0]
 800b386:	f840 3f04 	str.w	r3, [r0, #4]!
 800b38a:	4288      	cmp	r0, r1
 800b38c:	d3f4      	bcc.n	800b378 <L_shift+0xc>
 800b38e:	bd70      	pop	{r4, r5, r6, pc}

0800b390 <__match>:
 800b390:	b530      	push	{r4, r5, lr}
 800b392:	6803      	ldr	r3, [r0, #0]
 800b394:	3301      	adds	r3, #1
 800b396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b39a:	b914      	cbnz	r4, 800b3a2 <__match+0x12>
 800b39c:	6003      	str	r3, [r0, #0]
 800b39e:	2001      	movs	r0, #1
 800b3a0:	bd30      	pop	{r4, r5, pc}
 800b3a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3aa:	2d19      	cmp	r5, #25
 800b3ac:	bf98      	it	ls
 800b3ae:	3220      	addls	r2, #32
 800b3b0:	42a2      	cmp	r2, r4
 800b3b2:	d0f0      	beq.n	800b396 <__match+0x6>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	e7f3      	b.n	800b3a0 <__match+0x10>

0800b3b8 <__hexnan>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	680b      	ldr	r3, [r1, #0]
 800b3be:	6801      	ldr	r1, [r0, #0]
 800b3c0:	115e      	asrs	r6, r3, #5
 800b3c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3c6:	f013 031f 	ands.w	r3, r3, #31
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	bf18      	it	ne
 800b3ce:	3604      	addne	r6, #4
 800b3d0:	2500      	movs	r5, #0
 800b3d2:	1f37      	subs	r7, r6, #4
 800b3d4:	4682      	mov	sl, r0
 800b3d6:	4690      	mov	r8, r2
 800b3d8:	9301      	str	r3, [sp, #4]
 800b3da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3de:	46b9      	mov	r9, r7
 800b3e0:	463c      	mov	r4, r7
 800b3e2:	9502      	str	r5, [sp, #8]
 800b3e4:	46ab      	mov	fp, r5
 800b3e6:	784a      	ldrb	r2, [r1, #1]
 800b3e8:	1c4b      	adds	r3, r1, #1
 800b3ea:	9303      	str	r3, [sp, #12]
 800b3ec:	b342      	cbz	r2, 800b440 <__hexnan+0x88>
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	9105      	str	r1, [sp, #20]
 800b3f2:	9204      	str	r2, [sp, #16]
 800b3f4:	f7ff fd5e 	bl	800aeb4 <__hexdig_fun>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d14f      	bne.n	800b49c <__hexnan+0xe4>
 800b3fc:	9a04      	ldr	r2, [sp, #16]
 800b3fe:	9905      	ldr	r1, [sp, #20]
 800b400:	2a20      	cmp	r2, #32
 800b402:	d818      	bhi.n	800b436 <__hexnan+0x7e>
 800b404:	9b02      	ldr	r3, [sp, #8]
 800b406:	459b      	cmp	fp, r3
 800b408:	dd13      	ble.n	800b432 <__hexnan+0x7a>
 800b40a:	454c      	cmp	r4, r9
 800b40c:	d206      	bcs.n	800b41c <__hexnan+0x64>
 800b40e:	2d07      	cmp	r5, #7
 800b410:	dc04      	bgt.n	800b41c <__hexnan+0x64>
 800b412:	462a      	mov	r2, r5
 800b414:	4649      	mov	r1, r9
 800b416:	4620      	mov	r0, r4
 800b418:	f7ff ffa8 	bl	800b36c <L_shift>
 800b41c:	4544      	cmp	r4, r8
 800b41e:	d950      	bls.n	800b4c2 <__hexnan+0x10a>
 800b420:	2300      	movs	r3, #0
 800b422:	f1a4 0904 	sub.w	r9, r4, #4
 800b426:	f844 3c04 	str.w	r3, [r4, #-4]
 800b42a:	f8cd b008 	str.w	fp, [sp, #8]
 800b42e:	464c      	mov	r4, r9
 800b430:	461d      	mov	r5, r3
 800b432:	9903      	ldr	r1, [sp, #12]
 800b434:	e7d7      	b.n	800b3e6 <__hexnan+0x2e>
 800b436:	2a29      	cmp	r2, #41	; 0x29
 800b438:	d156      	bne.n	800b4e8 <__hexnan+0x130>
 800b43a:	3102      	adds	r1, #2
 800b43c:	f8ca 1000 	str.w	r1, [sl]
 800b440:	f1bb 0f00 	cmp.w	fp, #0
 800b444:	d050      	beq.n	800b4e8 <__hexnan+0x130>
 800b446:	454c      	cmp	r4, r9
 800b448:	d206      	bcs.n	800b458 <__hexnan+0xa0>
 800b44a:	2d07      	cmp	r5, #7
 800b44c:	dc04      	bgt.n	800b458 <__hexnan+0xa0>
 800b44e:	462a      	mov	r2, r5
 800b450:	4649      	mov	r1, r9
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff ff8a 	bl	800b36c <L_shift>
 800b458:	4544      	cmp	r4, r8
 800b45a:	d934      	bls.n	800b4c6 <__hexnan+0x10e>
 800b45c:	f1a8 0204 	sub.w	r2, r8, #4
 800b460:	4623      	mov	r3, r4
 800b462:	f853 1b04 	ldr.w	r1, [r3], #4
 800b466:	f842 1f04 	str.w	r1, [r2, #4]!
 800b46a:	429f      	cmp	r7, r3
 800b46c:	d2f9      	bcs.n	800b462 <__hexnan+0xaa>
 800b46e:	1b3b      	subs	r3, r7, r4
 800b470:	f023 0303 	bic.w	r3, r3, #3
 800b474:	3304      	adds	r3, #4
 800b476:	3401      	adds	r4, #1
 800b478:	3e03      	subs	r6, #3
 800b47a:	42b4      	cmp	r4, r6
 800b47c:	bf88      	it	hi
 800b47e:	2304      	movhi	r3, #4
 800b480:	4443      	add	r3, r8
 800b482:	2200      	movs	r2, #0
 800b484:	f843 2b04 	str.w	r2, [r3], #4
 800b488:	429f      	cmp	r7, r3
 800b48a:	d2fb      	bcs.n	800b484 <__hexnan+0xcc>
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	b91b      	cbnz	r3, 800b498 <__hexnan+0xe0>
 800b490:	4547      	cmp	r7, r8
 800b492:	d127      	bne.n	800b4e4 <__hexnan+0x12c>
 800b494:	2301      	movs	r3, #1
 800b496:	603b      	str	r3, [r7, #0]
 800b498:	2005      	movs	r0, #5
 800b49a:	e026      	b.n	800b4ea <__hexnan+0x132>
 800b49c:	3501      	adds	r5, #1
 800b49e:	2d08      	cmp	r5, #8
 800b4a0:	f10b 0b01 	add.w	fp, fp, #1
 800b4a4:	dd06      	ble.n	800b4b4 <__hexnan+0xfc>
 800b4a6:	4544      	cmp	r4, r8
 800b4a8:	d9c3      	bls.n	800b432 <__hexnan+0x7a>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4b0:	2501      	movs	r5, #1
 800b4b2:	3c04      	subs	r4, #4
 800b4b4:	6822      	ldr	r2, [r4, #0]
 800b4b6:	f000 000f 	and.w	r0, r0, #15
 800b4ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4be:	6022      	str	r2, [r4, #0]
 800b4c0:	e7b7      	b.n	800b432 <__hexnan+0x7a>
 800b4c2:	2508      	movs	r5, #8
 800b4c4:	e7b5      	b.n	800b432 <__hexnan+0x7a>
 800b4c6:	9b01      	ldr	r3, [sp, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d0df      	beq.n	800b48c <__hexnan+0xd4>
 800b4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d0:	f1c3 0320 	rsb	r3, r3, #32
 800b4d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4dc:	401a      	ands	r2, r3
 800b4de:	f846 2c04 	str.w	r2, [r6, #-4]
 800b4e2:	e7d3      	b.n	800b48c <__hexnan+0xd4>
 800b4e4:	3f04      	subs	r7, #4
 800b4e6:	e7d1      	b.n	800b48c <__hexnan+0xd4>
 800b4e8:	2004      	movs	r0, #4
 800b4ea:	b007      	add	sp, #28
 800b4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4f0 <_localeconv_r>:
 800b4f0:	4800      	ldr	r0, [pc, #0]	; (800b4f4 <_localeconv_r+0x4>)
 800b4f2:	4770      	bx	lr
 800b4f4:	20000174 	.word	0x20000174

0800b4f8 <malloc>:
 800b4f8:	4b02      	ldr	r3, [pc, #8]	; (800b504 <malloc+0xc>)
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	f000 bd2f 	b.w	800bf60 <_malloc_r>
 800b502:	bf00      	nop
 800b504:	2000001c 	.word	0x2000001c

0800b508 <__ascii_mbtowc>:
 800b508:	b082      	sub	sp, #8
 800b50a:	b901      	cbnz	r1, 800b50e <__ascii_mbtowc+0x6>
 800b50c:	a901      	add	r1, sp, #4
 800b50e:	b142      	cbz	r2, 800b522 <__ascii_mbtowc+0x1a>
 800b510:	b14b      	cbz	r3, 800b526 <__ascii_mbtowc+0x1e>
 800b512:	7813      	ldrb	r3, [r2, #0]
 800b514:	600b      	str	r3, [r1, #0]
 800b516:	7812      	ldrb	r2, [r2, #0]
 800b518:	1e10      	subs	r0, r2, #0
 800b51a:	bf18      	it	ne
 800b51c:	2001      	movne	r0, #1
 800b51e:	b002      	add	sp, #8
 800b520:	4770      	bx	lr
 800b522:	4610      	mov	r0, r2
 800b524:	e7fb      	b.n	800b51e <__ascii_mbtowc+0x16>
 800b526:	f06f 0001 	mvn.w	r0, #1
 800b52a:	e7f8      	b.n	800b51e <__ascii_mbtowc+0x16>

0800b52c <_Balloc>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b530:	4604      	mov	r4, r0
 800b532:	460d      	mov	r5, r1
 800b534:	b976      	cbnz	r6, 800b554 <_Balloc+0x28>
 800b536:	2010      	movs	r0, #16
 800b538:	f7ff ffde 	bl	800b4f8 <malloc>
 800b53c:	4602      	mov	r2, r0
 800b53e:	6260      	str	r0, [r4, #36]	; 0x24
 800b540:	b920      	cbnz	r0, 800b54c <_Balloc+0x20>
 800b542:	4b18      	ldr	r3, [pc, #96]	; (800b5a4 <_Balloc+0x78>)
 800b544:	4818      	ldr	r0, [pc, #96]	; (800b5a8 <_Balloc+0x7c>)
 800b546:	2166      	movs	r1, #102	; 0x66
 800b548:	f000 fefa 	bl	800c340 <__assert_func>
 800b54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b550:	6006      	str	r6, [r0, #0]
 800b552:	60c6      	str	r6, [r0, #12]
 800b554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b556:	68f3      	ldr	r3, [r6, #12]
 800b558:	b183      	cbz	r3, 800b57c <_Balloc+0x50>
 800b55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b562:	b9b8      	cbnz	r0, 800b594 <_Balloc+0x68>
 800b564:	2101      	movs	r1, #1
 800b566:	fa01 f605 	lsl.w	r6, r1, r5
 800b56a:	1d72      	adds	r2, r6, #5
 800b56c:	0092      	lsls	r2, r2, #2
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 fc97 	bl	800bea2 <_calloc_r>
 800b574:	b160      	cbz	r0, 800b590 <_Balloc+0x64>
 800b576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b57a:	e00e      	b.n	800b59a <_Balloc+0x6e>
 800b57c:	2221      	movs	r2, #33	; 0x21
 800b57e:	2104      	movs	r1, #4
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fc8e 	bl	800bea2 <_calloc_r>
 800b586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b588:	60f0      	str	r0, [r6, #12]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1e4      	bne.n	800b55a <_Balloc+0x2e>
 800b590:	2000      	movs	r0, #0
 800b592:	bd70      	pop	{r4, r5, r6, pc}
 800b594:	6802      	ldr	r2, [r0, #0]
 800b596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b59a:	2300      	movs	r3, #0
 800b59c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5a0:	e7f7      	b.n	800b592 <_Balloc+0x66>
 800b5a2:	bf00      	nop
 800b5a4:	0800d1ee 	.word	0x0800d1ee
 800b5a8:	0800d2f4 	.word	0x0800d2f4

0800b5ac <_Bfree>:
 800b5ac:	b570      	push	{r4, r5, r6, lr}
 800b5ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	b976      	cbnz	r6, 800b5d4 <_Bfree+0x28>
 800b5b6:	2010      	movs	r0, #16
 800b5b8:	f7ff ff9e 	bl	800b4f8 <malloc>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	6268      	str	r0, [r5, #36]	; 0x24
 800b5c0:	b920      	cbnz	r0, 800b5cc <_Bfree+0x20>
 800b5c2:	4b09      	ldr	r3, [pc, #36]	; (800b5e8 <_Bfree+0x3c>)
 800b5c4:	4809      	ldr	r0, [pc, #36]	; (800b5ec <_Bfree+0x40>)
 800b5c6:	218a      	movs	r1, #138	; 0x8a
 800b5c8:	f000 feba 	bl	800c340 <__assert_func>
 800b5cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5d0:	6006      	str	r6, [r0, #0]
 800b5d2:	60c6      	str	r6, [r0, #12]
 800b5d4:	b13c      	cbz	r4, 800b5e6 <_Bfree+0x3a>
 800b5d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5d8:	6862      	ldr	r2, [r4, #4]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5e0:	6021      	str	r1, [r4, #0]
 800b5e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5e6:	bd70      	pop	{r4, r5, r6, pc}
 800b5e8:	0800d1ee 	.word	0x0800d1ee
 800b5ec:	0800d2f4 	.word	0x0800d2f4

0800b5f0 <__multadd>:
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	690e      	ldr	r6, [r1, #16]
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	4698      	mov	r8, r3
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	f101 0014 	add.w	r0, r1, #20
 800b600:	2300      	movs	r3, #0
 800b602:	6805      	ldr	r5, [r0, #0]
 800b604:	b2a9      	uxth	r1, r5
 800b606:	fb02 8101 	mla	r1, r2, r1, r8
 800b60a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b60e:	0c2d      	lsrs	r5, r5, #16
 800b610:	fb02 c505 	mla	r5, r2, r5, ip
 800b614:	b289      	uxth	r1, r1
 800b616:	3301      	adds	r3, #1
 800b618:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b61c:	429e      	cmp	r6, r3
 800b61e:	f840 1b04 	str.w	r1, [r0], #4
 800b622:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b626:	dcec      	bgt.n	800b602 <__multadd+0x12>
 800b628:	f1b8 0f00 	cmp.w	r8, #0
 800b62c:	d022      	beq.n	800b674 <__multadd+0x84>
 800b62e:	68a3      	ldr	r3, [r4, #8]
 800b630:	42b3      	cmp	r3, r6
 800b632:	dc19      	bgt.n	800b668 <__multadd+0x78>
 800b634:	6861      	ldr	r1, [r4, #4]
 800b636:	4638      	mov	r0, r7
 800b638:	3101      	adds	r1, #1
 800b63a:	f7ff ff77 	bl	800b52c <_Balloc>
 800b63e:	4605      	mov	r5, r0
 800b640:	b928      	cbnz	r0, 800b64e <__multadd+0x5e>
 800b642:	4602      	mov	r2, r0
 800b644:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <__multadd+0x8c>)
 800b646:	480e      	ldr	r0, [pc, #56]	; (800b680 <__multadd+0x90>)
 800b648:	21b5      	movs	r1, #181	; 0xb5
 800b64a:	f000 fe79 	bl	800c340 <__assert_func>
 800b64e:	6922      	ldr	r2, [r4, #16]
 800b650:	3202      	adds	r2, #2
 800b652:	f104 010c 	add.w	r1, r4, #12
 800b656:	0092      	lsls	r2, r2, #2
 800b658:	300c      	adds	r0, #12
 800b65a:	f7fc fff5 	bl	8008648 <memcpy>
 800b65e:	4621      	mov	r1, r4
 800b660:	4638      	mov	r0, r7
 800b662:	f7ff ffa3 	bl	800b5ac <_Bfree>
 800b666:	462c      	mov	r4, r5
 800b668:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b66c:	3601      	adds	r6, #1
 800b66e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b672:	6126      	str	r6, [r4, #16]
 800b674:	4620      	mov	r0, r4
 800b676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67a:	bf00      	nop
 800b67c:	0800d264 	.word	0x0800d264
 800b680:	0800d2f4 	.word	0x0800d2f4

0800b684 <__s2b>:
 800b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b688:	460c      	mov	r4, r1
 800b68a:	4615      	mov	r5, r2
 800b68c:	461f      	mov	r7, r3
 800b68e:	2209      	movs	r2, #9
 800b690:	3308      	adds	r3, #8
 800b692:	4606      	mov	r6, r0
 800b694:	fb93 f3f2 	sdiv	r3, r3, r2
 800b698:	2100      	movs	r1, #0
 800b69a:	2201      	movs	r2, #1
 800b69c:	429a      	cmp	r2, r3
 800b69e:	db09      	blt.n	800b6b4 <__s2b+0x30>
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f7ff ff43 	bl	800b52c <_Balloc>
 800b6a6:	b940      	cbnz	r0, 800b6ba <__s2b+0x36>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4b19      	ldr	r3, [pc, #100]	; (800b710 <__s2b+0x8c>)
 800b6ac:	4819      	ldr	r0, [pc, #100]	; (800b714 <__s2b+0x90>)
 800b6ae:	21ce      	movs	r1, #206	; 0xce
 800b6b0:	f000 fe46 	bl	800c340 <__assert_func>
 800b6b4:	0052      	lsls	r2, r2, #1
 800b6b6:	3101      	adds	r1, #1
 800b6b8:	e7f0      	b.n	800b69c <__s2b+0x18>
 800b6ba:	9b08      	ldr	r3, [sp, #32]
 800b6bc:	6143      	str	r3, [r0, #20]
 800b6be:	2d09      	cmp	r5, #9
 800b6c0:	f04f 0301 	mov.w	r3, #1
 800b6c4:	6103      	str	r3, [r0, #16]
 800b6c6:	dd16      	ble.n	800b6f6 <__s2b+0x72>
 800b6c8:	f104 0909 	add.w	r9, r4, #9
 800b6cc:	46c8      	mov	r8, r9
 800b6ce:	442c      	add	r4, r5
 800b6d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6d4:	4601      	mov	r1, r0
 800b6d6:	3b30      	subs	r3, #48	; 0x30
 800b6d8:	220a      	movs	r2, #10
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff ff88 	bl	800b5f0 <__multadd>
 800b6e0:	45a0      	cmp	r8, r4
 800b6e2:	d1f5      	bne.n	800b6d0 <__s2b+0x4c>
 800b6e4:	f1a5 0408 	sub.w	r4, r5, #8
 800b6e8:	444c      	add	r4, r9
 800b6ea:	1b2d      	subs	r5, r5, r4
 800b6ec:	1963      	adds	r3, r4, r5
 800b6ee:	42bb      	cmp	r3, r7
 800b6f0:	db04      	blt.n	800b6fc <__s2b+0x78>
 800b6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f6:	340a      	adds	r4, #10
 800b6f8:	2509      	movs	r5, #9
 800b6fa:	e7f6      	b.n	800b6ea <__s2b+0x66>
 800b6fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b700:	4601      	mov	r1, r0
 800b702:	3b30      	subs	r3, #48	; 0x30
 800b704:	220a      	movs	r2, #10
 800b706:	4630      	mov	r0, r6
 800b708:	f7ff ff72 	bl	800b5f0 <__multadd>
 800b70c:	e7ee      	b.n	800b6ec <__s2b+0x68>
 800b70e:	bf00      	nop
 800b710:	0800d264 	.word	0x0800d264
 800b714:	0800d2f4 	.word	0x0800d2f4

0800b718 <__hi0bits>:
 800b718:	0c03      	lsrs	r3, r0, #16
 800b71a:	041b      	lsls	r3, r3, #16
 800b71c:	b9d3      	cbnz	r3, 800b754 <__hi0bits+0x3c>
 800b71e:	0400      	lsls	r0, r0, #16
 800b720:	2310      	movs	r3, #16
 800b722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b726:	bf04      	itt	eq
 800b728:	0200      	lsleq	r0, r0, #8
 800b72a:	3308      	addeq	r3, #8
 800b72c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b730:	bf04      	itt	eq
 800b732:	0100      	lsleq	r0, r0, #4
 800b734:	3304      	addeq	r3, #4
 800b736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b73a:	bf04      	itt	eq
 800b73c:	0080      	lsleq	r0, r0, #2
 800b73e:	3302      	addeq	r3, #2
 800b740:	2800      	cmp	r0, #0
 800b742:	db05      	blt.n	800b750 <__hi0bits+0x38>
 800b744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b748:	f103 0301 	add.w	r3, r3, #1
 800b74c:	bf08      	it	eq
 800b74e:	2320      	moveq	r3, #32
 800b750:	4618      	mov	r0, r3
 800b752:	4770      	bx	lr
 800b754:	2300      	movs	r3, #0
 800b756:	e7e4      	b.n	800b722 <__hi0bits+0xa>

0800b758 <__lo0bits>:
 800b758:	6803      	ldr	r3, [r0, #0]
 800b75a:	f013 0207 	ands.w	r2, r3, #7
 800b75e:	4601      	mov	r1, r0
 800b760:	d00b      	beq.n	800b77a <__lo0bits+0x22>
 800b762:	07da      	lsls	r2, r3, #31
 800b764:	d424      	bmi.n	800b7b0 <__lo0bits+0x58>
 800b766:	0798      	lsls	r0, r3, #30
 800b768:	bf49      	itett	mi
 800b76a:	085b      	lsrmi	r3, r3, #1
 800b76c:	089b      	lsrpl	r3, r3, #2
 800b76e:	2001      	movmi	r0, #1
 800b770:	600b      	strmi	r3, [r1, #0]
 800b772:	bf5c      	itt	pl
 800b774:	600b      	strpl	r3, [r1, #0]
 800b776:	2002      	movpl	r0, #2
 800b778:	4770      	bx	lr
 800b77a:	b298      	uxth	r0, r3
 800b77c:	b9b0      	cbnz	r0, 800b7ac <__lo0bits+0x54>
 800b77e:	0c1b      	lsrs	r3, r3, #16
 800b780:	2010      	movs	r0, #16
 800b782:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b786:	bf04      	itt	eq
 800b788:	0a1b      	lsreq	r3, r3, #8
 800b78a:	3008      	addeq	r0, #8
 800b78c:	071a      	lsls	r2, r3, #28
 800b78e:	bf04      	itt	eq
 800b790:	091b      	lsreq	r3, r3, #4
 800b792:	3004      	addeq	r0, #4
 800b794:	079a      	lsls	r2, r3, #30
 800b796:	bf04      	itt	eq
 800b798:	089b      	lsreq	r3, r3, #2
 800b79a:	3002      	addeq	r0, #2
 800b79c:	07da      	lsls	r2, r3, #31
 800b79e:	d403      	bmi.n	800b7a8 <__lo0bits+0x50>
 800b7a0:	085b      	lsrs	r3, r3, #1
 800b7a2:	f100 0001 	add.w	r0, r0, #1
 800b7a6:	d005      	beq.n	800b7b4 <__lo0bits+0x5c>
 800b7a8:	600b      	str	r3, [r1, #0]
 800b7aa:	4770      	bx	lr
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	e7e8      	b.n	800b782 <__lo0bits+0x2a>
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	4770      	bx	lr
 800b7b4:	2020      	movs	r0, #32
 800b7b6:	4770      	bx	lr

0800b7b8 <__i2b>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	2101      	movs	r1, #1
 800b7be:	f7ff feb5 	bl	800b52c <_Balloc>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	b928      	cbnz	r0, 800b7d2 <__i2b+0x1a>
 800b7c6:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <__i2b+0x24>)
 800b7c8:	4805      	ldr	r0, [pc, #20]	; (800b7e0 <__i2b+0x28>)
 800b7ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7ce:	f000 fdb7 	bl	800c340 <__assert_func>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	6144      	str	r4, [r0, #20]
 800b7d6:	6103      	str	r3, [r0, #16]
 800b7d8:	bd10      	pop	{r4, pc}
 800b7da:	bf00      	nop
 800b7dc:	0800d264 	.word	0x0800d264
 800b7e0:	0800d2f4 	.word	0x0800d2f4

0800b7e4 <__multiply>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	4614      	mov	r4, r2
 800b7ea:	690a      	ldr	r2, [r1, #16]
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	bfb8      	it	lt
 800b7f2:	460b      	movlt	r3, r1
 800b7f4:	460d      	mov	r5, r1
 800b7f6:	bfbc      	itt	lt
 800b7f8:	4625      	movlt	r5, r4
 800b7fa:	461c      	movlt	r4, r3
 800b7fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b800:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b804:	68ab      	ldr	r3, [r5, #8]
 800b806:	6869      	ldr	r1, [r5, #4]
 800b808:	eb0a 0709 	add.w	r7, sl, r9
 800b80c:	42bb      	cmp	r3, r7
 800b80e:	b085      	sub	sp, #20
 800b810:	bfb8      	it	lt
 800b812:	3101      	addlt	r1, #1
 800b814:	f7ff fe8a 	bl	800b52c <_Balloc>
 800b818:	b930      	cbnz	r0, 800b828 <__multiply+0x44>
 800b81a:	4602      	mov	r2, r0
 800b81c:	4b42      	ldr	r3, [pc, #264]	; (800b928 <__multiply+0x144>)
 800b81e:	4843      	ldr	r0, [pc, #268]	; (800b92c <__multiply+0x148>)
 800b820:	f240 115d 	movw	r1, #349	; 0x15d
 800b824:	f000 fd8c 	bl	800c340 <__assert_func>
 800b828:	f100 0614 	add.w	r6, r0, #20
 800b82c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b830:	4633      	mov	r3, r6
 800b832:	2200      	movs	r2, #0
 800b834:	4543      	cmp	r3, r8
 800b836:	d31e      	bcc.n	800b876 <__multiply+0x92>
 800b838:	f105 0c14 	add.w	ip, r5, #20
 800b83c:	f104 0314 	add.w	r3, r4, #20
 800b840:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b844:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b848:	9202      	str	r2, [sp, #8]
 800b84a:	ebac 0205 	sub.w	r2, ip, r5
 800b84e:	3a15      	subs	r2, #21
 800b850:	f022 0203 	bic.w	r2, r2, #3
 800b854:	3204      	adds	r2, #4
 800b856:	f105 0115 	add.w	r1, r5, #21
 800b85a:	458c      	cmp	ip, r1
 800b85c:	bf38      	it	cc
 800b85e:	2204      	movcc	r2, #4
 800b860:	9201      	str	r2, [sp, #4]
 800b862:	9a02      	ldr	r2, [sp, #8]
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	429a      	cmp	r2, r3
 800b868:	d808      	bhi.n	800b87c <__multiply+0x98>
 800b86a:	2f00      	cmp	r7, #0
 800b86c:	dc55      	bgt.n	800b91a <__multiply+0x136>
 800b86e:	6107      	str	r7, [r0, #16]
 800b870:	b005      	add	sp, #20
 800b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b876:	f843 2b04 	str.w	r2, [r3], #4
 800b87a:	e7db      	b.n	800b834 <__multiply+0x50>
 800b87c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b880:	f1ba 0f00 	cmp.w	sl, #0
 800b884:	d020      	beq.n	800b8c8 <__multiply+0xe4>
 800b886:	f105 0e14 	add.w	lr, r5, #20
 800b88a:	46b1      	mov	r9, r6
 800b88c:	2200      	movs	r2, #0
 800b88e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b892:	f8d9 b000 	ldr.w	fp, [r9]
 800b896:	b2a1      	uxth	r1, r4
 800b898:	fa1f fb8b 	uxth.w	fp, fp
 800b89c:	fb0a b101 	mla	r1, sl, r1, fp
 800b8a0:	4411      	add	r1, r2
 800b8a2:	f8d9 2000 	ldr.w	r2, [r9]
 800b8a6:	0c24      	lsrs	r4, r4, #16
 800b8a8:	0c12      	lsrs	r2, r2, #16
 800b8aa:	fb0a 2404 	mla	r4, sl, r4, r2
 800b8ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b8b2:	b289      	uxth	r1, r1
 800b8b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b8b8:	45f4      	cmp	ip, lr
 800b8ba:	f849 1b04 	str.w	r1, [r9], #4
 800b8be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b8c2:	d8e4      	bhi.n	800b88e <__multiply+0xaa>
 800b8c4:	9901      	ldr	r1, [sp, #4]
 800b8c6:	5072      	str	r2, [r6, r1]
 800b8c8:	9a03      	ldr	r2, [sp, #12]
 800b8ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	d01f      	beq.n	800b916 <__multiply+0x132>
 800b8d6:	6834      	ldr	r4, [r6, #0]
 800b8d8:	f105 0114 	add.w	r1, r5, #20
 800b8dc:	46b6      	mov	lr, r6
 800b8de:	f04f 0a00 	mov.w	sl, #0
 800b8e2:	880a      	ldrh	r2, [r1, #0]
 800b8e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b8e8:	fb09 b202 	mla	r2, r9, r2, fp
 800b8ec:	4492      	add	sl, r2
 800b8ee:	b2a4      	uxth	r4, r4
 800b8f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b8f4:	f84e 4b04 	str.w	r4, [lr], #4
 800b8f8:	f851 4b04 	ldr.w	r4, [r1], #4
 800b8fc:	f8be 2000 	ldrh.w	r2, [lr]
 800b900:	0c24      	lsrs	r4, r4, #16
 800b902:	fb09 2404 	mla	r4, r9, r4, r2
 800b906:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b90a:	458c      	cmp	ip, r1
 800b90c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b910:	d8e7      	bhi.n	800b8e2 <__multiply+0xfe>
 800b912:	9a01      	ldr	r2, [sp, #4]
 800b914:	50b4      	str	r4, [r6, r2]
 800b916:	3604      	adds	r6, #4
 800b918:	e7a3      	b.n	800b862 <__multiply+0x7e>
 800b91a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1a5      	bne.n	800b86e <__multiply+0x8a>
 800b922:	3f01      	subs	r7, #1
 800b924:	e7a1      	b.n	800b86a <__multiply+0x86>
 800b926:	bf00      	nop
 800b928:	0800d264 	.word	0x0800d264
 800b92c:	0800d2f4 	.word	0x0800d2f4

0800b930 <__pow5mult>:
 800b930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b934:	4615      	mov	r5, r2
 800b936:	f012 0203 	ands.w	r2, r2, #3
 800b93a:	4606      	mov	r6, r0
 800b93c:	460f      	mov	r7, r1
 800b93e:	d007      	beq.n	800b950 <__pow5mult+0x20>
 800b940:	4c25      	ldr	r4, [pc, #148]	; (800b9d8 <__pow5mult+0xa8>)
 800b942:	3a01      	subs	r2, #1
 800b944:	2300      	movs	r3, #0
 800b946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b94a:	f7ff fe51 	bl	800b5f0 <__multadd>
 800b94e:	4607      	mov	r7, r0
 800b950:	10ad      	asrs	r5, r5, #2
 800b952:	d03d      	beq.n	800b9d0 <__pow5mult+0xa0>
 800b954:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b956:	b97c      	cbnz	r4, 800b978 <__pow5mult+0x48>
 800b958:	2010      	movs	r0, #16
 800b95a:	f7ff fdcd 	bl	800b4f8 <malloc>
 800b95e:	4602      	mov	r2, r0
 800b960:	6270      	str	r0, [r6, #36]	; 0x24
 800b962:	b928      	cbnz	r0, 800b970 <__pow5mult+0x40>
 800b964:	4b1d      	ldr	r3, [pc, #116]	; (800b9dc <__pow5mult+0xac>)
 800b966:	481e      	ldr	r0, [pc, #120]	; (800b9e0 <__pow5mult+0xb0>)
 800b968:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b96c:	f000 fce8 	bl	800c340 <__assert_func>
 800b970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b974:	6004      	str	r4, [r0, #0]
 800b976:	60c4      	str	r4, [r0, #12]
 800b978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b97c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b980:	b94c      	cbnz	r4, 800b996 <__pow5mult+0x66>
 800b982:	f240 2171 	movw	r1, #625	; 0x271
 800b986:	4630      	mov	r0, r6
 800b988:	f7ff ff16 	bl	800b7b8 <__i2b>
 800b98c:	2300      	movs	r3, #0
 800b98e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b992:	4604      	mov	r4, r0
 800b994:	6003      	str	r3, [r0, #0]
 800b996:	f04f 0900 	mov.w	r9, #0
 800b99a:	07eb      	lsls	r3, r5, #31
 800b99c:	d50a      	bpl.n	800b9b4 <__pow5mult+0x84>
 800b99e:	4639      	mov	r1, r7
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff ff1e 	bl	800b7e4 <__multiply>
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	4680      	mov	r8, r0
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f7ff fdfd 	bl	800b5ac <_Bfree>
 800b9b2:	4647      	mov	r7, r8
 800b9b4:	106d      	asrs	r5, r5, #1
 800b9b6:	d00b      	beq.n	800b9d0 <__pow5mult+0xa0>
 800b9b8:	6820      	ldr	r0, [r4, #0]
 800b9ba:	b938      	cbnz	r0, 800b9cc <__pow5mult+0x9c>
 800b9bc:	4622      	mov	r2, r4
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7ff ff0f 	bl	800b7e4 <__multiply>
 800b9c6:	6020      	str	r0, [r4, #0]
 800b9c8:	f8c0 9000 	str.w	r9, [r0]
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	e7e4      	b.n	800b99a <__pow5mult+0x6a>
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d6:	bf00      	nop
 800b9d8:	0800d448 	.word	0x0800d448
 800b9dc:	0800d1ee 	.word	0x0800d1ee
 800b9e0:	0800d2f4 	.word	0x0800d2f4

0800b9e4 <__lshift>:
 800b9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	6849      	ldr	r1, [r1, #4]
 800b9ec:	6923      	ldr	r3, [r4, #16]
 800b9ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9f2:	68a3      	ldr	r3, [r4, #8]
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	4691      	mov	r9, r2
 800b9f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9fc:	f108 0601 	add.w	r6, r8, #1
 800ba00:	42b3      	cmp	r3, r6
 800ba02:	db0b      	blt.n	800ba1c <__lshift+0x38>
 800ba04:	4638      	mov	r0, r7
 800ba06:	f7ff fd91 	bl	800b52c <_Balloc>
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	b948      	cbnz	r0, 800ba22 <__lshift+0x3e>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	4b28      	ldr	r3, [pc, #160]	; (800bab4 <__lshift+0xd0>)
 800ba12:	4829      	ldr	r0, [pc, #164]	; (800bab8 <__lshift+0xd4>)
 800ba14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba18:	f000 fc92 	bl	800c340 <__assert_func>
 800ba1c:	3101      	adds	r1, #1
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	e7ee      	b.n	800ba00 <__lshift+0x1c>
 800ba22:	2300      	movs	r3, #0
 800ba24:	f100 0114 	add.w	r1, r0, #20
 800ba28:	f100 0210 	add.w	r2, r0, #16
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	4553      	cmp	r3, sl
 800ba30:	db33      	blt.n	800ba9a <__lshift+0xb6>
 800ba32:	6920      	ldr	r0, [r4, #16]
 800ba34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba38:	f104 0314 	add.w	r3, r4, #20
 800ba3c:	f019 091f 	ands.w	r9, r9, #31
 800ba40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba48:	d02b      	beq.n	800baa2 <__lshift+0xbe>
 800ba4a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba4e:	468a      	mov	sl, r1
 800ba50:	2200      	movs	r2, #0
 800ba52:	6818      	ldr	r0, [r3, #0]
 800ba54:	fa00 f009 	lsl.w	r0, r0, r9
 800ba58:	4302      	orrs	r2, r0
 800ba5a:	f84a 2b04 	str.w	r2, [sl], #4
 800ba5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba62:	459c      	cmp	ip, r3
 800ba64:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba68:	d8f3      	bhi.n	800ba52 <__lshift+0x6e>
 800ba6a:	ebac 0304 	sub.w	r3, ip, r4
 800ba6e:	3b15      	subs	r3, #21
 800ba70:	f023 0303 	bic.w	r3, r3, #3
 800ba74:	3304      	adds	r3, #4
 800ba76:	f104 0015 	add.w	r0, r4, #21
 800ba7a:	4584      	cmp	ip, r0
 800ba7c:	bf38      	it	cc
 800ba7e:	2304      	movcc	r3, #4
 800ba80:	50ca      	str	r2, [r1, r3]
 800ba82:	b10a      	cbz	r2, 800ba88 <__lshift+0xa4>
 800ba84:	f108 0602 	add.w	r6, r8, #2
 800ba88:	3e01      	subs	r6, #1
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	612e      	str	r6, [r5, #16]
 800ba8e:	4621      	mov	r1, r4
 800ba90:	f7ff fd8c 	bl	800b5ac <_Bfree>
 800ba94:	4628      	mov	r0, r5
 800ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba9e:	3301      	adds	r3, #1
 800baa0:	e7c5      	b.n	800ba2e <__lshift+0x4a>
 800baa2:	3904      	subs	r1, #4
 800baa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa8:	f841 2f04 	str.w	r2, [r1, #4]!
 800baac:	459c      	cmp	ip, r3
 800baae:	d8f9      	bhi.n	800baa4 <__lshift+0xc0>
 800bab0:	e7ea      	b.n	800ba88 <__lshift+0xa4>
 800bab2:	bf00      	nop
 800bab4:	0800d264 	.word	0x0800d264
 800bab8:	0800d2f4 	.word	0x0800d2f4

0800babc <__mcmp>:
 800babc:	b530      	push	{r4, r5, lr}
 800babe:	6902      	ldr	r2, [r0, #16]
 800bac0:	690c      	ldr	r4, [r1, #16]
 800bac2:	1b12      	subs	r2, r2, r4
 800bac4:	d10e      	bne.n	800bae4 <__mcmp+0x28>
 800bac6:	f100 0314 	add.w	r3, r0, #20
 800baca:	3114      	adds	r1, #20
 800bacc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bad0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bad4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bad8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800badc:	42a5      	cmp	r5, r4
 800bade:	d003      	beq.n	800bae8 <__mcmp+0x2c>
 800bae0:	d305      	bcc.n	800baee <__mcmp+0x32>
 800bae2:	2201      	movs	r2, #1
 800bae4:	4610      	mov	r0, r2
 800bae6:	bd30      	pop	{r4, r5, pc}
 800bae8:	4283      	cmp	r3, r0
 800baea:	d3f3      	bcc.n	800bad4 <__mcmp+0x18>
 800baec:	e7fa      	b.n	800bae4 <__mcmp+0x28>
 800baee:	f04f 32ff 	mov.w	r2, #4294967295
 800baf2:	e7f7      	b.n	800bae4 <__mcmp+0x28>

0800baf4 <__mdiff>:
 800baf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf8:	460c      	mov	r4, r1
 800bafa:	4606      	mov	r6, r0
 800bafc:	4611      	mov	r1, r2
 800bafe:	4620      	mov	r0, r4
 800bb00:	4617      	mov	r7, r2
 800bb02:	f7ff ffdb 	bl	800babc <__mcmp>
 800bb06:	1e05      	subs	r5, r0, #0
 800bb08:	d110      	bne.n	800bb2c <__mdiff+0x38>
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f7ff fd0d 	bl	800b52c <_Balloc>
 800bb12:	b930      	cbnz	r0, 800bb22 <__mdiff+0x2e>
 800bb14:	4b39      	ldr	r3, [pc, #228]	; (800bbfc <__mdiff+0x108>)
 800bb16:	4602      	mov	r2, r0
 800bb18:	f240 2132 	movw	r1, #562	; 0x232
 800bb1c:	4838      	ldr	r0, [pc, #224]	; (800bc00 <__mdiff+0x10c>)
 800bb1e:	f000 fc0f 	bl	800c340 <__assert_func>
 800bb22:	2301      	movs	r3, #1
 800bb24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2c:	bfa4      	itt	ge
 800bb2e:	463b      	movge	r3, r7
 800bb30:	4627      	movge	r7, r4
 800bb32:	4630      	mov	r0, r6
 800bb34:	6879      	ldr	r1, [r7, #4]
 800bb36:	bfa6      	itte	ge
 800bb38:	461c      	movge	r4, r3
 800bb3a:	2500      	movge	r5, #0
 800bb3c:	2501      	movlt	r5, #1
 800bb3e:	f7ff fcf5 	bl	800b52c <_Balloc>
 800bb42:	b920      	cbnz	r0, 800bb4e <__mdiff+0x5a>
 800bb44:	4b2d      	ldr	r3, [pc, #180]	; (800bbfc <__mdiff+0x108>)
 800bb46:	4602      	mov	r2, r0
 800bb48:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb4c:	e7e6      	b.n	800bb1c <__mdiff+0x28>
 800bb4e:	693e      	ldr	r6, [r7, #16]
 800bb50:	60c5      	str	r5, [r0, #12]
 800bb52:	6925      	ldr	r5, [r4, #16]
 800bb54:	f107 0114 	add.w	r1, r7, #20
 800bb58:	f104 0914 	add.w	r9, r4, #20
 800bb5c:	f100 0e14 	add.w	lr, r0, #20
 800bb60:	f107 0210 	add.w	r2, r7, #16
 800bb64:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bb68:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bb6c:	46f2      	mov	sl, lr
 800bb6e:	2700      	movs	r7, #0
 800bb70:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb78:	fa1f f883 	uxth.w	r8, r3
 800bb7c:	fa17 f78b 	uxtah	r7, r7, fp
 800bb80:	0c1b      	lsrs	r3, r3, #16
 800bb82:	eba7 0808 	sub.w	r8, r7, r8
 800bb86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb8e:	fa1f f888 	uxth.w	r8, r8
 800bb92:	141f      	asrs	r7, r3, #16
 800bb94:	454d      	cmp	r5, r9
 800bb96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb9a:	f84a 3b04 	str.w	r3, [sl], #4
 800bb9e:	d8e7      	bhi.n	800bb70 <__mdiff+0x7c>
 800bba0:	1b2b      	subs	r3, r5, r4
 800bba2:	3b15      	subs	r3, #21
 800bba4:	f023 0303 	bic.w	r3, r3, #3
 800bba8:	3304      	adds	r3, #4
 800bbaa:	3415      	adds	r4, #21
 800bbac:	42a5      	cmp	r5, r4
 800bbae:	bf38      	it	cc
 800bbb0:	2304      	movcc	r3, #4
 800bbb2:	4419      	add	r1, r3
 800bbb4:	4473      	add	r3, lr
 800bbb6:	469e      	mov	lr, r3
 800bbb8:	460d      	mov	r5, r1
 800bbba:	4565      	cmp	r5, ip
 800bbbc:	d30e      	bcc.n	800bbdc <__mdiff+0xe8>
 800bbbe:	f10c 0203 	add.w	r2, ip, #3
 800bbc2:	1a52      	subs	r2, r2, r1
 800bbc4:	f022 0203 	bic.w	r2, r2, #3
 800bbc8:	3903      	subs	r1, #3
 800bbca:	458c      	cmp	ip, r1
 800bbcc:	bf38      	it	cc
 800bbce:	2200      	movcc	r2, #0
 800bbd0:	441a      	add	r2, r3
 800bbd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bbd6:	b17b      	cbz	r3, 800bbf8 <__mdiff+0x104>
 800bbd8:	6106      	str	r6, [r0, #16]
 800bbda:	e7a5      	b.n	800bb28 <__mdiff+0x34>
 800bbdc:	f855 8b04 	ldr.w	r8, [r5], #4
 800bbe0:	fa17 f488 	uxtah	r4, r7, r8
 800bbe4:	1422      	asrs	r2, r4, #16
 800bbe6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bbea:	b2a4      	uxth	r4, r4
 800bbec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bbf0:	f84e 4b04 	str.w	r4, [lr], #4
 800bbf4:	1417      	asrs	r7, r2, #16
 800bbf6:	e7e0      	b.n	800bbba <__mdiff+0xc6>
 800bbf8:	3e01      	subs	r6, #1
 800bbfa:	e7ea      	b.n	800bbd2 <__mdiff+0xde>
 800bbfc:	0800d264 	.word	0x0800d264
 800bc00:	0800d2f4 	.word	0x0800d2f4

0800bc04 <__ulp>:
 800bc04:	b082      	sub	sp, #8
 800bc06:	ed8d 0b00 	vstr	d0, [sp]
 800bc0a:	9b01      	ldr	r3, [sp, #4]
 800bc0c:	4912      	ldr	r1, [pc, #72]	; (800bc58 <__ulp+0x54>)
 800bc0e:	4019      	ands	r1, r3
 800bc10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc14:	2900      	cmp	r1, #0
 800bc16:	dd05      	ble.n	800bc24 <__ulp+0x20>
 800bc18:	2200      	movs	r2, #0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	ec43 2b10 	vmov	d0, r2, r3
 800bc20:	b002      	add	sp, #8
 800bc22:	4770      	bx	lr
 800bc24:	4249      	negs	r1, r1
 800bc26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc2a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bc2e:	f04f 0200 	mov.w	r2, #0
 800bc32:	f04f 0300 	mov.w	r3, #0
 800bc36:	da04      	bge.n	800bc42 <__ulp+0x3e>
 800bc38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bc3c:	fa41 f300 	asr.w	r3, r1, r0
 800bc40:	e7ec      	b.n	800bc1c <__ulp+0x18>
 800bc42:	f1a0 0114 	sub.w	r1, r0, #20
 800bc46:	291e      	cmp	r1, #30
 800bc48:	bfda      	itte	le
 800bc4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bc4e:	fa20 f101 	lsrle.w	r1, r0, r1
 800bc52:	2101      	movgt	r1, #1
 800bc54:	460a      	mov	r2, r1
 800bc56:	e7e1      	b.n	800bc1c <__ulp+0x18>
 800bc58:	7ff00000 	.word	0x7ff00000

0800bc5c <__b2d>:
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	6905      	ldr	r5, [r0, #16]
 800bc60:	f100 0714 	add.w	r7, r0, #20
 800bc64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bc68:	1f2e      	subs	r6, r5, #4
 800bc6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f7ff fd52 	bl	800b718 <__hi0bits>
 800bc74:	f1c0 0320 	rsb	r3, r0, #32
 800bc78:	280a      	cmp	r0, #10
 800bc7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bcf8 <__b2d+0x9c>
 800bc7e:	600b      	str	r3, [r1, #0]
 800bc80:	dc14      	bgt.n	800bcac <__b2d+0x50>
 800bc82:	f1c0 0e0b 	rsb	lr, r0, #11
 800bc86:	fa24 f10e 	lsr.w	r1, r4, lr
 800bc8a:	42b7      	cmp	r7, r6
 800bc8c:	ea41 030c 	orr.w	r3, r1, ip
 800bc90:	bf34      	ite	cc
 800bc92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bc96:	2100      	movcs	r1, #0
 800bc98:	3015      	adds	r0, #21
 800bc9a:	fa04 f000 	lsl.w	r0, r4, r0
 800bc9e:	fa21 f10e 	lsr.w	r1, r1, lr
 800bca2:	ea40 0201 	orr.w	r2, r0, r1
 800bca6:	ec43 2b10 	vmov	d0, r2, r3
 800bcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcac:	42b7      	cmp	r7, r6
 800bcae:	bf3a      	itte	cc
 800bcb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcb4:	f1a5 0608 	subcc.w	r6, r5, #8
 800bcb8:	2100      	movcs	r1, #0
 800bcba:	380b      	subs	r0, #11
 800bcbc:	d017      	beq.n	800bcee <__b2d+0x92>
 800bcbe:	f1c0 0c20 	rsb	ip, r0, #32
 800bcc2:	fa04 f500 	lsl.w	r5, r4, r0
 800bcc6:	42be      	cmp	r6, r7
 800bcc8:	fa21 f40c 	lsr.w	r4, r1, ip
 800bccc:	ea45 0504 	orr.w	r5, r5, r4
 800bcd0:	bf8c      	ite	hi
 800bcd2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bcd6:	2400      	movls	r4, #0
 800bcd8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bcdc:	fa01 f000 	lsl.w	r0, r1, r0
 800bce0:	fa24 f40c 	lsr.w	r4, r4, ip
 800bce4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bce8:	ea40 0204 	orr.w	r2, r0, r4
 800bcec:	e7db      	b.n	800bca6 <__b2d+0x4a>
 800bcee:	ea44 030c 	orr.w	r3, r4, ip
 800bcf2:	460a      	mov	r2, r1
 800bcf4:	e7d7      	b.n	800bca6 <__b2d+0x4a>
 800bcf6:	bf00      	nop
 800bcf8:	3ff00000 	.word	0x3ff00000

0800bcfc <__d2b>:
 800bcfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd00:	4689      	mov	r9, r1
 800bd02:	2101      	movs	r1, #1
 800bd04:	ec57 6b10 	vmov	r6, r7, d0
 800bd08:	4690      	mov	r8, r2
 800bd0a:	f7ff fc0f 	bl	800b52c <_Balloc>
 800bd0e:	4604      	mov	r4, r0
 800bd10:	b930      	cbnz	r0, 800bd20 <__d2b+0x24>
 800bd12:	4602      	mov	r2, r0
 800bd14:	4b25      	ldr	r3, [pc, #148]	; (800bdac <__d2b+0xb0>)
 800bd16:	4826      	ldr	r0, [pc, #152]	; (800bdb0 <__d2b+0xb4>)
 800bd18:	f240 310a 	movw	r1, #778	; 0x30a
 800bd1c:	f000 fb10 	bl	800c340 <__assert_func>
 800bd20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd28:	bb35      	cbnz	r5, 800bd78 <__d2b+0x7c>
 800bd2a:	2e00      	cmp	r6, #0
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	d028      	beq.n	800bd82 <__d2b+0x86>
 800bd30:	4668      	mov	r0, sp
 800bd32:	9600      	str	r6, [sp, #0]
 800bd34:	f7ff fd10 	bl	800b758 <__lo0bits>
 800bd38:	9900      	ldr	r1, [sp, #0]
 800bd3a:	b300      	cbz	r0, 800bd7e <__d2b+0x82>
 800bd3c:	9a01      	ldr	r2, [sp, #4]
 800bd3e:	f1c0 0320 	rsb	r3, r0, #32
 800bd42:	fa02 f303 	lsl.w	r3, r2, r3
 800bd46:	430b      	orrs	r3, r1
 800bd48:	40c2      	lsrs	r2, r0
 800bd4a:	6163      	str	r3, [r4, #20]
 800bd4c:	9201      	str	r2, [sp, #4]
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	61a3      	str	r3, [r4, #24]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	bf14      	ite	ne
 800bd56:	2202      	movne	r2, #2
 800bd58:	2201      	moveq	r2, #1
 800bd5a:	6122      	str	r2, [r4, #16]
 800bd5c:	b1d5      	cbz	r5, 800bd94 <__d2b+0x98>
 800bd5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd62:	4405      	add	r5, r0
 800bd64:	f8c9 5000 	str.w	r5, [r9]
 800bd68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd6c:	f8c8 0000 	str.w	r0, [r8]
 800bd70:	4620      	mov	r0, r4
 800bd72:	b003      	add	sp, #12
 800bd74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd7c:	e7d5      	b.n	800bd2a <__d2b+0x2e>
 800bd7e:	6161      	str	r1, [r4, #20]
 800bd80:	e7e5      	b.n	800bd4e <__d2b+0x52>
 800bd82:	a801      	add	r0, sp, #4
 800bd84:	f7ff fce8 	bl	800b758 <__lo0bits>
 800bd88:	9b01      	ldr	r3, [sp, #4]
 800bd8a:	6163      	str	r3, [r4, #20]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	6122      	str	r2, [r4, #16]
 800bd90:	3020      	adds	r0, #32
 800bd92:	e7e3      	b.n	800bd5c <__d2b+0x60>
 800bd94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd9c:	f8c9 0000 	str.w	r0, [r9]
 800bda0:	6918      	ldr	r0, [r3, #16]
 800bda2:	f7ff fcb9 	bl	800b718 <__hi0bits>
 800bda6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdaa:	e7df      	b.n	800bd6c <__d2b+0x70>
 800bdac:	0800d264 	.word	0x0800d264
 800bdb0:	0800d2f4 	.word	0x0800d2f4

0800bdb4 <__ratio>:
 800bdb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	4688      	mov	r8, r1
 800bdba:	4669      	mov	r1, sp
 800bdbc:	4681      	mov	r9, r0
 800bdbe:	f7ff ff4d 	bl	800bc5c <__b2d>
 800bdc2:	a901      	add	r1, sp, #4
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	ec55 4b10 	vmov	r4, r5, d0
 800bdca:	f7ff ff47 	bl	800bc5c <__b2d>
 800bdce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdd2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bdd6:	eba3 0c02 	sub.w	ip, r3, r2
 800bdda:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdde:	1a9b      	subs	r3, r3, r2
 800bde0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bde4:	ec51 0b10 	vmov	r0, r1, d0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bfd6      	itet	le
 800bdec:	460a      	movle	r2, r1
 800bdee:	462a      	movgt	r2, r5
 800bdf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bdf4:	468b      	mov	fp, r1
 800bdf6:	462f      	mov	r7, r5
 800bdf8:	bfd4      	ite	le
 800bdfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bdfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be02:	4620      	mov	r0, r4
 800be04:	ee10 2a10 	vmov	r2, s0
 800be08:	465b      	mov	r3, fp
 800be0a:	4639      	mov	r1, r7
 800be0c:	f7f4 fd1e 	bl	800084c <__aeabi_ddiv>
 800be10:	ec41 0b10 	vmov	d0, r0, r1
 800be14:	b003      	add	sp, #12
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be1a <__copybits>:
 800be1a:	3901      	subs	r1, #1
 800be1c:	b570      	push	{r4, r5, r6, lr}
 800be1e:	1149      	asrs	r1, r1, #5
 800be20:	6914      	ldr	r4, [r2, #16]
 800be22:	3101      	adds	r1, #1
 800be24:	f102 0314 	add.w	r3, r2, #20
 800be28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be30:	1f05      	subs	r5, r0, #4
 800be32:	42a3      	cmp	r3, r4
 800be34:	d30c      	bcc.n	800be50 <__copybits+0x36>
 800be36:	1aa3      	subs	r3, r4, r2
 800be38:	3b11      	subs	r3, #17
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	3211      	adds	r2, #17
 800be40:	42a2      	cmp	r2, r4
 800be42:	bf88      	it	hi
 800be44:	2300      	movhi	r3, #0
 800be46:	4418      	add	r0, r3
 800be48:	2300      	movs	r3, #0
 800be4a:	4288      	cmp	r0, r1
 800be4c:	d305      	bcc.n	800be5a <__copybits+0x40>
 800be4e:	bd70      	pop	{r4, r5, r6, pc}
 800be50:	f853 6b04 	ldr.w	r6, [r3], #4
 800be54:	f845 6f04 	str.w	r6, [r5, #4]!
 800be58:	e7eb      	b.n	800be32 <__copybits+0x18>
 800be5a:	f840 3b04 	str.w	r3, [r0], #4
 800be5e:	e7f4      	b.n	800be4a <__copybits+0x30>

0800be60 <__any_on>:
 800be60:	f100 0214 	add.w	r2, r0, #20
 800be64:	6900      	ldr	r0, [r0, #16]
 800be66:	114b      	asrs	r3, r1, #5
 800be68:	4298      	cmp	r0, r3
 800be6a:	b510      	push	{r4, lr}
 800be6c:	db11      	blt.n	800be92 <__any_on+0x32>
 800be6e:	dd0a      	ble.n	800be86 <__any_on+0x26>
 800be70:	f011 011f 	ands.w	r1, r1, #31
 800be74:	d007      	beq.n	800be86 <__any_on+0x26>
 800be76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be7a:	fa24 f001 	lsr.w	r0, r4, r1
 800be7e:	fa00 f101 	lsl.w	r1, r0, r1
 800be82:	428c      	cmp	r4, r1
 800be84:	d10b      	bne.n	800be9e <__any_on+0x3e>
 800be86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d803      	bhi.n	800be96 <__any_on+0x36>
 800be8e:	2000      	movs	r0, #0
 800be90:	bd10      	pop	{r4, pc}
 800be92:	4603      	mov	r3, r0
 800be94:	e7f7      	b.n	800be86 <__any_on+0x26>
 800be96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be9a:	2900      	cmp	r1, #0
 800be9c:	d0f5      	beq.n	800be8a <__any_on+0x2a>
 800be9e:	2001      	movs	r0, #1
 800bea0:	e7f6      	b.n	800be90 <__any_on+0x30>

0800bea2 <_calloc_r>:
 800bea2:	b513      	push	{r0, r1, r4, lr}
 800bea4:	434a      	muls	r2, r1
 800bea6:	4611      	mov	r1, r2
 800bea8:	9201      	str	r2, [sp, #4]
 800beaa:	f000 f859 	bl	800bf60 <_malloc_r>
 800beae:	4604      	mov	r4, r0
 800beb0:	b118      	cbz	r0, 800beba <_calloc_r+0x18>
 800beb2:	9a01      	ldr	r2, [sp, #4]
 800beb4:	2100      	movs	r1, #0
 800beb6:	f7fc fbd5 	bl	8008664 <memset>
 800beba:	4620      	mov	r0, r4
 800bebc:	b002      	add	sp, #8
 800bebe:	bd10      	pop	{r4, pc}

0800bec0 <_free_r>:
 800bec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bec2:	2900      	cmp	r1, #0
 800bec4:	d048      	beq.n	800bf58 <_free_r+0x98>
 800bec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beca:	9001      	str	r0, [sp, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f1a1 0404 	sub.w	r4, r1, #4
 800bed2:	bfb8      	it	lt
 800bed4:	18e4      	addlt	r4, r4, r3
 800bed6:	f000 fa7d 	bl	800c3d4 <__malloc_lock>
 800beda:	4a20      	ldr	r2, [pc, #128]	; (800bf5c <_free_r+0x9c>)
 800bedc:	9801      	ldr	r0, [sp, #4]
 800bede:	6813      	ldr	r3, [r2, #0]
 800bee0:	4615      	mov	r5, r2
 800bee2:	b933      	cbnz	r3, 800bef2 <_free_r+0x32>
 800bee4:	6063      	str	r3, [r4, #4]
 800bee6:	6014      	str	r4, [r2, #0]
 800bee8:	b003      	add	sp, #12
 800beea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800beee:	f000 ba77 	b.w	800c3e0 <__malloc_unlock>
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	d90b      	bls.n	800bf0e <_free_r+0x4e>
 800bef6:	6821      	ldr	r1, [r4, #0]
 800bef8:	1862      	adds	r2, r4, r1
 800befa:	4293      	cmp	r3, r2
 800befc:	bf04      	itt	eq
 800befe:	681a      	ldreq	r2, [r3, #0]
 800bf00:	685b      	ldreq	r3, [r3, #4]
 800bf02:	6063      	str	r3, [r4, #4]
 800bf04:	bf04      	itt	eq
 800bf06:	1852      	addeq	r2, r2, r1
 800bf08:	6022      	streq	r2, [r4, #0]
 800bf0a:	602c      	str	r4, [r5, #0]
 800bf0c:	e7ec      	b.n	800bee8 <_free_r+0x28>
 800bf0e:	461a      	mov	r2, r3
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	b10b      	cbz	r3, 800bf18 <_free_r+0x58>
 800bf14:	42a3      	cmp	r3, r4
 800bf16:	d9fa      	bls.n	800bf0e <_free_r+0x4e>
 800bf18:	6811      	ldr	r1, [r2, #0]
 800bf1a:	1855      	adds	r5, r2, r1
 800bf1c:	42a5      	cmp	r5, r4
 800bf1e:	d10b      	bne.n	800bf38 <_free_r+0x78>
 800bf20:	6824      	ldr	r4, [r4, #0]
 800bf22:	4421      	add	r1, r4
 800bf24:	1854      	adds	r4, r2, r1
 800bf26:	42a3      	cmp	r3, r4
 800bf28:	6011      	str	r1, [r2, #0]
 800bf2a:	d1dd      	bne.n	800bee8 <_free_r+0x28>
 800bf2c:	681c      	ldr	r4, [r3, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	6053      	str	r3, [r2, #4]
 800bf32:	4421      	add	r1, r4
 800bf34:	6011      	str	r1, [r2, #0]
 800bf36:	e7d7      	b.n	800bee8 <_free_r+0x28>
 800bf38:	d902      	bls.n	800bf40 <_free_r+0x80>
 800bf3a:	230c      	movs	r3, #12
 800bf3c:	6003      	str	r3, [r0, #0]
 800bf3e:	e7d3      	b.n	800bee8 <_free_r+0x28>
 800bf40:	6825      	ldr	r5, [r4, #0]
 800bf42:	1961      	adds	r1, r4, r5
 800bf44:	428b      	cmp	r3, r1
 800bf46:	bf04      	itt	eq
 800bf48:	6819      	ldreq	r1, [r3, #0]
 800bf4a:	685b      	ldreq	r3, [r3, #4]
 800bf4c:	6063      	str	r3, [r4, #4]
 800bf4e:	bf04      	itt	eq
 800bf50:	1949      	addeq	r1, r1, r5
 800bf52:	6021      	streq	r1, [r4, #0]
 800bf54:	6054      	str	r4, [r2, #4]
 800bf56:	e7c7      	b.n	800bee8 <_free_r+0x28>
 800bf58:	b003      	add	sp, #12
 800bf5a:	bd30      	pop	{r4, r5, pc}
 800bf5c:	20001b60 	.word	0x20001b60

0800bf60 <_malloc_r>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	1ccd      	adds	r5, r1, #3
 800bf64:	f025 0503 	bic.w	r5, r5, #3
 800bf68:	3508      	adds	r5, #8
 800bf6a:	2d0c      	cmp	r5, #12
 800bf6c:	bf38      	it	cc
 800bf6e:	250c      	movcc	r5, #12
 800bf70:	2d00      	cmp	r5, #0
 800bf72:	4606      	mov	r6, r0
 800bf74:	db01      	blt.n	800bf7a <_malloc_r+0x1a>
 800bf76:	42a9      	cmp	r1, r5
 800bf78:	d903      	bls.n	800bf82 <_malloc_r+0x22>
 800bf7a:	230c      	movs	r3, #12
 800bf7c:	6033      	str	r3, [r6, #0]
 800bf7e:	2000      	movs	r0, #0
 800bf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf82:	f000 fa27 	bl	800c3d4 <__malloc_lock>
 800bf86:	4921      	ldr	r1, [pc, #132]	; (800c00c <_malloc_r+0xac>)
 800bf88:	680a      	ldr	r2, [r1, #0]
 800bf8a:	4614      	mov	r4, r2
 800bf8c:	b99c      	cbnz	r4, 800bfb6 <_malloc_r+0x56>
 800bf8e:	4f20      	ldr	r7, [pc, #128]	; (800c010 <_malloc_r+0xb0>)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	b923      	cbnz	r3, 800bf9e <_malloc_r+0x3e>
 800bf94:	4621      	mov	r1, r4
 800bf96:	4630      	mov	r0, r6
 800bf98:	f000 f9a2 	bl	800c2e0 <_sbrk_r>
 800bf9c:	6038      	str	r0, [r7, #0]
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f000 f99d 	bl	800c2e0 <_sbrk_r>
 800bfa6:	1c43      	adds	r3, r0, #1
 800bfa8:	d123      	bne.n	800bff2 <_malloc_r+0x92>
 800bfaa:	230c      	movs	r3, #12
 800bfac:	6033      	str	r3, [r6, #0]
 800bfae:	4630      	mov	r0, r6
 800bfb0:	f000 fa16 	bl	800c3e0 <__malloc_unlock>
 800bfb4:	e7e3      	b.n	800bf7e <_malloc_r+0x1e>
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	1b5b      	subs	r3, r3, r5
 800bfba:	d417      	bmi.n	800bfec <_malloc_r+0x8c>
 800bfbc:	2b0b      	cmp	r3, #11
 800bfbe:	d903      	bls.n	800bfc8 <_malloc_r+0x68>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	441c      	add	r4, r3
 800bfc4:	6025      	str	r5, [r4, #0]
 800bfc6:	e004      	b.n	800bfd2 <_malloc_r+0x72>
 800bfc8:	6863      	ldr	r3, [r4, #4]
 800bfca:	42a2      	cmp	r2, r4
 800bfcc:	bf0c      	ite	eq
 800bfce:	600b      	streq	r3, [r1, #0]
 800bfd0:	6053      	strne	r3, [r2, #4]
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	f000 fa04 	bl	800c3e0 <__malloc_unlock>
 800bfd8:	f104 000b 	add.w	r0, r4, #11
 800bfdc:	1d23      	adds	r3, r4, #4
 800bfde:	f020 0007 	bic.w	r0, r0, #7
 800bfe2:	1ac2      	subs	r2, r0, r3
 800bfe4:	d0cc      	beq.n	800bf80 <_malloc_r+0x20>
 800bfe6:	1a1b      	subs	r3, r3, r0
 800bfe8:	50a3      	str	r3, [r4, r2]
 800bfea:	e7c9      	b.n	800bf80 <_malloc_r+0x20>
 800bfec:	4622      	mov	r2, r4
 800bfee:	6864      	ldr	r4, [r4, #4]
 800bff0:	e7cc      	b.n	800bf8c <_malloc_r+0x2c>
 800bff2:	1cc4      	adds	r4, r0, #3
 800bff4:	f024 0403 	bic.w	r4, r4, #3
 800bff8:	42a0      	cmp	r0, r4
 800bffa:	d0e3      	beq.n	800bfc4 <_malloc_r+0x64>
 800bffc:	1a21      	subs	r1, r4, r0
 800bffe:	4630      	mov	r0, r6
 800c000:	f000 f96e 	bl	800c2e0 <_sbrk_r>
 800c004:	3001      	adds	r0, #1
 800c006:	d1dd      	bne.n	800bfc4 <_malloc_r+0x64>
 800c008:	e7cf      	b.n	800bfaa <_malloc_r+0x4a>
 800c00a:	bf00      	nop
 800c00c:	20001b60 	.word	0x20001b60
 800c010:	20001b64 	.word	0x20001b64

0800c014 <__ssputs_r>:
 800c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	688e      	ldr	r6, [r1, #8]
 800c01a:	429e      	cmp	r6, r3
 800c01c:	4682      	mov	sl, r0
 800c01e:	460c      	mov	r4, r1
 800c020:	4690      	mov	r8, r2
 800c022:	461f      	mov	r7, r3
 800c024:	d838      	bhi.n	800c098 <__ssputs_r+0x84>
 800c026:	898a      	ldrh	r2, [r1, #12]
 800c028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c02c:	d032      	beq.n	800c094 <__ssputs_r+0x80>
 800c02e:	6825      	ldr	r5, [r4, #0]
 800c030:	6909      	ldr	r1, [r1, #16]
 800c032:	eba5 0901 	sub.w	r9, r5, r1
 800c036:	6965      	ldr	r5, [r4, #20]
 800c038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c040:	3301      	adds	r3, #1
 800c042:	444b      	add	r3, r9
 800c044:	106d      	asrs	r5, r5, #1
 800c046:	429d      	cmp	r5, r3
 800c048:	bf38      	it	cc
 800c04a:	461d      	movcc	r5, r3
 800c04c:	0553      	lsls	r3, r2, #21
 800c04e:	d531      	bpl.n	800c0b4 <__ssputs_r+0xa0>
 800c050:	4629      	mov	r1, r5
 800c052:	f7ff ff85 	bl	800bf60 <_malloc_r>
 800c056:	4606      	mov	r6, r0
 800c058:	b950      	cbnz	r0, 800c070 <__ssputs_r+0x5c>
 800c05a:	230c      	movs	r3, #12
 800c05c:	f8ca 3000 	str.w	r3, [sl]
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c066:	81a3      	strh	r3, [r4, #12]
 800c068:	f04f 30ff 	mov.w	r0, #4294967295
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	6921      	ldr	r1, [r4, #16]
 800c072:	464a      	mov	r2, r9
 800c074:	f7fc fae8 	bl	8008648 <memcpy>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c082:	81a3      	strh	r3, [r4, #12]
 800c084:	6126      	str	r6, [r4, #16]
 800c086:	6165      	str	r5, [r4, #20]
 800c088:	444e      	add	r6, r9
 800c08a:	eba5 0509 	sub.w	r5, r5, r9
 800c08e:	6026      	str	r6, [r4, #0]
 800c090:	60a5      	str	r5, [r4, #8]
 800c092:	463e      	mov	r6, r7
 800c094:	42be      	cmp	r6, r7
 800c096:	d900      	bls.n	800c09a <__ssputs_r+0x86>
 800c098:	463e      	mov	r6, r7
 800c09a:	4632      	mov	r2, r6
 800c09c:	6820      	ldr	r0, [r4, #0]
 800c09e:	4641      	mov	r1, r8
 800c0a0:	f000 f97e 	bl	800c3a0 <memmove>
 800c0a4:	68a3      	ldr	r3, [r4, #8]
 800c0a6:	6822      	ldr	r2, [r4, #0]
 800c0a8:	1b9b      	subs	r3, r3, r6
 800c0aa:	4432      	add	r2, r6
 800c0ac:	60a3      	str	r3, [r4, #8]
 800c0ae:	6022      	str	r2, [r4, #0]
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e7db      	b.n	800c06c <__ssputs_r+0x58>
 800c0b4:	462a      	mov	r2, r5
 800c0b6:	f000 f999 	bl	800c3ec <_realloc_r>
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1e1      	bne.n	800c084 <__ssputs_r+0x70>
 800c0c0:	6921      	ldr	r1, [r4, #16]
 800c0c2:	4650      	mov	r0, sl
 800c0c4:	f7ff fefc 	bl	800bec0 <_free_r>
 800c0c8:	e7c7      	b.n	800c05a <__ssputs_r+0x46>
	...

0800c0cc <_svfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	898b      	ldrh	r3, [r1, #12]
 800c0d4:	061b      	lsls	r3, r3, #24
 800c0d6:	b09d      	sub	sp, #116	; 0x74
 800c0d8:	4607      	mov	r7, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	4614      	mov	r4, r2
 800c0de:	d50e      	bpl.n	800c0fe <_svfiprintf_r+0x32>
 800c0e0:	690b      	ldr	r3, [r1, #16]
 800c0e2:	b963      	cbnz	r3, 800c0fe <_svfiprintf_r+0x32>
 800c0e4:	2140      	movs	r1, #64	; 0x40
 800c0e6:	f7ff ff3b 	bl	800bf60 <_malloc_r>
 800c0ea:	6028      	str	r0, [r5, #0]
 800c0ec:	6128      	str	r0, [r5, #16]
 800c0ee:	b920      	cbnz	r0, 800c0fa <_svfiprintf_r+0x2e>
 800c0f0:	230c      	movs	r3, #12
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	e0d1      	b.n	800c29e <_svfiprintf_r+0x1d2>
 800c0fa:	2340      	movs	r3, #64	; 0x40
 800c0fc:	616b      	str	r3, [r5, #20]
 800c0fe:	2300      	movs	r3, #0
 800c100:	9309      	str	r3, [sp, #36]	; 0x24
 800c102:	2320      	movs	r3, #32
 800c104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c108:	f8cd 800c 	str.w	r8, [sp, #12]
 800c10c:	2330      	movs	r3, #48	; 0x30
 800c10e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2b8 <_svfiprintf_r+0x1ec>
 800c112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c116:	f04f 0901 	mov.w	r9, #1
 800c11a:	4623      	mov	r3, r4
 800c11c:	469a      	mov	sl, r3
 800c11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c122:	b10a      	cbz	r2, 800c128 <_svfiprintf_r+0x5c>
 800c124:	2a25      	cmp	r2, #37	; 0x25
 800c126:	d1f9      	bne.n	800c11c <_svfiprintf_r+0x50>
 800c128:	ebba 0b04 	subs.w	fp, sl, r4
 800c12c:	d00b      	beq.n	800c146 <_svfiprintf_r+0x7a>
 800c12e:	465b      	mov	r3, fp
 800c130:	4622      	mov	r2, r4
 800c132:	4629      	mov	r1, r5
 800c134:	4638      	mov	r0, r7
 800c136:	f7ff ff6d 	bl	800c014 <__ssputs_r>
 800c13a:	3001      	adds	r0, #1
 800c13c:	f000 80aa 	beq.w	800c294 <_svfiprintf_r+0x1c8>
 800c140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c142:	445a      	add	r2, fp
 800c144:	9209      	str	r2, [sp, #36]	; 0x24
 800c146:	f89a 3000 	ldrb.w	r3, [sl]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 80a2 	beq.w	800c294 <_svfiprintf_r+0x1c8>
 800c150:	2300      	movs	r3, #0
 800c152:	f04f 32ff 	mov.w	r2, #4294967295
 800c156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15a:	f10a 0a01 	add.w	sl, sl, #1
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c166:	931a      	str	r3, [sp, #104]	; 0x68
 800c168:	4654      	mov	r4, sl
 800c16a:	2205      	movs	r2, #5
 800c16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c170:	4851      	ldr	r0, [pc, #324]	; (800c2b8 <_svfiprintf_r+0x1ec>)
 800c172:	f7f4 f835 	bl	80001e0 <memchr>
 800c176:	9a04      	ldr	r2, [sp, #16]
 800c178:	b9d8      	cbnz	r0, 800c1b2 <_svfiprintf_r+0xe6>
 800c17a:	06d0      	lsls	r0, r2, #27
 800c17c:	bf44      	itt	mi
 800c17e:	2320      	movmi	r3, #32
 800c180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c184:	0711      	lsls	r1, r2, #28
 800c186:	bf44      	itt	mi
 800c188:	232b      	movmi	r3, #43	; 0x2b
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18e:	f89a 3000 	ldrb.w	r3, [sl]
 800c192:	2b2a      	cmp	r3, #42	; 0x2a
 800c194:	d015      	beq.n	800c1c2 <_svfiprintf_r+0xf6>
 800c196:	9a07      	ldr	r2, [sp, #28]
 800c198:	4654      	mov	r4, sl
 800c19a:	2000      	movs	r0, #0
 800c19c:	f04f 0c0a 	mov.w	ip, #10
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a6:	3b30      	subs	r3, #48	; 0x30
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	d94e      	bls.n	800c24a <_svfiprintf_r+0x17e>
 800c1ac:	b1b0      	cbz	r0, 800c1dc <_svfiprintf_r+0x110>
 800c1ae:	9207      	str	r2, [sp, #28]
 800c1b0:	e014      	b.n	800c1dc <_svfiprintf_r+0x110>
 800c1b2:	eba0 0308 	sub.w	r3, r0, r8
 800c1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	9304      	str	r3, [sp, #16]
 800c1be:	46a2      	mov	sl, r4
 800c1c0:	e7d2      	b.n	800c168 <_svfiprintf_r+0x9c>
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	9103      	str	r1, [sp, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfbb      	ittet	lt
 800c1ce:	425b      	neglt	r3, r3
 800c1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d4:	9307      	strge	r3, [sp, #28]
 800c1d6:	9307      	strlt	r3, [sp, #28]
 800c1d8:	bfb8      	it	lt
 800c1da:	9204      	strlt	r2, [sp, #16]
 800c1dc:	7823      	ldrb	r3, [r4, #0]
 800c1de:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e0:	d10c      	bne.n	800c1fc <_svfiprintf_r+0x130>
 800c1e2:	7863      	ldrb	r3, [r4, #1]
 800c1e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e6:	d135      	bne.n	800c254 <_svfiprintf_r+0x188>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	9203      	str	r2, [sp, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bfb8      	it	lt
 800c1f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1f8:	3402      	adds	r4, #2
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2c8 <_svfiprintf_r+0x1fc>
 800c200:	7821      	ldrb	r1, [r4, #0]
 800c202:	2203      	movs	r2, #3
 800c204:	4650      	mov	r0, sl
 800c206:	f7f3 ffeb 	bl	80001e0 <memchr>
 800c20a:	b140      	cbz	r0, 800c21e <_svfiprintf_r+0x152>
 800c20c:	2340      	movs	r3, #64	; 0x40
 800c20e:	eba0 000a 	sub.w	r0, r0, sl
 800c212:	fa03 f000 	lsl.w	r0, r3, r0
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	4303      	orrs	r3, r0
 800c21a:	3401      	adds	r4, #1
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c222:	4826      	ldr	r0, [pc, #152]	; (800c2bc <_svfiprintf_r+0x1f0>)
 800c224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c228:	2206      	movs	r2, #6
 800c22a:	f7f3 ffd9 	bl	80001e0 <memchr>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d038      	beq.n	800c2a4 <_svfiprintf_r+0x1d8>
 800c232:	4b23      	ldr	r3, [pc, #140]	; (800c2c0 <_svfiprintf_r+0x1f4>)
 800c234:	bb1b      	cbnz	r3, 800c27e <_svfiprintf_r+0x1b2>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	3307      	adds	r3, #7
 800c23a:	f023 0307 	bic.w	r3, r3, #7
 800c23e:	3308      	adds	r3, #8
 800c240:	9303      	str	r3, [sp, #12]
 800c242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c244:	4433      	add	r3, r6
 800c246:	9309      	str	r3, [sp, #36]	; 0x24
 800c248:	e767      	b.n	800c11a <_svfiprintf_r+0x4e>
 800c24a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c24e:	460c      	mov	r4, r1
 800c250:	2001      	movs	r0, #1
 800c252:	e7a5      	b.n	800c1a0 <_svfiprintf_r+0xd4>
 800c254:	2300      	movs	r3, #0
 800c256:	3401      	adds	r4, #1
 800c258:	9305      	str	r3, [sp, #20]
 800c25a:	4619      	mov	r1, r3
 800c25c:	f04f 0c0a 	mov.w	ip, #10
 800c260:	4620      	mov	r0, r4
 800c262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c266:	3a30      	subs	r2, #48	; 0x30
 800c268:	2a09      	cmp	r2, #9
 800c26a:	d903      	bls.n	800c274 <_svfiprintf_r+0x1a8>
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d0c5      	beq.n	800c1fc <_svfiprintf_r+0x130>
 800c270:	9105      	str	r1, [sp, #20]
 800c272:	e7c3      	b.n	800c1fc <_svfiprintf_r+0x130>
 800c274:	fb0c 2101 	mla	r1, ip, r1, r2
 800c278:	4604      	mov	r4, r0
 800c27a:	2301      	movs	r3, #1
 800c27c:	e7f0      	b.n	800c260 <_svfiprintf_r+0x194>
 800c27e:	ab03      	add	r3, sp, #12
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	462a      	mov	r2, r5
 800c284:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <_svfiprintf_r+0x1f8>)
 800c286:	a904      	add	r1, sp, #16
 800c288:	4638      	mov	r0, r7
 800c28a:	f7fc fa93 	bl	80087b4 <_printf_float>
 800c28e:	1c42      	adds	r2, r0, #1
 800c290:	4606      	mov	r6, r0
 800c292:	d1d6      	bne.n	800c242 <_svfiprintf_r+0x176>
 800c294:	89ab      	ldrh	r3, [r5, #12]
 800c296:	065b      	lsls	r3, r3, #25
 800c298:	f53f af2c 	bmi.w	800c0f4 <_svfiprintf_r+0x28>
 800c29c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c29e:	b01d      	add	sp, #116	; 0x74
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	ab03      	add	r3, sp, #12
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <_svfiprintf_r+0x1f8>)
 800c2ac:	a904      	add	r1, sp, #16
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f7fc fd24 	bl	8008cfc <_printf_i>
 800c2b4:	e7eb      	b.n	800c28e <_svfiprintf_r+0x1c2>
 800c2b6:	bf00      	nop
 800c2b8:	0800d454 	.word	0x0800d454
 800c2bc:	0800d45e 	.word	0x0800d45e
 800c2c0:	080087b5 	.word	0x080087b5
 800c2c4:	0800c015 	.word	0x0800c015
 800c2c8:	0800d45a 	.word	0x0800d45a
 800c2cc:	00000000 	.word	0x00000000

0800c2d0 <nan>:
 800c2d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2d8 <nan+0x8>
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	00000000 	.word	0x00000000
 800c2dc:	7ff80000 	.word	0x7ff80000

0800c2e0 <_sbrk_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4d06      	ldr	r5, [pc, #24]	; (800c2fc <_sbrk_r+0x1c>)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	602b      	str	r3, [r5, #0]
 800c2ec:	f000 fddc 	bl	800cea8 <_sbrk>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d102      	bne.n	800c2fa <_sbrk_r+0x1a>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	b103      	cbz	r3, 800c2fa <_sbrk_r+0x1a>
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
 800c2fc:	20001cb4 	.word	0x20001cb4

0800c300 <strncmp>:
 800c300:	b510      	push	{r4, lr}
 800c302:	b16a      	cbz	r2, 800c320 <strncmp+0x20>
 800c304:	3901      	subs	r1, #1
 800c306:	1884      	adds	r4, r0, r2
 800c308:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c30c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c310:	4293      	cmp	r3, r2
 800c312:	d103      	bne.n	800c31c <strncmp+0x1c>
 800c314:	42a0      	cmp	r0, r4
 800c316:	d001      	beq.n	800c31c <strncmp+0x1c>
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1f5      	bne.n	800c308 <strncmp+0x8>
 800c31c:	1a98      	subs	r0, r3, r2
 800c31e:	bd10      	pop	{r4, pc}
 800c320:	4610      	mov	r0, r2
 800c322:	e7fc      	b.n	800c31e <strncmp+0x1e>

0800c324 <__ascii_wctomb>:
 800c324:	b149      	cbz	r1, 800c33a <__ascii_wctomb+0x16>
 800c326:	2aff      	cmp	r2, #255	; 0xff
 800c328:	bf85      	ittet	hi
 800c32a:	238a      	movhi	r3, #138	; 0x8a
 800c32c:	6003      	strhi	r3, [r0, #0]
 800c32e:	700a      	strbls	r2, [r1, #0]
 800c330:	f04f 30ff 	movhi.w	r0, #4294967295
 800c334:	bf98      	it	ls
 800c336:	2001      	movls	r0, #1
 800c338:	4770      	bx	lr
 800c33a:	4608      	mov	r0, r1
 800c33c:	4770      	bx	lr
	...

0800c340 <__assert_func>:
 800c340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c342:	4614      	mov	r4, r2
 800c344:	461a      	mov	r2, r3
 800c346:	4b09      	ldr	r3, [pc, #36]	; (800c36c <__assert_func+0x2c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4605      	mov	r5, r0
 800c34c:	68d8      	ldr	r0, [r3, #12]
 800c34e:	b14c      	cbz	r4, 800c364 <__assert_func+0x24>
 800c350:	4b07      	ldr	r3, [pc, #28]	; (800c370 <__assert_func+0x30>)
 800c352:	9100      	str	r1, [sp, #0]
 800c354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c358:	4906      	ldr	r1, [pc, #24]	; (800c374 <__assert_func+0x34>)
 800c35a:	462b      	mov	r3, r5
 800c35c:	f000 f80e 	bl	800c37c <fiprintf>
 800c360:	f000 fa84 	bl	800c86c <abort>
 800c364:	4b04      	ldr	r3, [pc, #16]	; (800c378 <__assert_func+0x38>)
 800c366:	461c      	mov	r4, r3
 800c368:	e7f3      	b.n	800c352 <__assert_func+0x12>
 800c36a:	bf00      	nop
 800c36c:	2000001c 	.word	0x2000001c
 800c370:	0800d465 	.word	0x0800d465
 800c374:	0800d472 	.word	0x0800d472
 800c378:	0800d4a0 	.word	0x0800d4a0

0800c37c <fiprintf>:
 800c37c:	b40e      	push	{r1, r2, r3}
 800c37e:	b503      	push	{r0, r1, lr}
 800c380:	4601      	mov	r1, r0
 800c382:	ab03      	add	r3, sp, #12
 800c384:	4805      	ldr	r0, [pc, #20]	; (800c39c <fiprintf+0x20>)
 800c386:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38a:	6800      	ldr	r0, [r0, #0]
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	f000 f87d 	bl	800c48c <_vfiprintf_r>
 800c392:	b002      	add	sp, #8
 800c394:	f85d eb04 	ldr.w	lr, [sp], #4
 800c398:	b003      	add	sp, #12
 800c39a:	4770      	bx	lr
 800c39c:	2000001c 	.word	0x2000001c

0800c3a0 <memmove>:
 800c3a0:	4288      	cmp	r0, r1
 800c3a2:	b510      	push	{r4, lr}
 800c3a4:	eb01 0402 	add.w	r4, r1, r2
 800c3a8:	d902      	bls.n	800c3b0 <memmove+0x10>
 800c3aa:	4284      	cmp	r4, r0
 800c3ac:	4623      	mov	r3, r4
 800c3ae:	d807      	bhi.n	800c3c0 <memmove+0x20>
 800c3b0:	1e43      	subs	r3, r0, #1
 800c3b2:	42a1      	cmp	r1, r4
 800c3b4:	d008      	beq.n	800c3c8 <memmove+0x28>
 800c3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3be:	e7f8      	b.n	800c3b2 <memmove+0x12>
 800c3c0:	4402      	add	r2, r0
 800c3c2:	4601      	mov	r1, r0
 800c3c4:	428a      	cmp	r2, r1
 800c3c6:	d100      	bne.n	800c3ca <memmove+0x2a>
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3d2:	e7f7      	b.n	800c3c4 <memmove+0x24>

0800c3d4 <__malloc_lock>:
 800c3d4:	4801      	ldr	r0, [pc, #4]	; (800c3dc <__malloc_lock+0x8>)
 800c3d6:	f000 bc09 	b.w	800cbec <__retarget_lock_acquire_recursive>
 800c3da:	bf00      	nop
 800c3dc:	20001cbc 	.word	0x20001cbc

0800c3e0 <__malloc_unlock>:
 800c3e0:	4801      	ldr	r0, [pc, #4]	; (800c3e8 <__malloc_unlock+0x8>)
 800c3e2:	f000 bc04 	b.w	800cbee <__retarget_lock_release_recursive>
 800c3e6:	bf00      	nop
 800c3e8:	20001cbc 	.word	0x20001cbc

0800c3ec <_realloc_r>:
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	460e      	mov	r6, r1
 800c3f4:	b921      	cbnz	r1, 800c400 <_realloc_r+0x14>
 800c3f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	f7ff bdb0 	b.w	800bf60 <_malloc_r>
 800c400:	b922      	cbnz	r2, 800c40c <_realloc_r+0x20>
 800c402:	f7ff fd5d 	bl	800bec0 <_free_r>
 800c406:	4625      	mov	r5, r4
 800c408:	4628      	mov	r0, r5
 800c40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c40c:	f000 fc54 	bl	800ccb8 <_malloc_usable_size_r>
 800c410:	42a0      	cmp	r0, r4
 800c412:	d20f      	bcs.n	800c434 <_realloc_r+0x48>
 800c414:	4621      	mov	r1, r4
 800c416:	4638      	mov	r0, r7
 800c418:	f7ff fda2 	bl	800bf60 <_malloc_r>
 800c41c:	4605      	mov	r5, r0
 800c41e:	2800      	cmp	r0, #0
 800c420:	d0f2      	beq.n	800c408 <_realloc_r+0x1c>
 800c422:	4631      	mov	r1, r6
 800c424:	4622      	mov	r2, r4
 800c426:	f7fc f90f 	bl	8008648 <memcpy>
 800c42a:	4631      	mov	r1, r6
 800c42c:	4638      	mov	r0, r7
 800c42e:	f7ff fd47 	bl	800bec0 <_free_r>
 800c432:	e7e9      	b.n	800c408 <_realloc_r+0x1c>
 800c434:	4635      	mov	r5, r6
 800c436:	e7e7      	b.n	800c408 <_realloc_r+0x1c>

0800c438 <__sfputc_r>:
 800c438:	6893      	ldr	r3, [r2, #8]
 800c43a:	3b01      	subs	r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	b410      	push	{r4}
 800c440:	6093      	str	r3, [r2, #8]
 800c442:	da08      	bge.n	800c456 <__sfputc_r+0x1e>
 800c444:	6994      	ldr	r4, [r2, #24]
 800c446:	42a3      	cmp	r3, r4
 800c448:	db01      	blt.n	800c44e <__sfputc_r+0x16>
 800c44a:	290a      	cmp	r1, #10
 800c44c:	d103      	bne.n	800c456 <__sfputc_r+0x1e>
 800c44e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c452:	f000 b94b 	b.w	800c6ec <__swbuf_r>
 800c456:	6813      	ldr	r3, [r2, #0]
 800c458:	1c58      	adds	r0, r3, #1
 800c45a:	6010      	str	r0, [r2, #0]
 800c45c:	7019      	strb	r1, [r3, #0]
 800c45e:	4608      	mov	r0, r1
 800c460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <__sfputs_r>:
 800c466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c468:	4606      	mov	r6, r0
 800c46a:	460f      	mov	r7, r1
 800c46c:	4614      	mov	r4, r2
 800c46e:	18d5      	adds	r5, r2, r3
 800c470:	42ac      	cmp	r4, r5
 800c472:	d101      	bne.n	800c478 <__sfputs_r+0x12>
 800c474:	2000      	movs	r0, #0
 800c476:	e007      	b.n	800c488 <__sfputs_r+0x22>
 800c478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47c:	463a      	mov	r2, r7
 800c47e:	4630      	mov	r0, r6
 800c480:	f7ff ffda 	bl	800c438 <__sfputc_r>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	d1f3      	bne.n	800c470 <__sfputs_r+0xa>
 800c488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c48c <_vfiprintf_r>:
 800c48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c490:	460d      	mov	r5, r1
 800c492:	b09d      	sub	sp, #116	; 0x74
 800c494:	4614      	mov	r4, r2
 800c496:	4698      	mov	r8, r3
 800c498:	4606      	mov	r6, r0
 800c49a:	b118      	cbz	r0, 800c4a4 <_vfiprintf_r+0x18>
 800c49c:	6983      	ldr	r3, [r0, #24]
 800c49e:	b90b      	cbnz	r3, 800c4a4 <_vfiprintf_r+0x18>
 800c4a0:	f000 fb06 	bl	800cab0 <__sinit>
 800c4a4:	4b89      	ldr	r3, [pc, #548]	; (800c6cc <_vfiprintf_r+0x240>)
 800c4a6:	429d      	cmp	r5, r3
 800c4a8:	d11b      	bne.n	800c4e2 <_vfiprintf_r+0x56>
 800c4aa:	6875      	ldr	r5, [r6, #4]
 800c4ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4ae:	07d9      	lsls	r1, r3, #31
 800c4b0:	d405      	bmi.n	800c4be <_vfiprintf_r+0x32>
 800c4b2:	89ab      	ldrh	r3, [r5, #12]
 800c4b4:	059a      	lsls	r2, r3, #22
 800c4b6:	d402      	bmi.n	800c4be <_vfiprintf_r+0x32>
 800c4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ba:	f000 fb97 	bl	800cbec <__retarget_lock_acquire_recursive>
 800c4be:	89ab      	ldrh	r3, [r5, #12]
 800c4c0:	071b      	lsls	r3, r3, #28
 800c4c2:	d501      	bpl.n	800c4c8 <_vfiprintf_r+0x3c>
 800c4c4:	692b      	ldr	r3, [r5, #16]
 800c4c6:	b9eb      	cbnz	r3, 800c504 <_vfiprintf_r+0x78>
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f000 f960 	bl	800c790 <__swsetup_r>
 800c4d0:	b1c0      	cbz	r0, 800c504 <_vfiprintf_r+0x78>
 800c4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4d4:	07dc      	lsls	r4, r3, #31
 800c4d6:	d50e      	bpl.n	800c4f6 <_vfiprintf_r+0x6a>
 800c4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4dc:	b01d      	add	sp, #116	; 0x74
 800c4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e2:	4b7b      	ldr	r3, [pc, #492]	; (800c6d0 <_vfiprintf_r+0x244>)
 800c4e4:	429d      	cmp	r5, r3
 800c4e6:	d101      	bne.n	800c4ec <_vfiprintf_r+0x60>
 800c4e8:	68b5      	ldr	r5, [r6, #8]
 800c4ea:	e7df      	b.n	800c4ac <_vfiprintf_r+0x20>
 800c4ec:	4b79      	ldr	r3, [pc, #484]	; (800c6d4 <_vfiprintf_r+0x248>)
 800c4ee:	429d      	cmp	r5, r3
 800c4f0:	bf08      	it	eq
 800c4f2:	68f5      	ldreq	r5, [r6, #12]
 800c4f4:	e7da      	b.n	800c4ac <_vfiprintf_r+0x20>
 800c4f6:	89ab      	ldrh	r3, [r5, #12]
 800c4f8:	0598      	lsls	r0, r3, #22
 800c4fa:	d4ed      	bmi.n	800c4d8 <_vfiprintf_r+0x4c>
 800c4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4fe:	f000 fb76 	bl	800cbee <__retarget_lock_release_recursive>
 800c502:	e7e9      	b.n	800c4d8 <_vfiprintf_r+0x4c>
 800c504:	2300      	movs	r3, #0
 800c506:	9309      	str	r3, [sp, #36]	; 0x24
 800c508:	2320      	movs	r3, #32
 800c50a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c50e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c512:	2330      	movs	r3, #48	; 0x30
 800c514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6d8 <_vfiprintf_r+0x24c>
 800c518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c51c:	f04f 0901 	mov.w	r9, #1
 800c520:	4623      	mov	r3, r4
 800c522:	469a      	mov	sl, r3
 800c524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c528:	b10a      	cbz	r2, 800c52e <_vfiprintf_r+0xa2>
 800c52a:	2a25      	cmp	r2, #37	; 0x25
 800c52c:	d1f9      	bne.n	800c522 <_vfiprintf_r+0x96>
 800c52e:	ebba 0b04 	subs.w	fp, sl, r4
 800c532:	d00b      	beq.n	800c54c <_vfiprintf_r+0xc0>
 800c534:	465b      	mov	r3, fp
 800c536:	4622      	mov	r2, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	4630      	mov	r0, r6
 800c53c:	f7ff ff93 	bl	800c466 <__sfputs_r>
 800c540:	3001      	adds	r0, #1
 800c542:	f000 80aa 	beq.w	800c69a <_vfiprintf_r+0x20e>
 800c546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c548:	445a      	add	r2, fp
 800c54a:	9209      	str	r2, [sp, #36]	; 0x24
 800c54c:	f89a 3000 	ldrb.w	r3, [sl]
 800c550:	2b00      	cmp	r3, #0
 800c552:	f000 80a2 	beq.w	800c69a <_vfiprintf_r+0x20e>
 800c556:	2300      	movs	r3, #0
 800c558:	f04f 32ff 	mov.w	r2, #4294967295
 800c55c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c560:	f10a 0a01 	add.w	sl, sl, #1
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	9307      	str	r3, [sp, #28]
 800c568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c56c:	931a      	str	r3, [sp, #104]	; 0x68
 800c56e:	4654      	mov	r4, sl
 800c570:	2205      	movs	r2, #5
 800c572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c576:	4858      	ldr	r0, [pc, #352]	; (800c6d8 <_vfiprintf_r+0x24c>)
 800c578:	f7f3 fe32 	bl	80001e0 <memchr>
 800c57c:	9a04      	ldr	r2, [sp, #16]
 800c57e:	b9d8      	cbnz	r0, 800c5b8 <_vfiprintf_r+0x12c>
 800c580:	06d1      	lsls	r1, r2, #27
 800c582:	bf44      	itt	mi
 800c584:	2320      	movmi	r3, #32
 800c586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c58a:	0713      	lsls	r3, r2, #28
 800c58c:	bf44      	itt	mi
 800c58e:	232b      	movmi	r3, #43	; 0x2b
 800c590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c594:	f89a 3000 	ldrb.w	r3, [sl]
 800c598:	2b2a      	cmp	r3, #42	; 0x2a
 800c59a:	d015      	beq.n	800c5c8 <_vfiprintf_r+0x13c>
 800c59c:	9a07      	ldr	r2, [sp, #28]
 800c59e:	4654      	mov	r4, sl
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	f04f 0c0a 	mov.w	ip, #10
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ac:	3b30      	subs	r3, #48	; 0x30
 800c5ae:	2b09      	cmp	r3, #9
 800c5b0:	d94e      	bls.n	800c650 <_vfiprintf_r+0x1c4>
 800c5b2:	b1b0      	cbz	r0, 800c5e2 <_vfiprintf_r+0x156>
 800c5b4:	9207      	str	r2, [sp, #28]
 800c5b6:	e014      	b.n	800c5e2 <_vfiprintf_r+0x156>
 800c5b8:	eba0 0308 	sub.w	r3, r0, r8
 800c5bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	9304      	str	r3, [sp, #16]
 800c5c4:	46a2      	mov	sl, r4
 800c5c6:	e7d2      	b.n	800c56e <_vfiprintf_r+0xe2>
 800c5c8:	9b03      	ldr	r3, [sp, #12]
 800c5ca:	1d19      	adds	r1, r3, #4
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	9103      	str	r1, [sp, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	bfbb      	ittet	lt
 800c5d4:	425b      	neglt	r3, r3
 800c5d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c5da:	9307      	strge	r3, [sp, #28]
 800c5dc:	9307      	strlt	r3, [sp, #28]
 800c5de:	bfb8      	it	lt
 800c5e0:	9204      	strlt	r2, [sp, #16]
 800c5e2:	7823      	ldrb	r3, [r4, #0]
 800c5e4:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e6:	d10c      	bne.n	800c602 <_vfiprintf_r+0x176>
 800c5e8:	7863      	ldrb	r3, [r4, #1]
 800c5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ec:	d135      	bne.n	800c65a <_vfiprintf_r+0x1ce>
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	1d1a      	adds	r2, r3, #4
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	9203      	str	r2, [sp, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	bfb8      	it	lt
 800c5fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5fe:	3402      	adds	r4, #2
 800c600:	9305      	str	r3, [sp, #20]
 800c602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6e8 <_vfiprintf_r+0x25c>
 800c606:	7821      	ldrb	r1, [r4, #0]
 800c608:	2203      	movs	r2, #3
 800c60a:	4650      	mov	r0, sl
 800c60c:	f7f3 fde8 	bl	80001e0 <memchr>
 800c610:	b140      	cbz	r0, 800c624 <_vfiprintf_r+0x198>
 800c612:	2340      	movs	r3, #64	; 0x40
 800c614:	eba0 000a 	sub.w	r0, r0, sl
 800c618:	fa03 f000 	lsl.w	r0, r3, r0
 800c61c:	9b04      	ldr	r3, [sp, #16]
 800c61e:	4303      	orrs	r3, r0
 800c620:	3401      	adds	r4, #1
 800c622:	9304      	str	r3, [sp, #16]
 800c624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c628:	482c      	ldr	r0, [pc, #176]	; (800c6dc <_vfiprintf_r+0x250>)
 800c62a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c62e:	2206      	movs	r2, #6
 800c630:	f7f3 fdd6 	bl	80001e0 <memchr>
 800c634:	2800      	cmp	r0, #0
 800c636:	d03f      	beq.n	800c6b8 <_vfiprintf_r+0x22c>
 800c638:	4b29      	ldr	r3, [pc, #164]	; (800c6e0 <_vfiprintf_r+0x254>)
 800c63a:	bb1b      	cbnz	r3, 800c684 <_vfiprintf_r+0x1f8>
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	3307      	adds	r3, #7
 800c640:	f023 0307 	bic.w	r3, r3, #7
 800c644:	3308      	adds	r3, #8
 800c646:	9303      	str	r3, [sp, #12]
 800c648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c64a:	443b      	add	r3, r7
 800c64c:	9309      	str	r3, [sp, #36]	; 0x24
 800c64e:	e767      	b.n	800c520 <_vfiprintf_r+0x94>
 800c650:	fb0c 3202 	mla	r2, ip, r2, r3
 800c654:	460c      	mov	r4, r1
 800c656:	2001      	movs	r0, #1
 800c658:	e7a5      	b.n	800c5a6 <_vfiprintf_r+0x11a>
 800c65a:	2300      	movs	r3, #0
 800c65c:	3401      	adds	r4, #1
 800c65e:	9305      	str	r3, [sp, #20]
 800c660:	4619      	mov	r1, r3
 800c662:	f04f 0c0a 	mov.w	ip, #10
 800c666:	4620      	mov	r0, r4
 800c668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c66c:	3a30      	subs	r2, #48	; 0x30
 800c66e:	2a09      	cmp	r2, #9
 800c670:	d903      	bls.n	800c67a <_vfiprintf_r+0x1ee>
 800c672:	2b00      	cmp	r3, #0
 800c674:	d0c5      	beq.n	800c602 <_vfiprintf_r+0x176>
 800c676:	9105      	str	r1, [sp, #20]
 800c678:	e7c3      	b.n	800c602 <_vfiprintf_r+0x176>
 800c67a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c67e:	4604      	mov	r4, r0
 800c680:	2301      	movs	r3, #1
 800c682:	e7f0      	b.n	800c666 <_vfiprintf_r+0x1da>
 800c684:	ab03      	add	r3, sp, #12
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	462a      	mov	r2, r5
 800c68a:	4b16      	ldr	r3, [pc, #88]	; (800c6e4 <_vfiprintf_r+0x258>)
 800c68c:	a904      	add	r1, sp, #16
 800c68e:	4630      	mov	r0, r6
 800c690:	f7fc f890 	bl	80087b4 <_printf_float>
 800c694:	4607      	mov	r7, r0
 800c696:	1c78      	adds	r0, r7, #1
 800c698:	d1d6      	bne.n	800c648 <_vfiprintf_r+0x1bc>
 800c69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c69c:	07d9      	lsls	r1, r3, #31
 800c69e:	d405      	bmi.n	800c6ac <_vfiprintf_r+0x220>
 800c6a0:	89ab      	ldrh	r3, [r5, #12]
 800c6a2:	059a      	lsls	r2, r3, #22
 800c6a4:	d402      	bmi.n	800c6ac <_vfiprintf_r+0x220>
 800c6a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6a8:	f000 faa1 	bl	800cbee <__retarget_lock_release_recursive>
 800c6ac:	89ab      	ldrh	r3, [r5, #12]
 800c6ae:	065b      	lsls	r3, r3, #25
 800c6b0:	f53f af12 	bmi.w	800c4d8 <_vfiprintf_r+0x4c>
 800c6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6b6:	e711      	b.n	800c4dc <_vfiprintf_r+0x50>
 800c6b8:	ab03      	add	r3, sp, #12
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	462a      	mov	r2, r5
 800c6be:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <_vfiprintf_r+0x258>)
 800c6c0:	a904      	add	r1, sp, #16
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f7fc fb1a 	bl	8008cfc <_printf_i>
 800c6c8:	e7e4      	b.n	800c694 <_vfiprintf_r+0x208>
 800c6ca:	bf00      	nop
 800c6cc:	0800d4c4 	.word	0x0800d4c4
 800c6d0:	0800d4e4 	.word	0x0800d4e4
 800c6d4:	0800d4a4 	.word	0x0800d4a4
 800c6d8:	0800d454 	.word	0x0800d454
 800c6dc:	0800d45e 	.word	0x0800d45e
 800c6e0:	080087b5 	.word	0x080087b5
 800c6e4:	0800c467 	.word	0x0800c467
 800c6e8:	0800d45a 	.word	0x0800d45a

0800c6ec <__swbuf_r>:
 800c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ee:	460e      	mov	r6, r1
 800c6f0:	4614      	mov	r4, r2
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	b118      	cbz	r0, 800c6fe <__swbuf_r+0x12>
 800c6f6:	6983      	ldr	r3, [r0, #24]
 800c6f8:	b90b      	cbnz	r3, 800c6fe <__swbuf_r+0x12>
 800c6fa:	f000 f9d9 	bl	800cab0 <__sinit>
 800c6fe:	4b21      	ldr	r3, [pc, #132]	; (800c784 <__swbuf_r+0x98>)
 800c700:	429c      	cmp	r4, r3
 800c702:	d12b      	bne.n	800c75c <__swbuf_r+0x70>
 800c704:	686c      	ldr	r4, [r5, #4]
 800c706:	69a3      	ldr	r3, [r4, #24]
 800c708:	60a3      	str	r3, [r4, #8]
 800c70a:	89a3      	ldrh	r3, [r4, #12]
 800c70c:	071a      	lsls	r2, r3, #28
 800c70e:	d52f      	bpl.n	800c770 <__swbuf_r+0x84>
 800c710:	6923      	ldr	r3, [r4, #16]
 800c712:	b36b      	cbz	r3, 800c770 <__swbuf_r+0x84>
 800c714:	6923      	ldr	r3, [r4, #16]
 800c716:	6820      	ldr	r0, [r4, #0]
 800c718:	1ac0      	subs	r0, r0, r3
 800c71a:	6963      	ldr	r3, [r4, #20]
 800c71c:	b2f6      	uxtb	r6, r6
 800c71e:	4283      	cmp	r3, r0
 800c720:	4637      	mov	r7, r6
 800c722:	dc04      	bgt.n	800c72e <__swbuf_r+0x42>
 800c724:	4621      	mov	r1, r4
 800c726:	4628      	mov	r0, r5
 800c728:	f000 f92e 	bl	800c988 <_fflush_r>
 800c72c:	bb30      	cbnz	r0, 800c77c <__swbuf_r+0x90>
 800c72e:	68a3      	ldr	r3, [r4, #8]
 800c730:	3b01      	subs	r3, #1
 800c732:	60a3      	str	r3, [r4, #8]
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	6022      	str	r2, [r4, #0]
 800c73a:	701e      	strb	r6, [r3, #0]
 800c73c:	6963      	ldr	r3, [r4, #20]
 800c73e:	3001      	adds	r0, #1
 800c740:	4283      	cmp	r3, r0
 800c742:	d004      	beq.n	800c74e <__swbuf_r+0x62>
 800c744:	89a3      	ldrh	r3, [r4, #12]
 800c746:	07db      	lsls	r3, r3, #31
 800c748:	d506      	bpl.n	800c758 <__swbuf_r+0x6c>
 800c74a:	2e0a      	cmp	r6, #10
 800c74c:	d104      	bne.n	800c758 <__swbuf_r+0x6c>
 800c74e:	4621      	mov	r1, r4
 800c750:	4628      	mov	r0, r5
 800c752:	f000 f919 	bl	800c988 <_fflush_r>
 800c756:	b988      	cbnz	r0, 800c77c <__swbuf_r+0x90>
 800c758:	4638      	mov	r0, r7
 800c75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c75c:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <__swbuf_r+0x9c>)
 800c75e:	429c      	cmp	r4, r3
 800c760:	d101      	bne.n	800c766 <__swbuf_r+0x7a>
 800c762:	68ac      	ldr	r4, [r5, #8]
 800c764:	e7cf      	b.n	800c706 <__swbuf_r+0x1a>
 800c766:	4b09      	ldr	r3, [pc, #36]	; (800c78c <__swbuf_r+0xa0>)
 800c768:	429c      	cmp	r4, r3
 800c76a:	bf08      	it	eq
 800c76c:	68ec      	ldreq	r4, [r5, #12]
 800c76e:	e7ca      	b.n	800c706 <__swbuf_r+0x1a>
 800c770:	4621      	mov	r1, r4
 800c772:	4628      	mov	r0, r5
 800c774:	f000 f80c 	bl	800c790 <__swsetup_r>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d0cb      	beq.n	800c714 <__swbuf_r+0x28>
 800c77c:	f04f 37ff 	mov.w	r7, #4294967295
 800c780:	e7ea      	b.n	800c758 <__swbuf_r+0x6c>
 800c782:	bf00      	nop
 800c784:	0800d4c4 	.word	0x0800d4c4
 800c788:	0800d4e4 	.word	0x0800d4e4
 800c78c:	0800d4a4 	.word	0x0800d4a4

0800c790 <__swsetup_r>:
 800c790:	4b32      	ldr	r3, [pc, #200]	; (800c85c <__swsetup_r+0xcc>)
 800c792:	b570      	push	{r4, r5, r6, lr}
 800c794:	681d      	ldr	r5, [r3, #0]
 800c796:	4606      	mov	r6, r0
 800c798:	460c      	mov	r4, r1
 800c79a:	b125      	cbz	r5, 800c7a6 <__swsetup_r+0x16>
 800c79c:	69ab      	ldr	r3, [r5, #24]
 800c79e:	b913      	cbnz	r3, 800c7a6 <__swsetup_r+0x16>
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	f000 f985 	bl	800cab0 <__sinit>
 800c7a6:	4b2e      	ldr	r3, [pc, #184]	; (800c860 <__swsetup_r+0xd0>)
 800c7a8:	429c      	cmp	r4, r3
 800c7aa:	d10f      	bne.n	800c7cc <__swsetup_r+0x3c>
 800c7ac:	686c      	ldr	r4, [r5, #4]
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7b4:	0719      	lsls	r1, r3, #28
 800c7b6:	d42c      	bmi.n	800c812 <__swsetup_r+0x82>
 800c7b8:	06dd      	lsls	r5, r3, #27
 800c7ba:	d411      	bmi.n	800c7e0 <__swsetup_r+0x50>
 800c7bc:	2309      	movs	r3, #9
 800c7be:	6033      	str	r3, [r6, #0]
 800c7c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7c4:	81a3      	strh	r3, [r4, #12]
 800c7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ca:	e03e      	b.n	800c84a <__swsetup_r+0xba>
 800c7cc:	4b25      	ldr	r3, [pc, #148]	; (800c864 <__swsetup_r+0xd4>)
 800c7ce:	429c      	cmp	r4, r3
 800c7d0:	d101      	bne.n	800c7d6 <__swsetup_r+0x46>
 800c7d2:	68ac      	ldr	r4, [r5, #8]
 800c7d4:	e7eb      	b.n	800c7ae <__swsetup_r+0x1e>
 800c7d6:	4b24      	ldr	r3, [pc, #144]	; (800c868 <__swsetup_r+0xd8>)
 800c7d8:	429c      	cmp	r4, r3
 800c7da:	bf08      	it	eq
 800c7dc:	68ec      	ldreq	r4, [r5, #12]
 800c7de:	e7e6      	b.n	800c7ae <__swsetup_r+0x1e>
 800c7e0:	0758      	lsls	r0, r3, #29
 800c7e2:	d512      	bpl.n	800c80a <__swsetup_r+0x7a>
 800c7e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7e6:	b141      	cbz	r1, 800c7fa <__swsetup_r+0x6a>
 800c7e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7ec:	4299      	cmp	r1, r3
 800c7ee:	d002      	beq.n	800c7f6 <__swsetup_r+0x66>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f7ff fb65 	bl	800bec0 <_free_r>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	6363      	str	r3, [r4, #52]	; 0x34
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	2300      	movs	r3, #0
 800c804:	6063      	str	r3, [r4, #4]
 800c806:	6923      	ldr	r3, [r4, #16]
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	89a3      	ldrh	r3, [r4, #12]
 800c80c:	f043 0308 	orr.w	r3, r3, #8
 800c810:	81a3      	strh	r3, [r4, #12]
 800c812:	6923      	ldr	r3, [r4, #16]
 800c814:	b94b      	cbnz	r3, 800c82a <__swsetup_r+0x9a>
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c81c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c820:	d003      	beq.n	800c82a <__swsetup_r+0x9a>
 800c822:	4621      	mov	r1, r4
 800c824:	4630      	mov	r0, r6
 800c826:	f000 fa07 	bl	800cc38 <__smakebuf_r>
 800c82a:	89a0      	ldrh	r0, [r4, #12]
 800c82c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c830:	f010 0301 	ands.w	r3, r0, #1
 800c834:	d00a      	beq.n	800c84c <__swsetup_r+0xbc>
 800c836:	2300      	movs	r3, #0
 800c838:	60a3      	str	r3, [r4, #8]
 800c83a:	6963      	ldr	r3, [r4, #20]
 800c83c:	425b      	negs	r3, r3
 800c83e:	61a3      	str	r3, [r4, #24]
 800c840:	6923      	ldr	r3, [r4, #16]
 800c842:	b943      	cbnz	r3, 800c856 <__swsetup_r+0xc6>
 800c844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c848:	d1ba      	bne.n	800c7c0 <__swsetup_r+0x30>
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	0781      	lsls	r1, r0, #30
 800c84e:	bf58      	it	pl
 800c850:	6963      	ldrpl	r3, [r4, #20]
 800c852:	60a3      	str	r3, [r4, #8]
 800c854:	e7f4      	b.n	800c840 <__swsetup_r+0xb0>
 800c856:	2000      	movs	r0, #0
 800c858:	e7f7      	b.n	800c84a <__swsetup_r+0xba>
 800c85a:	bf00      	nop
 800c85c:	2000001c 	.word	0x2000001c
 800c860:	0800d4c4 	.word	0x0800d4c4
 800c864:	0800d4e4 	.word	0x0800d4e4
 800c868:	0800d4a4 	.word	0x0800d4a4

0800c86c <abort>:
 800c86c:	b508      	push	{r3, lr}
 800c86e:	2006      	movs	r0, #6
 800c870:	f000 fa52 	bl	800cd18 <raise>
 800c874:	2001      	movs	r0, #1
 800c876:	f7f4 fe21 	bl	80014bc <_exit>
	...

0800c87c <__sflush_r>:
 800c87c:	898a      	ldrh	r2, [r1, #12]
 800c87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c882:	4605      	mov	r5, r0
 800c884:	0710      	lsls	r0, r2, #28
 800c886:	460c      	mov	r4, r1
 800c888:	d458      	bmi.n	800c93c <__sflush_r+0xc0>
 800c88a:	684b      	ldr	r3, [r1, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dc05      	bgt.n	800c89c <__sflush_r+0x20>
 800c890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c892:	2b00      	cmp	r3, #0
 800c894:	dc02      	bgt.n	800c89c <__sflush_r+0x20>
 800c896:	2000      	movs	r0, #0
 800c898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c89c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c89e:	2e00      	cmp	r6, #0
 800c8a0:	d0f9      	beq.n	800c896 <__sflush_r+0x1a>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8a8:	682f      	ldr	r7, [r5, #0]
 800c8aa:	602b      	str	r3, [r5, #0]
 800c8ac:	d032      	beq.n	800c914 <__sflush_r+0x98>
 800c8ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8b0:	89a3      	ldrh	r3, [r4, #12]
 800c8b2:	075a      	lsls	r2, r3, #29
 800c8b4:	d505      	bpl.n	800c8c2 <__sflush_r+0x46>
 800c8b6:	6863      	ldr	r3, [r4, #4]
 800c8b8:	1ac0      	subs	r0, r0, r3
 800c8ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8bc:	b10b      	cbz	r3, 800c8c2 <__sflush_r+0x46>
 800c8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8c0:	1ac0      	subs	r0, r0, r3
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8c8:	6a21      	ldr	r1, [r4, #32]
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	47b0      	blx	r6
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	d106      	bne.n	800c8e2 <__sflush_r+0x66>
 800c8d4:	6829      	ldr	r1, [r5, #0]
 800c8d6:	291d      	cmp	r1, #29
 800c8d8:	d82c      	bhi.n	800c934 <__sflush_r+0xb8>
 800c8da:	4a2a      	ldr	r2, [pc, #168]	; (800c984 <__sflush_r+0x108>)
 800c8dc:	40ca      	lsrs	r2, r1
 800c8de:	07d6      	lsls	r6, r2, #31
 800c8e0:	d528      	bpl.n	800c934 <__sflush_r+0xb8>
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	6062      	str	r2, [r4, #4]
 800c8e6:	04d9      	lsls	r1, r3, #19
 800c8e8:	6922      	ldr	r2, [r4, #16]
 800c8ea:	6022      	str	r2, [r4, #0]
 800c8ec:	d504      	bpl.n	800c8f8 <__sflush_r+0x7c>
 800c8ee:	1c42      	adds	r2, r0, #1
 800c8f0:	d101      	bne.n	800c8f6 <__sflush_r+0x7a>
 800c8f2:	682b      	ldr	r3, [r5, #0]
 800c8f4:	b903      	cbnz	r3, 800c8f8 <__sflush_r+0x7c>
 800c8f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8fa:	602f      	str	r7, [r5, #0]
 800c8fc:	2900      	cmp	r1, #0
 800c8fe:	d0ca      	beq.n	800c896 <__sflush_r+0x1a>
 800c900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c904:	4299      	cmp	r1, r3
 800c906:	d002      	beq.n	800c90e <__sflush_r+0x92>
 800c908:	4628      	mov	r0, r5
 800c90a:	f7ff fad9 	bl	800bec0 <_free_r>
 800c90e:	2000      	movs	r0, #0
 800c910:	6360      	str	r0, [r4, #52]	; 0x34
 800c912:	e7c1      	b.n	800c898 <__sflush_r+0x1c>
 800c914:	6a21      	ldr	r1, [r4, #32]
 800c916:	2301      	movs	r3, #1
 800c918:	4628      	mov	r0, r5
 800c91a:	47b0      	blx	r6
 800c91c:	1c41      	adds	r1, r0, #1
 800c91e:	d1c7      	bne.n	800c8b0 <__sflush_r+0x34>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0c4      	beq.n	800c8b0 <__sflush_r+0x34>
 800c926:	2b1d      	cmp	r3, #29
 800c928:	d001      	beq.n	800c92e <__sflush_r+0xb2>
 800c92a:	2b16      	cmp	r3, #22
 800c92c:	d101      	bne.n	800c932 <__sflush_r+0xb6>
 800c92e:	602f      	str	r7, [r5, #0]
 800c930:	e7b1      	b.n	800c896 <__sflush_r+0x1a>
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	e7ad      	b.n	800c898 <__sflush_r+0x1c>
 800c93c:	690f      	ldr	r7, [r1, #16]
 800c93e:	2f00      	cmp	r7, #0
 800c940:	d0a9      	beq.n	800c896 <__sflush_r+0x1a>
 800c942:	0793      	lsls	r3, r2, #30
 800c944:	680e      	ldr	r6, [r1, #0]
 800c946:	bf08      	it	eq
 800c948:	694b      	ldreq	r3, [r1, #20]
 800c94a:	600f      	str	r7, [r1, #0]
 800c94c:	bf18      	it	ne
 800c94e:	2300      	movne	r3, #0
 800c950:	eba6 0807 	sub.w	r8, r6, r7
 800c954:	608b      	str	r3, [r1, #8]
 800c956:	f1b8 0f00 	cmp.w	r8, #0
 800c95a:	dd9c      	ble.n	800c896 <__sflush_r+0x1a>
 800c95c:	6a21      	ldr	r1, [r4, #32]
 800c95e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c960:	4643      	mov	r3, r8
 800c962:	463a      	mov	r2, r7
 800c964:	4628      	mov	r0, r5
 800c966:	47b0      	blx	r6
 800c968:	2800      	cmp	r0, #0
 800c96a:	dc06      	bgt.n	800c97a <__sflush_r+0xfe>
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c972:	81a3      	strh	r3, [r4, #12]
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	e78e      	b.n	800c898 <__sflush_r+0x1c>
 800c97a:	4407      	add	r7, r0
 800c97c:	eba8 0800 	sub.w	r8, r8, r0
 800c980:	e7e9      	b.n	800c956 <__sflush_r+0xda>
 800c982:	bf00      	nop
 800c984:	20400001 	.word	0x20400001

0800c988 <_fflush_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	690b      	ldr	r3, [r1, #16]
 800c98c:	4605      	mov	r5, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	b913      	cbnz	r3, 800c998 <_fflush_r+0x10>
 800c992:	2500      	movs	r5, #0
 800c994:	4628      	mov	r0, r5
 800c996:	bd38      	pop	{r3, r4, r5, pc}
 800c998:	b118      	cbz	r0, 800c9a2 <_fflush_r+0x1a>
 800c99a:	6983      	ldr	r3, [r0, #24]
 800c99c:	b90b      	cbnz	r3, 800c9a2 <_fflush_r+0x1a>
 800c99e:	f000 f887 	bl	800cab0 <__sinit>
 800c9a2:	4b14      	ldr	r3, [pc, #80]	; (800c9f4 <_fflush_r+0x6c>)
 800c9a4:	429c      	cmp	r4, r3
 800c9a6:	d11b      	bne.n	800c9e0 <_fflush_r+0x58>
 800c9a8:	686c      	ldr	r4, [r5, #4]
 800c9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0ef      	beq.n	800c992 <_fflush_r+0xa>
 800c9b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9b4:	07d0      	lsls	r0, r2, #31
 800c9b6:	d404      	bmi.n	800c9c2 <_fflush_r+0x3a>
 800c9b8:	0599      	lsls	r1, r3, #22
 800c9ba:	d402      	bmi.n	800c9c2 <_fflush_r+0x3a>
 800c9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9be:	f000 f915 	bl	800cbec <__retarget_lock_acquire_recursive>
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	f7ff ff59 	bl	800c87c <__sflush_r>
 800c9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9cc:	07da      	lsls	r2, r3, #31
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	d4e0      	bmi.n	800c994 <_fflush_r+0xc>
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	059b      	lsls	r3, r3, #22
 800c9d6:	d4dd      	bmi.n	800c994 <_fflush_r+0xc>
 800c9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9da:	f000 f908 	bl	800cbee <__retarget_lock_release_recursive>
 800c9de:	e7d9      	b.n	800c994 <_fflush_r+0xc>
 800c9e0:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <_fflush_r+0x70>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	d101      	bne.n	800c9ea <_fflush_r+0x62>
 800c9e6:	68ac      	ldr	r4, [r5, #8]
 800c9e8:	e7df      	b.n	800c9aa <_fflush_r+0x22>
 800c9ea:	4b04      	ldr	r3, [pc, #16]	; (800c9fc <_fflush_r+0x74>)
 800c9ec:	429c      	cmp	r4, r3
 800c9ee:	bf08      	it	eq
 800c9f0:	68ec      	ldreq	r4, [r5, #12]
 800c9f2:	e7da      	b.n	800c9aa <_fflush_r+0x22>
 800c9f4:	0800d4c4 	.word	0x0800d4c4
 800c9f8:	0800d4e4 	.word	0x0800d4e4
 800c9fc:	0800d4a4 	.word	0x0800d4a4

0800ca00 <std>:
 800ca00:	2300      	movs	r3, #0
 800ca02:	b510      	push	{r4, lr}
 800ca04:	4604      	mov	r4, r0
 800ca06:	e9c0 3300 	strd	r3, r3, [r0]
 800ca0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca0e:	6083      	str	r3, [r0, #8]
 800ca10:	8181      	strh	r1, [r0, #12]
 800ca12:	6643      	str	r3, [r0, #100]	; 0x64
 800ca14:	81c2      	strh	r2, [r0, #14]
 800ca16:	6183      	str	r3, [r0, #24]
 800ca18:	4619      	mov	r1, r3
 800ca1a:	2208      	movs	r2, #8
 800ca1c:	305c      	adds	r0, #92	; 0x5c
 800ca1e:	f7fb fe21 	bl	8008664 <memset>
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <std+0x38>)
 800ca24:	6263      	str	r3, [r4, #36]	; 0x24
 800ca26:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <std+0x3c>)
 800ca28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca2a:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <std+0x40>)
 800ca2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca2e:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <std+0x44>)
 800ca30:	6224      	str	r4, [r4, #32]
 800ca32:	6323      	str	r3, [r4, #48]	; 0x30
 800ca34:	bd10      	pop	{r4, pc}
 800ca36:	bf00      	nop
 800ca38:	0800cd51 	.word	0x0800cd51
 800ca3c:	0800cd73 	.word	0x0800cd73
 800ca40:	0800cdab 	.word	0x0800cdab
 800ca44:	0800cdcf 	.word	0x0800cdcf

0800ca48 <_cleanup_r>:
 800ca48:	4901      	ldr	r1, [pc, #4]	; (800ca50 <_cleanup_r+0x8>)
 800ca4a:	f000 b8af 	b.w	800cbac <_fwalk_reent>
 800ca4e:	bf00      	nop
 800ca50:	0800c989 	.word	0x0800c989

0800ca54 <__sfmoreglue>:
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	1e4a      	subs	r2, r1, #1
 800ca58:	2568      	movs	r5, #104	; 0x68
 800ca5a:	4355      	muls	r5, r2
 800ca5c:	460e      	mov	r6, r1
 800ca5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca62:	f7ff fa7d 	bl	800bf60 <_malloc_r>
 800ca66:	4604      	mov	r4, r0
 800ca68:	b140      	cbz	r0, 800ca7c <__sfmoreglue+0x28>
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ca70:	300c      	adds	r0, #12
 800ca72:	60a0      	str	r0, [r4, #8]
 800ca74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca78:	f7fb fdf4 	bl	8008664 <memset>
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}

0800ca80 <__sfp_lock_acquire>:
 800ca80:	4801      	ldr	r0, [pc, #4]	; (800ca88 <__sfp_lock_acquire+0x8>)
 800ca82:	f000 b8b3 	b.w	800cbec <__retarget_lock_acquire_recursive>
 800ca86:	bf00      	nop
 800ca88:	20001cc0 	.word	0x20001cc0

0800ca8c <__sfp_lock_release>:
 800ca8c:	4801      	ldr	r0, [pc, #4]	; (800ca94 <__sfp_lock_release+0x8>)
 800ca8e:	f000 b8ae 	b.w	800cbee <__retarget_lock_release_recursive>
 800ca92:	bf00      	nop
 800ca94:	20001cc0 	.word	0x20001cc0

0800ca98 <__sinit_lock_acquire>:
 800ca98:	4801      	ldr	r0, [pc, #4]	; (800caa0 <__sinit_lock_acquire+0x8>)
 800ca9a:	f000 b8a7 	b.w	800cbec <__retarget_lock_acquire_recursive>
 800ca9e:	bf00      	nop
 800caa0:	20001cbb 	.word	0x20001cbb

0800caa4 <__sinit_lock_release>:
 800caa4:	4801      	ldr	r0, [pc, #4]	; (800caac <__sinit_lock_release+0x8>)
 800caa6:	f000 b8a2 	b.w	800cbee <__retarget_lock_release_recursive>
 800caaa:	bf00      	nop
 800caac:	20001cbb 	.word	0x20001cbb

0800cab0 <__sinit>:
 800cab0:	b510      	push	{r4, lr}
 800cab2:	4604      	mov	r4, r0
 800cab4:	f7ff fff0 	bl	800ca98 <__sinit_lock_acquire>
 800cab8:	69a3      	ldr	r3, [r4, #24]
 800caba:	b11b      	cbz	r3, 800cac4 <__sinit+0x14>
 800cabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac0:	f7ff bff0 	b.w	800caa4 <__sinit_lock_release>
 800cac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cac8:	6523      	str	r3, [r4, #80]	; 0x50
 800caca:	4b13      	ldr	r3, [pc, #76]	; (800cb18 <__sinit+0x68>)
 800cacc:	4a13      	ldr	r2, [pc, #76]	; (800cb1c <__sinit+0x6c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cad2:	42a3      	cmp	r3, r4
 800cad4:	bf04      	itt	eq
 800cad6:	2301      	moveq	r3, #1
 800cad8:	61a3      	streq	r3, [r4, #24]
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 f820 	bl	800cb20 <__sfp>
 800cae0:	6060      	str	r0, [r4, #4]
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 f81c 	bl	800cb20 <__sfp>
 800cae8:	60a0      	str	r0, [r4, #8]
 800caea:	4620      	mov	r0, r4
 800caec:	f000 f818 	bl	800cb20 <__sfp>
 800caf0:	2200      	movs	r2, #0
 800caf2:	60e0      	str	r0, [r4, #12]
 800caf4:	2104      	movs	r1, #4
 800caf6:	6860      	ldr	r0, [r4, #4]
 800caf8:	f7ff ff82 	bl	800ca00 <std>
 800cafc:	68a0      	ldr	r0, [r4, #8]
 800cafe:	2201      	movs	r2, #1
 800cb00:	2109      	movs	r1, #9
 800cb02:	f7ff ff7d 	bl	800ca00 <std>
 800cb06:	68e0      	ldr	r0, [r4, #12]
 800cb08:	2202      	movs	r2, #2
 800cb0a:	2112      	movs	r1, #18
 800cb0c:	f7ff ff78 	bl	800ca00 <std>
 800cb10:	2301      	movs	r3, #1
 800cb12:	61a3      	str	r3, [r4, #24]
 800cb14:	e7d2      	b.n	800cabc <__sinit+0xc>
 800cb16:	bf00      	nop
 800cb18:	0800d050 	.word	0x0800d050
 800cb1c:	0800ca49 	.word	0x0800ca49

0800cb20 <__sfp>:
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb22:	4607      	mov	r7, r0
 800cb24:	f7ff ffac 	bl	800ca80 <__sfp_lock_acquire>
 800cb28:	4b1e      	ldr	r3, [pc, #120]	; (800cba4 <__sfp+0x84>)
 800cb2a:	681e      	ldr	r6, [r3, #0]
 800cb2c:	69b3      	ldr	r3, [r6, #24]
 800cb2e:	b913      	cbnz	r3, 800cb36 <__sfp+0x16>
 800cb30:	4630      	mov	r0, r6
 800cb32:	f7ff ffbd 	bl	800cab0 <__sinit>
 800cb36:	3648      	adds	r6, #72	; 0x48
 800cb38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	d503      	bpl.n	800cb48 <__sfp+0x28>
 800cb40:	6833      	ldr	r3, [r6, #0]
 800cb42:	b30b      	cbz	r3, 800cb88 <__sfp+0x68>
 800cb44:	6836      	ldr	r6, [r6, #0]
 800cb46:	e7f7      	b.n	800cb38 <__sfp+0x18>
 800cb48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb4c:	b9d5      	cbnz	r5, 800cb84 <__sfp+0x64>
 800cb4e:	4b16      	ldr	r3, [pc, #88]	; (800cba8 <__sfp+0x88>)
 800cb50:	60e3      	str	r3, [r4, #12]
 800cb52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb56:	6665      	str	r5, [r4, #100]	; 0x64
 800cb58:	f000 f847 	bl	800cbea <__retarget_lock_init_recursive>
 800cb5c:	f7ff ff96 	bl	800ca8c <__sfp_lock_release>
 800cb60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb68:	6025      	str	r5, [r4, #0]
 800cb6a:	61a5      	str	r5, [r4, #24]
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb74:	f7fb fd76 	bl	8008664 <memset>
 800cb78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb80:	4620      	mov	r0, r4
 800cb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb84:	3468      	adds	r4, #104	; 0x68
 800cb86:	e7d9      	b.n	800cb3c <__sfp+0x1c>
 800cb88:	2104      	movs	r1, #4
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f7ff ff62 	bl	800ca54 <__sfmoreglue>
 800cb90:	4604      	mov	r4, r0
 800cb92:	6030      	str	r0, [r6, #0]
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d1d5      	bne.n	800cb44 <__sfp+0x24>
 800cb98:	f7ff ff78 	bl	800ca8c <__sfp_lock_release>
 800cb9c:	230c      	movs	r3, #12
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	e7ee      	b.n	800cb80 <__sfp+0x60>
 800cba2:	bf00      	nop
 800cba4:	0800d050 	.word	0x0800d050
 800cba8:	ffff0001 	.word	0xffff0001

0800cbac <_fwalk_reent>:
 800cbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb0:	4606      	mov	r6, r0
 800cbb2:	4688      	mov	r8, r1
 800cbb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbb8:	2700      	movs	r7, #0
 800cbba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbbe:	f1b9 0901 	subs.w	r9, r9, #1
 800cbc2:	d505      	bpl.n	800cbd0 <_fwalk_reent+0x24>
 800cbc4:	6824      	ldr	r4, [r4, #0]
 800cbc6:	2c00      	cmp	r4, #0
 800cbc8:	d1f7      	bne.n	800cbba <_fwalk_reent+0xe>
 800cbca:	4638      	mov	r0, r7
 800cbcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbd0:	89ab      	ldrh	r3, [r5, #12]
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d907      	bls.n	800cbe6 <_fwalk_reent+0x3a>
 800cbd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	d003      	beq.n	800cbe6 <_fwalk_reent+0x3a>
 800cbde:	4629      	mov	r1, r5
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	47c0      	blx	r8
 800cbe4:	4307      	orrs	r7, r0
 800cbe6:	3568      	adds	r5, #104	; 0x68
 800cbe8:	e7e9      	b.n	800cbbe <_fwalk_reent+0x12>

0800cbea <__retarget_lock_init_recursive>:
 800cbea:	4770      	bx	lr

0800cbec <__retarget_lock_acquire_recursive>:
 800cbec:	4770      	bx	lr

0800cbee <__retarget_lock_release_recursive>:
 800cbee:	4770      	bx	lr

0800cbf0 <__swhatbuf_r>:
 800cbf0:	b570      	push	{r4, r5, r6, lr}
 800cbf2:	460e      	mov	r6, r1
 800cbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf8:	2900      	cmp	r1, #0
 800cbfa:	b096      	sub	sp, #88	; 0x58
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	461d      	mov	r5, r3
 800cc00:	da07      	bge.n	800cc12 <__swhatbuf_r+0x22>
 800cc02:	2300      	movs	r3, #0
 800cc04:	602b      	str	r3, [r5, #0]
 800cc06:	89b3      	ldrh	r3, [r6, #12]
 800cc08:	061a      	lsls	r2, r3, #24
 800cc0a:	d410      	bmi.n	800cc2e <__swhatbuf_r+0x3e>
 800cc0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc10:	e00e      	b.n	800cc30 <__swhatbuf_r+0x40>
 800cc12:	466a      	mov	r2, sp
 800cc14:	f000 f902 	bl	800ce1c <_fstat_r>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	dbf2      	blt.n	800cc02 <__swhatbuf_r+0x12>
 800cc1c:	9a01      	ldr	r2, [sp, #4]
 800cc1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc26:	425a      	negs	r2, r3
 800cc28:	415a      	adcs	r2, r3
 800cc2a:	602a      	str	r2, [r5, #0]
 800cc2c:	e7ee      	b.n	800cc0c <__swhatbuf_r+0x1c>
 800cc2e:	2340      	movs	r3, #64	; 0x40
 800cc30:	2000      	movs	r0, #0
 800cc32:	6023      	str	r3, [r4, #0]
 800cc34:	b016      	add	sp, #88	; 0x58
 800cc36:	bd70      	pop	{r4, r5, r6, pc}

0800cc38 <__smakebuf_r>:
 800cc38:	898b      	ldrh	r3, [r1, #12]
 800cc3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc3c:	079d      	lsls	r5, r3, #30
 800cc3e:	4606      	mov	r6, r0
 800cc40:	460c      	mov	r4, r1
 800cc42:	d507      	bpl.n	800cc54 <__smakebuf_r+0x1c>
 800cc44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	6123      	str	r3, [r4, #16]
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	6163      	str	r3, [r4, #20]
 800cc50:	b002      	add	sp, #8
 800cc52:	bd70      	pop	{r4, r5, r6, pc}
 800cc54:	ab01      	add	r3, sp, #4
 800cc56:	466a      	mov	r2, sp
 800cc58:	f7ff ffca 	bl	800cbf0 <__swhatbuf_r>
 800cc5c:	9900      	ldr	r1, [sp, #0]
 800cc5e:	4605      	mov	r5, r0
 800cc60:	4630      	mov	r0, r6
 800cc62:	f7ff f97d 	bl	800bf60 <_malloc_r>
 800cc66:	b948      	cbnz	r0, 800cc7c <__smakebuf_r+0x44>
 800cc68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc6c:	059a      	lsls	r2, r3, #22
 800cc6e:	d4ef      	bmi.n	800cc50 <__smakebuf_r+0x18>
 800cc70:	f023 0303 	bic.w	r3, r3, #3
 800cc74:	f043 0302 	orr.w	r3, r3, #2
 800cc78:	81a3      	strh	r3, [r4, #12]
 800cc7a:	e7e3      	b.n	800cc44 <__smakebuf_r+0xc>
 800cc7c:	4b0d      	ldr	r3, [pc, #52]	; (800ccb4 <__smakebuf_r+0x7c>)
 800cc7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	6020      	str	r0, [r4, #0]
 800cc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc88:	81a3      	strh	r3, [r4, #12]
 800cc8a:	9b00      	ldr	r3, [sp, #0]
 800cc8c:	6163      	str	r3, [r4, #20]
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	6120      	str	r0, [r4, #16]
 800cc92:	b15b      	cbz	r3, 800ccac <__smakebuf_r+0x74>
 800cc94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc98:	4630      	mov	r0, r6
 800cc9a:	f000 f8d1 	bl	800ce40 <_isatty_r>
 800cc9e:	b128      	cbz	r0, 800ccac <__smakebuf_r+0x74>
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	f023 0303 	bic.w	r3, r3, #3
 800cca6:	f043 0301 	orr.w	r3, r3, #1
 800ccaa:	81a3      	strh	r3, [r4, #12]
 800ccac:	89a0      	ldrh	r0, [r4, #12]
 800ccae:	4305      	orrs	r5, r0
 800ccb0:	81a5      	strh	r5, [r4, #12]
 800ccb2:	e7cd      	b.n	800cc50 <__smakebuf_r+0x18>
 800ccb4:	0800ca49 	.word	0x0800ca49

0800ccb8 <_malloc_usable_size_r>:
 800ccb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccbc:	1f18      	subs	r0, r3, #4
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bfbc      	itt	lt
 800ccc2:	580b      	ldrlt	r3, [r1, r0]
 800ccc4:	18c0      	addlt	r0, r0, r3
 800ccc6:	4770      	bx	lr

0800ccc8 <_raise_r>:
 800ccc8:	291f      	cmp	r1, #31
 800ccca:	b538      	push	{r3, r4, r5, lr}
 800cccc:	4604      	mov	r4, r0
 800ccce:	460d      	mov	r5, r1
 800ccd0:	d904      	bls.n	800ccdc <_raise_r+0x14>
 800ccd2:	2316      	movs	r3, #22
 800ccd4:	6003      	str	r3, [r0, #0]
 800ccd6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ccde:	b112      	cbz	r2, 800cce6 <_raise_r+0x1e>
 800cce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cce4:	b94b      	cbnz	r3, 800ccfa <_raise_r+0x32>
 800cce6:	4620      	mov	r0, r4
 800cce8:	f000 f830 	bl	800cd4c <_getpid_r>
 800ccec:	462a      	mov	r2, r5
 800ccee:	4601      	mov	r1, r0
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccf6:	f000 b817 	b.w	800cd28 <_kill_r>
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d00a      	beq.n	800cd14 <_raise_r+0x4c>
 800ccfe:	1c59      	adds	r1, r3, #1
 800cd00:	d103      	bne.n	800cd0a <_raise_r+0x42>
 800cd02:	2316      	movs	r3, #22
 800cd04:	6003      	str	r3, [r0, #0]
 800cd06:	2001      	movs	r0, #1
 800cd08:	e7e7      	b.n	800ccda <_raise_r+0x12>
 800cd0a:	2400      	movs	r4, #0
 800cd0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd10:	4628      	mov	r0, r5
 800cd12:	4798      	blx	r3
 800cd14:	2000      	movs	r0, #0
 800cd16:	e7e0      	b.n	800ccda <_raise_r+0x12>

0800cd18 <raise>:
 800cd18:	4b02      	ldr	r3, [pc, #8]	; (800cd24 <raise+0xc>)
 800cd1a:	4601      	mov	r1, r0
 800cd1c:	6818      	ldr	r0, [r3, #0]
 800cd1e:	f7ff bfd3 	b.w	800ccc8 <_raise_r>
 800cd22:	bf00      	nop
 800cd24:	2000001c 	.word	0x2000001c

0800cd28 <_kill_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4d07      	ldr	r5, [pc, #28]	; (800cd48 <_kill_r+0x20>)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4604      	mov	r4, r0
 800cd30:	4608      	mov	r0, r1
 800cd32:	4611      	mov	r1, r2
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	f7f4 fbb1 	bl	800149c <_kill>
 800cd3a:	1c43      	adds	r3, r0, #1
 800cd3c:	d102      	bne.n	800cd44 <_kill_r+0x1c>
 800cd3e:	682b      	ldr	r3, [r5, #0]
 800cd40:	b103      	cbz	r3, 800cd44 <_kill_r+0x1c>
 800cd42:	6023      	str	r3, [r4, #0]
 800cd44:	bd38      	pop	{r3, r4, r5, pc}
 800cd46:	bf00      	nop
 800cd48:	20001cb4 	.word	0x20001cb4

0800cd4c <_getpid_r>:
 800cd4c:	f7f4 bb9e 	b.w	800148c <_getpid>

0800cd50 <__sread>:
 800cd50:	b510      	push	{r4, lr}
 800cd52:	460c      	mov	r4, r1
 800cd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd58:	f000 f894 	bl	800ce84 <_read_r>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	bfab      	itete	ge
 800cd60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd62:	89a3      	ldrhlt	r3, [r4, #12]
 800cd64:	181b      	addge	r3, r3, r0
 800cd66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd6a:	bfac      	ite	ge
 800cd6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd6e:	81a3      	strhlt	r3, [r4, #12]
 800cd70:	bd10      	pop	{r4, pc}

0800cd72 <__swrite>:
 800cd72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd76:	461f      	mov	r7, r3
 800cd78:	898b      	ldrh	r3, [r1, #12]
 800cd7a:	05db      	lsls	r3, r3, #23
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	460c      	mov	r4, r1
 800cd80:	4616      	mov	r6, r2
 800cd82:	d505      	bpl.n	800cd90 <__swrite+0x1e>
 800cd84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd88:	2302      	movs	r3, #2
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f000 f868 	bl	800ce60 <_lseek_r>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	463b      	mov	r3, r7
 800cda0:	4628      	mov	r0, r5
 800cda2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cda6:	f000 b817 	b.w	800cdd8 <_write_r>

0800cdaa <__sseek>:
 800cdaa:	b510      	push	{r4, lr}
 800cdac:	460c      	mov	r4, r1
 800cdae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb2:	f000 f855 	bl	800ce60 <_lseek_r>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	bf15      	itete	ne
 800cdbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cdc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cdc6:	81a3      	strheq	r3, [r4, #12]
 800cdc8:	bf18      	it	ne
 800cdca:	81a3      	strhne	r3, [r4, #12]
 800cdcc:	bd10      	pop	{r4, pc}

0800cdce <__sclose>:
 800cdce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd2:	f000 b813 	b.w	800cdfc <_close_r>
	...

0800cdd8 <_write_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	4d07      	ldr	r5, [pc, #28]	; (800cdf8 <_write_r+0x20>)
 800cddc:	4604      	mov	r4, r0
 800cdde:	4608      	mov	r0, r1
 800cde0:	4611      	mov	r1, r2
 800cde2:	2200      	movs	r2, #0
 800cde4:	602a      	str	r2, [r5, #0]
 800cde6:	461a      	mov	r2, r3
 800cde8:	f7f4 fb8f 	bl	800150a <_write>
 800cdec:	1c43      	adds	r3, r0, #1
 800cdee:	d102      	bne.n	800cdf6 <_write_r+0x1e>
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	b103      	cbz	r3, 800cdf6 <_write_r+0x1e>
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
 800cdf8:	20001cb4 	.word	0x20001cb4

0800cdfc <_close_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	4d06      	ldr	r5, [pc, #24]	; (800ce18 <_close_r+0x1c>)
 800ce00:	2300      	movs	r3, #0
 800ce02:	4604      	mov	r4, r0
 800ce04:	4608      	mov	r0, r1
 800ce06:	602b      	str	r3, [r5, #0]
 800ce08:	f7f4 fb9b 	bl	8001542 <_close>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_close_r+0x1a>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_close_r+0x1a>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20001cb4 	.word	0x20001cb4

0800ce1c <_fstat_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4d07      	ldr	r5, [pc, #28]	; (800ce3c <_fstat_r+0x20>)
 800ce20:	2300      	movs	r3, #0
 800ce22:	4604      	mov	r4, r0
 800ce24:	4608      	mov	r0, r1
 800ce26:	4611      	mov	r1, r2
 800ce28:	602b      	str	r3, [r5, #0]
 800ce2a:	f7f4 fb96 	bl	800155a <_fstat>
 800ce2e:	1c43      	adds	r3, r0, #1
 800ce30:	d102      	bne.n	800ce38 <_fstat_r+0x1c>
 800ce32:	682b      	ldr	r3, [r5, #0]
 800ce34:	b103      	cbz	r3, 800ce38 <_fstat_r+0x1c>
 800ce36:	6023      	str	r3, [r4, #0]
 800ce38:	bd38      	pop	{r3, r4, r5, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20001cb4 	.word	0x20001cb4

0800ce40 <_isatty_r>:
 800ce40:	b538      	push	{r3, r4, r5, lr}
 800ce42:	4d06      	ldr	r5, [pc, #24]	; (800ce5c <_isatty_r+0x1c>)
 800ce44:	2300      	movs	r3, #0
 800ce46:	4604      	mov	r4, r0
 800ce48:	4608      	mov	r0, r1
 800ce4a:	602b      	str	r3, [r5, #0]
 800ce4c:	f7f4 fb95 	bl	800157a <_isatty>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	d102      	bne.n	800ce5a <_isatty_r+0x1a>
 800ce54:	682b      	ldr	r3, [r5, #0]
 800ce56:	b103      	cbz	r3, 800ce5a <_isatty_r+0x1a>
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	bd38      	pop	{r3, r4, r5, pc}
 800ce5c:	20001cb4 	.word	0x20001cb4

0800ce60 <_lseek_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4d07      	ldr	r5, [pc, #28]	; (800ce80 <_lseek_r+0x20>)
 800ce64:	4604      	mov	r4, r0
 800ce66:	4608      	mov	r0, r1
 800ce68:	4611      	mov	r1, r2
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	602a      	str	r2, [r5, #0]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f7f4 fb8e 	bl	8001590 <_lseek>
 800ce74:	1c43      	adds	r3, r0, #1
 800ce76:	d102      	bne.n	800ce7e <_lseek_r+0x1e>
 800ce78:	682b      	ldr	r3, [r5, #0]
 800ce7a:	b103      	cbz	r3, 800ce7e <_lseek_r+0x1e>
 800ce7c:	6023      	str	r3, [r4, #0]
 800ce7e:	bd38      	pop	{r3, r4, r5, pc}
 800ce80:	20001cb4 	.word	0x20001cb4

0800ce84 <_read_r>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4d07      	ldr	r5, [pc, #28]	; (800cea4 <_read_r+0x20>)
 800ce88:	4604      	mov	r4, r0
 800ce8a:	4608      	mov	r0, r1
 800ce8c:	4611      	mov	r1, r2
 800ce8e:	2200      	movs	r2, #0
 800ce90:	602a      	str	r2, [r5, #0]
 800ce92:	461a      	mov	r2, r3
 800ce94:	f7f4 fb1c 	bl	80014d0 <_read>
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	d102      	bne.n	800cea2 <_read_r+0x1e>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	b103      	cbz	r3, 800cea2 <_read_r+0x1e>
 800cea0:	6023      	str	r3, [r4, #0]
 800cea2:	bd38      	pop	{r3, r4, r5, pc}
 800cea4:	20001cb4 	.word	0x20001cb4

0800cea8 <_sbrk>:
 800cea8:	4b04      	ldr	r3, [pc, #16]	; (800cebc <_sbrk+0x14>)
 800ceaa:	6819      	ldr	r1, [r3, #0]
 800ceac:	4602      	mov	r2, r0
 800ceae:	b909      	cbnz	r1, 800ceb4 <_sbrk+0xc>
 800ceb0:	4903      	ldr	r1, [pc, #12]	; (800cec0 <_sbrk+0x18>)
 800ceb2:	6019      	str	r1, [r3, #0]
 800ceb4:	6818      	ldr	r0, [r3, #0]
 800ceb6:	4402      	add	r2, r0
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	4770      	bx	lr
 800cebc:	20001b68 	.word	0x20001b68
 800cec0:	20001cc8 	.word	0x20001cc8

0800cec4 <_init>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr

0800ced0 <_fini>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr
